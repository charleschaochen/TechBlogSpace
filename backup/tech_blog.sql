/*
Navicat MySQL Data Transfer

Source Server         : TechBlog
Source Server Version : 50403
Source Host           : 113.10.242.72:3306
Source Database       : tech_blog

Target Server Type    : MYSQL
Target Server Version : 50403
File Encoding         : 65001

Date: 2014-06-21 23:11:00
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for tech_blog_admin
-- ----------------------------
DROP TABLE IF EXISTS `tech_blog_admin`;
CREATE TABLE `tech_blog_admin` (
  `admin_id` smallint(6) NOT NULL AUTO_INCREMENT COMMENT 'Admin ID',
  `admin_login_name` varchar(15) NOT NULL DEFAULT '' COMMENT 'Admin login name',
  `admin_login_passwd` varchar(15) NOT NULL DEFAULT '' COMMENT 'Admin login password',
  `admin_email` varchar(30) NOT NULL DEFAULT '' COMMENT 'Admin email address',
  `admin_img` varchar(30) NOT NULL COMMENT 'Admin portrait',
  `admin_power` smallint(6) NOT NULL COMMENT 'Admin power level',
  `bk_field_1` varchar(20) DEFAULT '' COMMENT 'Backup field 1',
  `bk_field_2` varchar(20) DEFAULT NULL COMMENT 'Backup field 2',
  `bk_field_3` varchar(20) DEFAULT NULL COMMENT 'Backup field 3',
  PRIMARY KEY (`admin_id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of tech_blog_admin
-- ----------------------------
INSERT INTO `tech_blog_admin` VALUES ('1', 'charles', '2436chao', '399931011@qq.com', '/admin_img/programmar.jpg', '0', '', null, null);

-- ----------------------------
-- Table structure for tech_blog_article
-- ----------------------------
DROP TABLE IF EXISTS `tech_blog_article`;
CREATE TABLE `tech_blog_article` (
  `article_id` smallint(6) NOT NULL AUTO_INCREMENT COMMENT 'Primary key ID',
  `article_title` varchar(100) NOT NULL COMMENT 'Article title',
  `article_content` mediumtext NOT NULL COMMENT 'Article main content',
  `category_id` smallint(6) NOT NULL COMMENT 'Category ID',
  `author_id` smallint(6) NOT NULL COMMENT 'Author admin ID',
  `article_post_time` datetime NOT NULL COMMENT 'Article post time',
  `article_update_time` datetime NOT NULL COMMENT 'Article last update time',
  `article_view_times` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Article viewing times',
  `article_reply_times` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Article repling times',
  `article_set_top` tinyint(4) NOT NULL DEFAULT '0' COMMENT 'Top-allocated or not',
  `article_state` tinyint(4) NOT NULL DEFAULT '1' COMMENT 'Article state, 1 for published, 0 for draft, -1 for deleted',
  `bk_field_1` varchar(255) DEFAULT NULL,
  `bk_field_2` varchar(255) DEFAULT NULL,
  `bk_field_3` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`article_id`),
  KEY `article_author` (`author_id`) USING BTREE,
  KEY `article_category` (`category_id`) USING BTREE,
  KEY `article_content_index` (`article_content`(255)) USING BTREE,
  CONSTRAINT `tech_blog_article_ibfk_1` FOREIGN KEY (`author_id`) REFERENCES `tech_blog_admin` (`admin_id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `tech_blog_article_ibfk_2` FOREIGN KEY (`category_id`) REFERENCES `tech_blog_article_category` (`category_id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=35 DEFAULT CHARSET=utf8 COMMENT='InnoDB free: 0 kB; (`author_id`) REFER `tech_blog/tech_blog_';

-- ----------------------------
-- Records of tech_blog_article
-- ----------------------------
INSERT INTO `tech_blog_article` VALUES ('1', 'NBA 与 SAP 联手改变看球方式', '<p style=\"margin: 0px 0px 20px; padding: 0px; line-height: 25.1875px; color: rgb(51, 51, 51); font-family: Arial, Helvetica, sans-serif; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);\"><a href=\"http://www.fastcolabs.com/3022190/how-nbas-big-data-strategy-will-change-the-way-you-watch-basketball\" style=\"margin: 0px; padding: 0px; text-decoration: none; outline: none; color: rgb(0, 82, 170);\">Fastcompany 报道</a>，本周一，NBA 球迷即可在&nbsp;<a href=\"http://china.nba.com/\" style=\"margin: 0px; padding: 0px; text-decoration: none; outline: none; color: rgb(0, 82, 170);\">NBA.com/SATS</a>&nbsp;上免费享用 NBA 与 SAP、STATS LLC 携手创建的完整 NBA 球赛数据库。</p><p style=\"margin: 0px 0px 20px; padding: 0px; line-height: 25.1875px; color: rgb(51, 51, 51); font-family: Arial, Helvetica, sans-serif; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);\">NBA 的高级副总裁兼首席信息官 Michael Gliedman 谈到：</p><blockquote style=\"margin: 20px; padding: 0px 20px; border-left-width: 5px; border-left-style: solid; border-left-color: rgb(234, 238, 241); color: rgb(85, 85, 85); font-family: Arial, Helvetica, sans-serif; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 25.1875px; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);\"><p style=\"margin: 0px 0px 10px; padding: 0px; line-height: 1.8em;\">“我们将视频和数据联姻，视频和数据讲不同的故事，但是两者互相补充。我们利用视频的情境来阐释数据，以球迷需要的方式讲好故事。我们经常问，如何可以达到人们观看视频时提出问题，并立即得到回复的效果。”</p></blockquote><p style=\"margin: 0px 0px 20px; padding: 0px; line-height: 25.1875px; color: rgb(51, 51, 51); font-family: Arial, Helvetica, sans-serif; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);\">答案是&nbsp;HANA 和 Video Box Score 平台。SAP 开发了 HANA 内存计算机实时平台，该平台带有一个缓存层可以以极快的速度处理和展示数据。这样，NBA 球迷可以解读他们所支持球队的所有数据和视频，并对对手球队数据交叉引用分析。</p><p style=\"margin: 0px 0px 20px; padding: 0px; line-height: 25.1875px; color: rgb(51, 51, 51); font-family: Arial, Helvetica, sans-serif; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-align: center;\"><a href=\"http://cdn.ifanr.cn/wp-content/uploads/2013/11/nba-pic-2_%E5%89%AF%E6%9C%AC.png\" rel=\"lightbox[379080]\" style=\"margin: 0px; padding: 0px; text-decoration: none; outline: none; color: rgb(0, 82, 170);\"><img class=\"aligncenter size-full wp-image-379210\" alt=\"nba-pic-2_副本\" src=\"http://cdn.ifanr.cn/wp-content/uploads/2013/11/nba-pic-2_%E5%89%AF%E6%9C%AC.png\" style=\"margin: 0px auto; padding: 0px; border: 0px solid rgb(204, 204, 204); display: block; max-width: 600px; height: auto; text-align: center;\" height=\"442\" width=\"500\" /></a></p><p style=\"margin: 0px 0px 20px; padding: 0px; line-height: 25.1875px; color: rgb(51, 51, 51); font-family: Arial, Helvetica, sans-serif; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);\">NBA 正在引领一场数据革命，他们并没有张贴 YouTube 的撤销公告，而是下定决心拿出比竞争对手更优化、更娴熟的技术阐释数据。将无穷无尽的内容直接编辑推送到球迷和教练的电脑前，彻底改变理解 NBA 方式。</p>', '9', '1', '2013-11-26 18:09:25', '2013-11-26 18:09:25', '1370', '1', '0', '1', null, null, null);
INSERT INTO `tech_blog_article` VALUES ('2', 'Uber：不只是打车应用', '<p style=\"margin: 0px 0px 20px; padding: 0px; line-height: 25.1875px; color: rgb(51, 51, 51); font-family: Arial, Helvetica, sans-serif; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);\"><a href=\"http://cdn.ifanr.cn/wp-content/uploads/2013/11/Uber.jpg\" rel=\"lightbox[379132]\" style=\"margin: 0px; padding: 0px; text-decoration: none; outline: none; color: rgb(0, 82, 170);\"><img class=\"aligncenter size-full wp-image-379136\" alt=\"Uber\" src=\"http://cdn.ifanr.cn/wp-content/uploads/2013/11/Uber.jpg\" style=\"margin: 0px auto; padding: 0px; border: 0px solid rgb(204, 204, 204); display: block; max-width: 600px; height: auto; text-align: center;\" height=\"393\" width=\"628\" /></a></p><p style=\"margin: 0px 0px 20px; padding: 0px; line-height: 25.1875px; color: rgb(51, 51, 51); font-family: Arial, Helvetica, sans-serif; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);\">打车应用 Uber 希望能让更多人上路。</p><p style=\"margin: 0px 0px 20px; padding: 0px; line-height: 25.1875px; color: rgb(51, 51, 51); font-family: Arial, Helvetica, sans-serif; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);\">为了实现这个目标，他们与丰田和通用汽车<a href=\"http://www.theverge.com/2013/11/25/5143062/uber-aims-to-attract-new-drivers-with-toyota-and-gm-car-discounts\" style=\"margin: 0px; padding: 0px; text-decoration: none; outline: none; color: rgb(0, 82, 170);\">达成协议</a>，任何购买二者汽车的 Uber 用户都将享受一定的购车折扣。Uber CEO 特拉维斯·卡兰尼克（Travis Kalanick）在<span>&nbsp;</span><a href=\"http://techcrunch.com/2013/11/24/uber-driver-car-financing/\" style=\"margin: 0px; padding: 0px; text-decoration: none; outline: none; color: rgb(0, 82, 170);\">TechCrunch 采访</a>中说道，他们同时和数家贷款机构达成合作，将给购车的 Uber 用户带来更多优惠。</p><p style=\"margin: 0px 0px 20px; padding: 0px; line-height: 25.1875px; color: rgb(51, 51, 51); font-family: Arial, Helvetica, sans-serif; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);\">所有优惠都是为了促使更多人开车上路，最终目的是吸引更多人使用 Uber。</p><p style=\"margin: 0px 0px 20px; padding: 0px; line-height: 25.1875px; color: rgb(51, 51, 51); font-family: Arial, Helvetica, sans-serif; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);\"><span id=\"more-379132\" style=\"margin: 0px; padding: 0px;\"></span></p><p style=\"margin: 0px 0px 20px; padding: 0px; line-height: 25.1875px; color: rgb(51, 51, 51); font-family: Arial, Helvetica, sans-serif; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);\">随着服务向更多城市扩沿，Uber 的用户增速遭遇了汽车数量短板。现在他们试图降低购车成本来鼓励过去不具消费能力的 Uber 用户尝试购买一辆新车。</p><p style=\"margin: 0px 0px 20px; padding: 0px; line-height: 25.1875px; color: rgb(51, 51, 51); font-family: Arial, Helvetica, sans-serif; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);\">卡兰尼克说，本次与汽车制造商和借款人的合作只是公司推广计划的一部分。未来两年，Uber 网络下的汽车数量将<a href=\"http://blogs.wsj.com/digits/2013/11/25/uber-cuts-deals-to-lower-car-costs/\" style=\"margin: 0px; padding: 0px; text-decoration: none; outline: none; color: rgb(0, 82, 170);\">增加 20 万辆</a>——一个更宏伟的目标。</p><p style=\"margin: 0px 0px 20px; padding: 0px; line-height: 25.1875px; color: rgb(51, 51, 51); font-family: Arial, Helvetica, sans-serif; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);\">一个普通 Uber 用户每年将带来超过 10 万美元的销售总额，这笔收入也让他们成为风险极低的贷款人。尽管 Uber 没有公开借贷机构名单以及详细的合作事项，但根据卡兰尼克透露的消息，通过他们的合作项目，每名借款人每月可以节省 100 多美元购车开支。</p><p style=\"margin: 0px 0px 20px; padding: 0px; line-height: 25.1875px; color: rgb(51, 51, 51); font-family: Arial, Helvetica, sans-serif; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);\"><a href=\"http://cdn.ifanr.cn/wp-content/uploads/2013/11/uber-towncar-iphone-app.jpeg\" rel=\"lightbox[379132]\" style=\"margin: 0px; padding: 0px; text-decoration: none; outline: none; color: rgb(0, 82, 170);\"><img class=\" wp-image-379142 alignleft\" alt=\"uber-towncar-iphone-app\" src=\"http://cdn.ifanr.cn/wp-content/uploads/2013/11/uber-towncar-iphone-app.jpeg\" style=\"margin: 5px 8px 5px 0px; padding: 0px; border: 0px solid rgb(204, 204, 204); float: left; max-width: 600px; height: auto; display: inline; background-position: 0% 4px;\" height=\"262\" width=\"174\" /></a>加州司机亚历山大·桑德尔（Alexandre Sandor）就是其中的典型例子。桑德尔拥有三辆与 Uber 签约的汽车。他说一般情况下，卖家是绝不可能以 7 万美元的价格销售一款汽车。</p><p style=\"margin: 0px 0px 20px; padding: 0px; line-height: 25.1875px; color: rgb(51, 51, 51); font-family: Arial, Helvetica, sans-serif; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);\">现在，桑德尔打算再添置一辆黑色凯迪拉克 XTS。通过 Uber 提供的优惠，这辆车只要 6.8 万美元就能拿下。此外，桑德尔还将享受 7500 美元的退税和长达 48 个月的低息贷款。</p><p style=\"margin: 0px 0px 20px; padding: 0px; line-height: 25.1875px; color: rgb(51, 51, 51); font-family: Arial, Helvetica, sans-serif; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);\">眼下 Uber 正在为其它类似桑德尔的司机寻求更多服务，卡兰尼克把他们称为公司的“商业伙伴”。通过这次活动，Uber 试图拉开与同类竞争者 Lyft 和 Sidecar 的差距——它们也遭遇了司机短缺的发展瓶颈。</p><p style=\"margin: 0px 0px 20px; padding: 0px; line-height: 25.1875px; color: rgb(51, 51, 51); font-family: Arial, Helvetica, sans-serif; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);\">Uber 已经扩展到 60 多个城市，包括东欧城市<a href=\"http://thenextweb.com/eu/2013/11/21/uber-arrives-moscow-first-easter-european-city/\" style=\"margin: 0px; padding: 0px; text-decoration: none; outline: none; color: rgb(0, 82, 170);\">莫斯科</a>。尽管卡兰尼克坚持认为，他们在莫斯科还只是软着陆。但在更多类似莫斯科的城市，Uber 预计将获得超过 1 亿美元的总收入。</p><p style=\"margin: 0px 0px 20px; padding: 0px; line-height: 25.1875px; color: rgb(51, 51, 51); font-family: Arial, Helvetica, sans-serif; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);\">现在来看，打车应用鼻祖过得还不错。今年 8 月，他们从私募基金德州太平洋集团（TPG）和 Google 风投手上筹到<span>&nbsp;</span><a href=\"http://www.pehub.com/2013/08/uber-raises-new-round-of-about-360m/\" style=\"margin: 0px; padding: 0px; text-decoration: none; outline: none; color: rgb(0, 82, 170);\">3.6 亿美元</a><span>&nbsp;</span>C 轮融资，公司估值达到 35 亿美元；9 月，他们又挖到 Google 前任副总裁、财务主管和总会计师布伦特·卡里尼克斯（Brent Callinicos）来<a href=\"http://blog.uber.com/Callinicos_Michael_Baker\" style=\"margin: 0px; padding: 0px; text-decoration: none; outline: none; color: rgb(0, 82, 170);\">出任公司的 CFO</a>。</p><p style=\"margin: 0px 0px 20px; padding: 0px; line-height: 25.1875px; color: rgb(51, 51, 51); font-family: Arial, Helvetica, sans-serif; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);\">Uber 快速而敏捷的一系列动作让很多人误以为这是家刚成立几个月的初创公司，但事实上，Uber 已经成立 4 年了。</p><p style=\"margin: 0px 0px 20px; padding: 0px; line-height: 25.1875px; color: rgb(51, 51, 51); font-family: Arial, Helvetica, sans-serif; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);\">2009 年，加勒特·坎普（Garrett Camp）和特拉维斯·卡兰尼克共同开发了一款名为 UberCab 的应用，应用的最初目的是为了帮助坎普研究院的两名朋友。2010 年早期，卡兰尼克遇到了 Uber 的首名雇员瑞恩·格拉福斯（Ryan Graves）。同年 7 月，三个人宣布正式上线 Uber，格拉福斯在 8 月出任 Uber CEO ，随后又将<a href=\"http://techcrunch.com/2010/12/22/uber-ceo-super-pumped-about-being-replaced-by-founder/\" style=\"margin: 0px; padding: 0px; text-decoration: none; outline: none; color: rgb(0, 82, 170);\">职务转交</a>给卡兰尼克。卡兰尼克出任 Uber CEO 一直至今。<a href=\"http://cdn.ifanr.cn/wp-content/uploads/2013/11/travis_kalanick_uber.jpeg\" rel=\"lightbox[379132]\" style=\"margin: 0px; padding: 0px; text-decoration: none; outline: none; color: rgb(0, 82, 170);\"><img class=\"alignright\" alt=\"travis_kalanick_uber\" src=\"http://cdn.ifanr.cn/wp-content/uploads/2013/11/travis_kalanick_uber.jpeg\" style=\"margin: 5px 0px 5px 8px; padding: 0px; border: 0px solid rgb(204, 204, 204); float: right; max-width: 600px; height: auto; background-position: 100% 4px;\" height=\"240\" width=\"185\" /></a></p><p style=\"margin: 0px 0px 20px; padding: 0px; line-height: 25.1875px; color: rgb(51, 51, 51); font-family: Arial, Helvetica, sans-serif; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);\">Uber 在卡兰尼克带领下迎来快速发展。2010 年 11 月，他们<a href=\"http://www.theatlantic.com/technology/archive/2010/11/hailing-a-cab-with-your-phone/66630/\" style=\"margin: 0px; padding: 0px; text-decoration: none; outline: none; color: rgb(0, 82, 170);\">上线了</a>iOS 和 Android 版应用，将服务首次带到移动平台。其后不久，他们募集到来自硅谷多名天使投资人投资的<span>&nbsp;</span><a href=\"http://memeburn.com/2011/12/six-innovative-mobile-apps-to-keep-your-eye-on-leweb/\" style=\"margin: 0px; padding: 0px; text-decoration: none; outline: none; color: rgb(0, 82, 170);\">125 万美元种子资金</a>。2011 年 8 月，他们又拿到标杆资本（Benchmark Venture）领投的<a href=\"http://blog.launch.co/blog/exclusive-uber-ceo-lays-out-road-map-helicopters-motorcycles.html\" style=\"margin: 0px; padding: 0px; text-decoration: none; outline: none; color: rgb(0, 82, 170);\">1150 万美元</a><span>&nbsp;</span>A 轮融资，从此资金就一直没断过。</p><p style=\"margin: 0px 0px 20px; padding: 0px; line-height: 25.1875px; color: rgb(51, 51, 51); font-family: Arial, Helvetica, sans-serif; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);\">现在的问题是，他们不希望 Uber 仅仅局限于打车服务。今年年初，团队就<a href=\"http://blog.uber.com/2013/01/31/california-clears-uber-to-continue-and-expand-operations/\" style=\"margin: 0px; padding: 0px; text-decoration: none; outline: none; color: rgb(0, 82, 170);\">在博客中暗示</a>，未来将拓展非打车市场。卡拉尼克在采访时亦提到 Uber 的其它潜力，认为它能够为用户提供“介于生活方式和物流之间”的服务。</p><p style=\"margin: 0px 0px 20px; padding: 0px; line-height: 25.1875px; color: rgb(51, 51, 51); font-family: Arial, Helvetica, sans-serif; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);\">今年 10 月 29 日的国家猫咪节（National Cat Day）上，Uber 和 Cheezburger 合作推出“猫咪快递”服务，将为成功申请的用户寄送猫咪。人们只需支付 20 美元就可以获得与猫咪 15 分钟的相处以及一份 Ace of Cakes 纸杯蛋糕。活动收益将悉数捐给各地的动物保护所。</p><p style=\"margin: 0px 0px 20px; padding: 0px; line-height: 25.1875px; color: rgb(51, 51, 51); font-family: Arial, Helvetica, sans-serif; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);\">毫无疑问，活动受到了热捧。Twitter 上的 #iCanHasUberKittens 标签人气爆棚，很多人在收到“猫咪快递”后乐不可支地分享与猫咪的合影，《华尔街日报》主播西蒙·康斯特布尔（Simon Constable）和<span>&nbsp;</span><a href=\"https://twitter.com/ASPCA/status/395251735314186241/photo/1\" style=\"margin: 0px; padding: 0px; text-decoration: none; outline: none; color: rgb(0, 82, 170);\">Kickstarter 的员工</a>同样不能免俗。</p><p style=\"margin: 0px 0px 20px; padding: 0px; line-height: 25.1875px; color: rgb(51, 51, 51); font-family: Arial, Helvetica, sans-serif; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);\"><a href=\"http://cdn.ifanr.cn/wp-content/uploads/2013/11/BXv8jVkIUAAN_B8.jpg\" rel=\"lightbox[379132]\" style=\"margin: 0px; padding: 0px; text-decoration: none; outline: none; color: rgb(0, 82, 170);\"><img title=\"BXv8jVkIUAAN_B8\" alt=\"BXv8jVkIUAAN_B8\" src=\"http://cdn.ifanr.cn/wp-content/uploads/2013/11/BXv8jVkIUAAN_B8_thumb.jpg\" style=\"margin: 2px auto; padding: 0px; border: 0px; max-width: 600px; height: auto; background-image: none; display: block; float: none;\" border=\"0\" height=\"391\" width=\"600\" /></a></p><p style=\"margin: 0px 0px 20px; padding: 0px; line-height: 25.1875px; color: rgb(51, 51, 51); font-family: Arial, Helvetica, sans-serif; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);\"><a href=\"http://cdn.ifanr.cn/wp-content/uploads/2013/11/BXw3W_DCQAAuvDG.jpg\" rel=\"lightbox[379132]\" style=\"margin: 0px; padding: 0px; text-decoration: none; outline: none; color: rgb(0, 82, 170);\"><img title=\"BXw3W_DCQAAuvDG\" alt=\"BXw3W_DCQAAuvDG\" src=\"http://cdn.ifanr.cn/wp-content/uploads/2013/11/BXw3W_DCQAAuvDG_thumb.jpg\" style=\"margin: 2px auto; padding: 0px; border: 0px; max-width: 600px; height: auto; background-image: none; display: block; float: none;\" border=\"0\" height=\"424\" width=\"600\" /></a></p><p style=\"margin: 0px 0px 20px; padding: 0px; line-height: 25.1875px; color: rgb(51, 51, 51); font-family: Arial, Helvetica, sans-serif; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);\">“猫咪快递”服务让 Uber 的物流服务广为宣传，每个参与活动、在 Twiiter 分享心情和照片的人都在为 Uber 的传播贡献节点。事实上，很多人即便清楚这是 Uber 的一次推广活动，也无法激起对它的排斥，就好像无法排斥可爱的猫咪一样。</p><p style=\"margin: 0px 0px 20px; padding: 0px; line-height: 25.1875px; color: rgb(51, 51, 51); font-family: Arial, Helvetica, sans-serif; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);\">投资人也不吝惜对 Uber 的赞美。“硅谷金童”马克·安德森（Marc Andreessen）在很早之前就曾表示，他很乐意投资&nbsp; Uber。2011 年接受<span>&nbsp;</span><a href=\"http://news.cnet.com/8301-1023_3-57345138-93/marc-andreessen-predictions-for-2012-and-beyond/\" style=\"margin: 0px; padding: 0px; text-decoration: none; outline: none; color: rgb(0, 82, 170);\">CNET 采访时</a>，安德森对 Uber 大加褒扬。他说，“Uber 是一款能够吞并出租车的应用……它拥有杀手级的用户体验，你只要盯着手机地图上的汽车，它就能会为你开路。”</p>', '9', '1', '2013-11-26 18:11:34', '2013-11-26 18:11:34', '610', '0', '0', '1', null, null, null);
INSERT INTO `tech_blog_article` VALUES ('3', '分享一个强制关闭页面函数', '<p><font face=\"Microsoft YaHei\" size=\"3\">在WEB前端开发中，有时候需要强制关闭当前页面，<font size=\"3\">可以通过js来<font size=\"3\">实现，但不同浏览器<font size=\"3\">的<span style=\"font-size:16px;\">具体实现有所<span style=\"font-size:16px;\">差异<span style=\"font-size:16px;\">。</span></span></span></font></font></font></font></p><p><font face=\"Microsoft YaHei\" size=\"3\"><font size=\"3\"><font size=\"3\"><font size=\"3\"><font size=\"3\"><font size=\"3\"><font size=\"3\"><font size=\"3\">这里<font size=\"3\">博主分享一个<span style=\"font-size:16px;\">适应多个<span style=\"font-size:16px;\">主流浏览器的关闭页面<span style=\"font-size:16px;\">函数。</span></span></span></font></font></font></font></font></font></font></font></font></p><p><br /></p><p><font face=\"Microsoft YaHei\" size=\"3\"><font size=\"3\"><font size=\"3\"><font size=\"3\"><font size=\"3\"><font size=\"3\"><font size=\"3\"><font size=\"3\"><font size=\"3\"><span style=\"font-size:16px;\"><span style=\"font-size:16px;\"><span style=\"font-size:16px;\"></span></span></span></font></font></font></font></font></font></font></font></font><pre class=\"brush: js;\">/**\n * Close current page\n */\nfunction close_page() {\n if (navigator.userAgent.indexOf(&quot;MSIE&quot;) &gt; 0) {\n  if (navigator.userAgent.indexOf(&quot;MSIE 6.0&quot;) &gt; 0) {\n   window.opener = null;\n   window.close();\n  } else {\n   window.open(&quot;&quot;, &quot;_top&quot;);\n   window.top.close();\n  }\n } else {\n  if (navigator.userAgent.indexOf(&quot;Firefox&quot;) &gt; 0) {\n   window.location.href = &quot;about:blank &quot;;\n                //window.history.go(-2);\n  } else {\n   window.opener = null;\n   window.open(&quot;&quot;, &quot;_self&quot;, &quot;&quot;);\n   window.close();\n  }\n }\n}</pre><br /></p>', '2', '1', '2013-11-27 15:50:37', '2013-11-27 15:50:37', '2031', '2', '1', '1', null, null, null);
INSERT INTO `tech_blog_article` VALUES ('4', '修改Tomcat的默认根目录', '<p><span style=\"font-family:Microsoft YaHei;font-size:16px;\">在tomcat服务器上发布J2EE应用后，一般我们通过http://localhost:8080/&lt;AppName&gt;来访问。</span></p><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\">这种访问方式有个麻烦的地方就是，在应用中我们就不能使用类似&quot;/js/jquery.js&quot;来访问应用中的资源，得用相对路径或使用以下java代码获取应用的绝对路径，</span></p><p></p><pre class=\"brush: js;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">String path = request.getContextPath();\n	String basePath = request.getScheme() + &quot;://&quot;\n			+ request.getServerName() + &quot;:&quot; + request.getServerPort()\n			+ path + &quot;/&quot;;</span></pre><p></p><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\">这时候可以考虑将tomcat的默认访问目录设置为当前应用目录，有两种方式：</span></p><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\">1、打开$TOMCAT_HOME/config/server.xml文件，找到<span style=\"color:#000000;font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; display: inline !important; float: none;\">&lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&gt;标签</span>，在&lt;Host&gt;标签下添加：</span></p><p></p><div><span style=\"font-family:Microsoft YaHei;font-size:16px;color:#000000;font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; display: inline !important; float: none;\">&lt;Context docBase=&quot;D:\\Development\\TechBlogSpace\\TechBlog\\WebRoot&quot; path=&quot;&quot; reloadable=&quot;true&quot;&gt;&lt;/Context&gt;</span></div><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><br /></span><p></p><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\">2、在$TOMCAT_HOME/conf/Catalina/localhost文件夹下部署应用，例如现在要部署TechBlog项目，在该文件夹下创建TechBlog.xml，内容如下，</span></p><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\">&lt;?xml version=\'1.0\' encoding=\'utf-8\'?&gt;<br />&lt;Context docBase=&quot;D:\\Development\\TechBlogSpace\\TechBlog\\WebRoot&quot; path=&quot;&quot;&gt;<br />&lt;/Context&gt;<br /></span></p><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><br /></span></p><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><strong>以上的path属性为应用的访问路径，设置为空表示不使用应用名访问，即设置为tomcat的默认访问目录<span style=\"font-size:16px;\">。</span></strong></span></p><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><span style=\"font-size:16px;\"><span style=\"font-size:16px;\">重启<span style=\"font-size:16px;\">服务器后就可以<span style=\"font-size:16px;\">用<span style=\"font-family:Microsoft YaHei;font-size:16px;\">http://localhost:8080</span>直接访问了。</span></span></span></span><strong><span style=\"font-size:16px;\"><span style=\"font-size:16px;\"><span style=\"font-size:16px;\"><span style=\"font-size:16px;\"></span></span></span><br /></span></strong></span></p>', '1', '1', '2013-11-27 16:33:25', '2013-11-27 16:33:25', '1259', '4', '0', '1', null, null, null);
INSERT INTO `tech_blog_article` VALUES ('5', 'JavaScript 跨域总结与解决办法', '<h3>什么是跨域</h3><p>JavaScript出于安全方面的考虑，不允许跨域调用其他页面的对象。但在安全限制的同时也给注入iframe或是ajax应用上带来了不少麻烦。这里把涉及到跨域的一些问题简单地整理一下：</p><p>首先什么是跨域，简单地理解就是因为JavaScript同源策略的限制，a.com 域名下的js无法操作b.com或是c.a.com域名下的对象。更详细的说明可以看下表：</p><table><tbody><tr><th>URL</th><th>说明</th><th>是否允许通信</th></tr><tr><td>http://www.a.com/a.js<p>http://www.a.com/b.js</p></td><td>同一域名下</td><td>允许</td></tr><tr><td>http://www.a.com/lab/a.js<p>http://www.a.com/script/b.js</p></td><td>同一域名下不同文件夹</td><td>允许</td></tr><tr><td>http://www.a.com:8000/a.js<p>http://www.a.com/b.js</p></td><td>同一域名，不同端口</td><td>不允许</td></tr><tr><td>http://www.a.com/a.js<p>https://www.a.com/b.js</p></td><td>同一域名，不同协议</td><td>不允许</td></tr><tr><td>http://www.a.com/a.js<p>http://70.32.92.74/b.js</p></td><td>域名和域名对应ip</td><td>不允许</td></tr><tr><td>http://www.a.com/a.js<p>http://script.a.com/b.js</p></td><td>主域相同，子域不同</td><td>不允许</td></tr><tr><td>http://www.a.com/a.js<p>http://a.com/b.js</p></td><td>同一域名，不同二级域名（同上）</td><td>不允许（cookie这种情况下也不允许访问）</td></tr><tr><td>http://www.cnblogs.com/a.js<p>http://www.a.com/b.js</p></td><td>不同域名</td><td>不允许</td></tr></tbody></table><dl><dt>特别注意两点：</dt><dd>第一，如果是协议和端口造成的跨域问题“前台”是无能为力的，</dd><dd>第二：在跨域问题上，域仅仅是通过“URL的首部”来识别而不会去尝试判断相同的ip地址对应着两个域或两个域是否在同一个ip上。<br />“URL的首部”指window.location.protocol +window.location.host，也可以理解为“Domains, protocols and ports must match”。</dd></dl><p>接下来简单地总结一下在“前台”一般处理跨域的办法，后台proxy这种方案牵涉到后台配置，这里就不阐述了，有兴趣的可以看看yahoo的这篇文章：《<a href=\"http://developer.yahoo.com/javascript/howto-proxy.html\" target=\"_blank\">JavaScript: Use a Web Proxy for Cross-Domain XMLHttpRequest Calls</a>》</p><p><a href=\"http://www.cnblogs.com/rainman/archive/2011/02/20/1959325.html#\" name=\"m1\"></a></p><h3>1、document.domain+iframe的设置</h3><p>对于主域相同而子域不同的例子，可以通过设置document.domain的办法来解决。 具体的做法是可以在http://www.a.com/a.html和http://script.a.com/b.html两个文件中分别加上 document.domain = ‘a.com’；然后通过a.html文件中创建一个iframe，去控制iframe的contentDocument，这样两个js文件之间就可以 “交互”了。当然这种办法只能解决主域相同而二级域名不同的情况，如果你异想天开的把script.a.com的domian设为alibaba.com 那显然是会报错地！代码如下：</p><p>www.a.com上的a.html</p><div><div id=\"highlighter_277140\" class=\"syntaxhighlighter notranslate html ie\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td class=\"code\">&nbsp;</td></tr></tbody></table></div></div><p></p><pre class=\"brush: js;\">document.domain = \'a.com\';\nvar ifr = document.createElement(\'iframe\');\nifr.src = \'http://script.a.com/b.html\';\nifr.style.display = \'none\';\ndocument.body.appendChild(ifr);\nifr.onload = function(){\n    var doc = ifr.contentDocument || ifr.contentWindow.document;\n    // 在这里操纵b.html\n    alert(doc.getElementsByTagName(&quot;h1&quot;)[0].childNodes[0].nodeValue);\n};</pre><p></p><p>script.a.com上的b.html</p><div><div id=\"highlighter_244065\" class=\"syntaxhighlighter notranslate html ie\"><br /></div></div><p></p><pre class=\"brush: js;\">document.domain = \'a.com\';</pre><br /><p></p><p>这种方式适用于{www.kuqin.com, kuqin.com, script.kuqin.com, css.kuqin.com}中的任何页面相互通信。</p><p>备注：某一页面的domain默认等于window.location.hostname。主域名是不带www的域名，例如a.com，主域名前面带前缀的通常都为二级域名或多级域名，例如www.a.com其实是二级域名。 domain只能设置为主域名，不可以在b.a.com中将domain设置为c.a.com。</p><dl><dt>问题：</dt><dd>1、安全性，当一个站点（b.a.com）被攻击后，另一个站点（c.a.com）会引起安全漏洞。</dd><dd>2、如果一个页面中引入多个iframe，要想能够操作所有iframe，必须都得设置相同domain。</dd></dl><p><a href=\"http://www.cnblogs.com/rainman/archive/2011/02/20/1959325.html#\" name=\"m2\"></a></p><h3>2、动态创建script</h3><p>虽然浏览器默认禁止了跨域访问，但并不禁止在页面中引用其他域的JS文件，并可以自由执行引入的JS文件中的function（包括操作cookie、Dom等等）。根据这一点，可以方便地通过创建script节点的方法来实现完全跨域的通信。具体的做法可以参考YUI的<a href=\"http://developer.yahoo.com/yui/get/\" target=\"_blank\">Get Utility</a></p><p>这里判断script节点加载完毕还是蛮有意思的：ie只能通过script的readystatechange属性，其它浏览器是script的load事件。以下是部分判断script加载完毕的方法。</p><div><div id=\"highlighter_130350\" class=\"syntaxhighlighter notranslate html ie\"><br /></div></div><p></p><pre class=\"brush: js;\">js.onload = js.onreadystatechange = function() {\n    if (!this.readyState || this.readyState === \'loaded\' || this.readyState === \'complete\') {\n        // callback在此处执行\n        js.onload = js.onreadystatechange = null;\n    }\n};</pre><p></p><h3>3、利用iframe和location.hash</h3><p>这个办法比较绕，但是可以解决完全跨域情况下的脚步置换问题。原理是利用location.hash来进行传值。在url： http://a.com#helloword中的‘#helloworld’就是location.hash，改变hash并不会导致页面刷新，所以可 以利用hash值来进行数据传递，当然数据容量是有限的。假设域名a.com下的文件cs1.html要和cnblogs.com域名下的 cs2.html传递信息，cs1.html首先创建自动创建一个隐藏的iframe，iframe的src指向cnblogs.com域名下的 cs2.html页面，这时的hash值可以做参数传递用。cs2.html响应请求后再将通过修改cs1.html的hash值来传递数据（由于两个页面不在同一个域下IE、Chrome不允许修改parent.location.hash的值，所以要借助于a.com域名下的一个代理iframe；Firefox可以修改）。同时在cs1.html上加一个定时器，隔一段时间来判断location.hash的值有没有变化，一点有变化则获取获取hash值。代码如下：</p><p>先是a.com下的文件cs1.html文件：</p><div><div id=\"highlighter_110434\" class=\"syntaxhighlighter notranslate html ie\"><br /></div></div><p></p><pre class=\"brush: js;\">function startRequest(){\n    var ifr = document.createElement(\'iframe\');\n    ifr.style.display = \'none\';\n    ifr.src = \'http://www.cnblogs.com/lab/cscript/cs2.html#paramdo\';\n    document.body.appendChild(ifr);\n}\n  \nfunction checkHash() {\n    try {\n        var data = location.hash ? location.hash.substring(1) : \'\';\n        if (console.log) {\n            console.log(\'Now the data is \'+data);\n        }\n    } catch(e) {};\n}\nsetInterval(checkHash, 2000);</pre><p></p><p>cnblogs.com域名下的cs2.html:</p><div><div id=\"highlighter_723822\" class=\"syntaxhighlighter notranslate html ie\"><br /></div></div><p></p><pre class=\"brush: js;\">//模拟一个简单的参数处理操作\nswitch(location.hash){\n    case \'#paramdo\':\n        callBack();\n        break;\n    case \'#paramset\':\n        //do something……\n        break;\n}\n  \nfunction callBack(){\n    try {\n        parent.location.hash = \'somedata\';\n    } catch (e) {\n        // ie、chrome的安全机制无法修改parent.location.hash，\n        // 所以要利用一个中间的cnblogs域下的代理iframe\n        var ifrproxy = document.createElement(\'iframe\');\n        ifrproxy.style.display = \'none\';\n        ifrproxy.src = \'http://a.com/test/cscript/cs3.html#somedata\';    // 注意该文件在&quot;a.com&quot;域下\n        document.body.appendChild(ifrproxy);\n    }\n}</pre><p></p><p>a.com下的域名cs3.html</p><div><div id=\"highlighter_716991\" class=\"syntaxhighlighter notranslate html ie\"><br /></div></div><p></p><pre class=\"brush: js;\">//因为parent.parent和自身属于同一个域，所以可以改变其location.hash的值\nparent.parent.location.hash = self.location.hash.substring(1);</pre><p></p><p>当然这样做也存在很多缺点，诸如数据直接暴露在了url中，数据容量和类型都有限等……</p><p><a href=\"http://www.cnblogs.com/rainman/archive/2011/02/20/1959325.html#\" name=\"m4\"></a></p><h3>4、window.name实现的跨域数据传输</h3><p>文章较长列在此处不便于阅读，详细请看&nbsp;<a href=\"http://www.cnblogs.com/rainman/archive/2011/02/21/1960044.html\" target=\"_blank\">window.name实现的跨域数据传输</a>。</p><p><a href=\"http://www.cnblogs.com/rainman/archive/2011/02/20/1959325.html#\" name=\"m5\"></a></p><h3>5、使用HTML5 postMessage</h3><p><a href=\"http://dev.w3.org/html5/spec/\" target=\"_blank\">HTML5</a>中最酷的新功能之一就是 <a href=\"http://www.whatwg.org/specs/web-apps/current-work/#crossDocumentMessages\" target=\"_blank\">跨文档消息传输Cross Document Messaging</a>。 下一代浏览器都将支持这个功能：Chrome 2.0+、Internet Explorer 8.0+, Firefox 3.0+, Opera 9.6+, 和 Safari 4.0+ 。 Facebook已经使用了这个功能，用postMessage支持基于web的实时消息传递。</p><dl><dt>otherWindow.postMessage(message, targetOrigin);</dt><dd>otherWindow: 对接收信息页面的window的引用。可以是页面中iframe的contentWindow属性；<a href=\"https://developer.mozilla.org/en/DOM/window.open\" target=\"_blank\">window.open</a>的返回值；通过name或下标从<a href=\"https://developer.mozilla.org/en/DOM/window.frames\" target=\"_blank\">window.frames</a>取到的值。<br />message: 所要发送的数据，string类型。<br />targetOrigin: 用于限制otherWindow，“*”表示不作限制</dd></dl><p>a.com/index.html中的代码：</p><div><div id=\"highlighter_453066\" class=\"syntaxhighlighter notranslate html ie\"><br /></div></div><p></p><pre class=\"brush: js;\">&lt;iframe id=&quot;ifr&quot; src=&quot;b.com/index.html&quot;&gt;&lt;/iframe&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\nwindow.onload = function() {\n    var ifr = document.getElementById(\'ifr\');\n    var targetOrigin = \'http://b.com\';  // 若写成\'http://b.com/c/proxy.html\'效果一样\n                                        // 若写成\'http://c.com\'就不会执行postMessage了\n    ifr.contentWindow.postMessage(\'I was there!\', targetOrigin);\n};\n&lt;/script&gt;</pre><br /><p></p><p>b.com/index.html中的代码：</p><div><div id=\"highlighter_796598\" class=\"syntaxhighlighter notranslate html ie\"><br /></div></div><p>&nbsp;</p><pre class=\"brush: js;\">&lt;script type=&quot;text/javascript&quot;&gt;\n    window.addEventListener(\'message\', function(event){\n        // 通过origin属性判断消息来源地址\n        if (event.origin == \'http://a.com\') {\n            alert(event.data);    // 弹出&quot;I was there!&quot;\n            alert(event.source);  // 对a.com、index.html中window对象的引用\n                                  // 但由于同源策略，这里event.source不可以访问window对象\n        }\n    }, false);\n&lt;/script&gt;</pre><p></p>', '2', '1', '2013-12-18 11:31:30', '2014-01-01 15:15:28', '996', '1', '1', '1', null, null, null);
INSERT INTO `tech_blog_article` VALUES ('6', 'Web攻击-XSS与CSRF的简单介绍', '<p><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><strong>一、XSS攻击</strong></span></p><div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">1、What is XSS</span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-family:Microsoft YaHei;\"></span>&nbsp;</div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-family:Microsoft YaHei;\">XSS(cross site scripting)跨站脚本攻击。简单来说，就是攻击者通过在web页面中注入恶意脚本，当其他用户访问该页面时，这些脚本就会被执行，从而达到攻击的目的。攻击者通常通过xss攻击盗取用户的Cookies或植入病毒；</span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><br clear=\"none\" /><span style=\"font-family:Microsoft YaHei;font-size:16px;\"></span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">2、XSS攻击有三类：</span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-family:Microsoft YaHei;\"></span>&nbsp;</div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">（1）持久性XSS攻击（存储型）</span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">攻击者通过在某系统提交一些恶意脚本，这些脚本被保存到系统的数据库，当其他用户访问到这些内容时，恶意脚本就会被执行，从而达到攻击的目的。由于这些脚本是持久化存在数据库中，所以称为持久性XSS攻击。例如，攻击者在填写个人资料页面中提交了恶意的脚本，这些脚本被保存到系统的数据库，当其他用户访问攻击者的个人资料时，系统将数据库中的恶意脚本显示页面上自动执行，就会对访问的用户造成危害；</span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-family:Microsoft YaHei;\"></span>&nbsp;</div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">（2）非持久性XSS攻击（反射型）</span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">攻击者通过把恶意脚本经过编码处理后作为参数添加到url中，当其他用户访问该链接时，恶意脚本就会被执行，从而达到攻击的目的。由于这种攻击是用户点击恶意链接后脚本立即被执行，所以称为非持久型或反射型；</span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-family:Microsoft YaHei;\"></span>&nbsp;</div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">（3）DOM XSS攻击</span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">这种攻击是由于网站本身的脚本处理逻辑导致的漏洞引起的。例如有些网站会利用document.url获取当前链接，再提取参数后，通过document.write输出在页面上，如果此时参数中包含恶意脚本，访问的用户将会收到攻击。</span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><br clear=\"none\" /><span style=\"font-family:Microsoft YaHei;font-size:16px;\"></span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">3、同源策略</span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-family:Microsoft YaHei;\"></span>&nbsp;</div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">同源策略是Netscape（网景）公司提出的一个web安全策略，即一个站点的脚本只能访问与其“同源”的资源，包括请求相应包或Cookies，所谓同源是指同协议、同域名、同端口。在同源策略提出之前，一个站点的脚本可以跨域去访问另一个站点的资源，这就会造成很大的危害。例如，一个恶意站点，通过iframe标签引入一个合法的银行登录页面，用户在该页面输入登录信息后，恶意站点就可以通过脚本获取到银行系统的Cookies，从而盗取用户的信息。</span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-size:16px;\"></span><span style=\"font-family:Microsoft YaHei;\">&nbsp;</span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><strong>二、CSRF攻击</strong></span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><strong><span style=\"font-family:Microsoft YaHei;\"></span></strong>&nbsp;</div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">1、What is CSRF</span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-family:Microsoft YaHei;\"></span>&nbsp;</div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">CSRF（cross site request forgery）跨站请求伪造，简单来说就是攻击者伪造合法身份发送恶意请求。例如，合法账户A登录了站点W，W就在A的浏览器中产生了Cookies，此时如果攻击者B发送了一个恶意网页给A，A不小心点击后，恶意网页自动向站点W发送请求，此时这个请求带有A的合法Cookies，站点W认为这个请求是合法的，但请求的内容确是攻击者B可以恶意构造的，这时候便形成了攻击。</span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><br clear=\"none\" /><span style=\"font-family:Microsoft YaHei;font-size:16px;\"></span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">2、攻击实例</span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-family:Microsoft YaHei;\"></span>&nbsp;</div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">假设某银行的转账请求的url是http://www.xxbc.com/toAccount=xx&amp;money=xx，参数toAccount表示要转账的账户，money表示转账金额。</span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">某用户A登录了该银行的站点，而此时攻击者B发送了一个网页链接给A，该网页的内容是一段Javascript脚本，如下：</span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-size:16px;\"></span><pre class=\"brush: js;\"><span style=\"font-family:Microsoft YaHei;\">&lt;script type=&quot;text/javascript&quot;&gt;\n    window.onload=function(){\n         location.href=\'http://www.xxbc.com/toAccount=攻击者B的Id&amp;money=1000\';\n     }\n&lt;/script&gt;\n</span></pre></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-size:16px;\"></span><span style=\"font-family:Microsoft YaHei;\">&nbsp;</span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">这时候，用户A不小心点击了该链接，该网页就会带着A的Cookies向银行系统发送请求，银行系统收到请求后，由于Cookies是合法的，便执行了转账操作，将A账户上的1000元转账给了攻击者B，攻击者成功实现了CSRF攻击。</span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><br clear=\"none\" /><span style=\"font-family:Microsoft YaHei;font-size:16px;\"></span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">3、防御策略</span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-family:Microsoft YaHei;\"></span>&nbsp;</div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">CSRF的具体防御方式很多，但总的思想是一致的，就是在客户端和表单中都加入token值，然后在服务器端进行验证。</span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><br clear=\"none\" /><span style=\"font-family:Microsoft YaHei;font-size:16px;\"></span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">一般步骤如下：</span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-family:Microsoft YaHei;\"></span>&nbsp;</div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">1、编写生成token的后台程序，将生成的token值存入客户端cookies；</span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-family:Microsoft YaHei;\"></span>&nbsp;</div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">2、在表单中添加hidden隐藏域，值为同一个token值；</span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-family:Microsoft YaHei;\"></span>&nbsp;</div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">3、表单提交后，在服务器段验证客户端cookies保存的token值与表单提交的token值是否一致，只有一致的情况下才执行相应的操作。</span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-family:Microsoft YaHei;\"></span>&nbsp;</div></div></div></div>', '2', '1', '2013-12-25 17:58:00', '2014-01-14 18:03:40', '948', '0', '1', '1', null, null, null);
INSERT INTO `tech_blog_article` VALUES ('7', '2014年谷歌将给世界带来什么？', '<span style=\"color: rgb(51, 51, 51); font-family: Arial, sans-serif; font-size: 14px; line-height: 21px;\">原文出处：&nbsp;</span><a ref=\"nofollow\" target=\"_blank\" href=\"http://www.time.com/\" style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px; text-decoration: none; color: rgb(0, 153, 204); font-family: Arial, sans-serif; line-height: 21px;\">时代周刊</a><span style=\"color: rgb(51, 51, 51); font-family: Arial, sans-serif; font-size: 14px; line-height: 21px;\">&nbsp;&nbsp;&nbsp;译文出处：&nbsp;</span><a ref=\"nofollow\" target=\"_blank\" href=\"http://tech.qq.com/a/20131230/000873.htm\" style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px; text-decoration: none; color: rgb(0, 153, 204); font-family: Arial, sans-serif; line-height: 21px;\">腾讯科技</a><br style=\"color: rgb(51, 51, 51); font-family: Arial, sans-serif; font-size: 14px; line-height: 21px;\" /><br style=\"color: rgb(51, 51, 51); font-family: Arial, sans-serif; font-size: 14px; line-height: 21px;\" /><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\"><a href=\"http://jbcdn2.b0.upaiyun.com/2013/12/2014nggjgsjdlsm.jpg\" rel=\"lightbox[54559]\" title=\"2014年谷歌将给世界带来什么？\" class=\"cboxElement\" style=\"border: 0px; margin: 0px; padding: 0px; text-decoration: none; color: rgb(0, 153, 204);\"><img class=\"aligncenter size-full wp-image-54560\" alt=\"2014nggjgsjdlsm\" src=\"http://jbcdn2.b0.upaiyun.com/2013/12/2014nggjgsjdlsm.jpg\" style=\"border: 0px; margin: 0px; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; text-align: center; max-width: 100%; height: auto;\" /></a></p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">谷歌创始人拉里-佩奇（Larry Page）和谢尔盖-布林（Sergey Brin）首次登载于美国《时代》杂志上的故事是笔者负责采写的，当时这两位年仅 27 岁的创始人就开始谈论该公司的宏伟使命：组织全世界的信息。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">那时正是世纪之交，他们刚刚搬进一个花园式的办公园区，他们走在街上可能也无人认得出。后来在 2000 年的 Burning Man 艺术节上，笔者再次与他们相遇。他们浑身涂着颜料，隐姓埋名地出现在《时代》杂志的旅行房车上，很惬意地喝着咖啡，令人尴尬的是，我花了十分钟才认出他们。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">组织全世界的信息？必须承认，这些大智若愚的大孩子们是算法方面的天才，但是相对于当时最受欢迎的搜索引擎雅虎来说，他们不过是翻不起大浪的小鱼儿。谷歌没有营收，只有别人都已证明失败的商业模式：互联网广告。佩奇和布林花费了很多时间用乐高积木来搭建打印机、入侵屏幕保护程序以及享受按摩。我非常崇拜他们——他们具有我这个年龄的技术怪才所特有的奇特魅力。但是，雅虎是一个噩梦般的竞争对手。你们想征服信息本身吗？是的。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">随着我们逐渐迈进 2014 年，这个使命的问题现在不是它太宏大了，而是它变成了多余的。它甚至都没有包括谷歌正在做的事情，更不用说该公司计划做的事情了。无人驾驶汽车、语音激活的智能手机，这些新事物在谷歌已变成了司空见惯的东西。最异乎寻常的事情是，谷歌推出了旨在延迟人类寿命的 Calico 项目，它还在研制人工智能，它新收购的部门甚至研制出了比任何健在的人都跑得快的机器人。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">组织全世界的信息？这项任务大体已完成，只有一小部分信息是空缺的（谷歌图书中缺失的页面，谷歌地图中的小盲点以及某些拒不合作的社交网络）。组织全世界的广告？出色完成了任务。组织全世界？对于一家已控制大多数智能手机、电子邮件、浏览器和可佩戴式电脑的公司来说，这个目标太渺小了。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">组织和拓展方方面面的生活，包括创建新的生活方式？现在你说到了点子上。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">佩奇现在已完全不同于 27 岁的时候了。他现在是一位果断的、有决心的 CEO。他具有乔布斯式的激情。布林同样也有乔布斯的范儿，总有很多金点子，他负责的 Google X 实验室研究的东西包罗万象，包括从登陆月球到太空升降机，无不令你拍手称奇。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">佩奇和布林现在已将近 40 岁。由于埃里克-施密特（Eric Schmidt）一心一意地担任着该公司的外交大使，这两位创始人现在没有人跟他们抢夺绝对控制权，也没有人给他们提出时间上的要求。他们还有 30 年、40 年或更长的时间（这取决于他们的 Calico 项目延缓衰老和死亡的程度）来担任领导，开展各种新奇的研究。只要想一想他们在退休前可能会带领谷歌做的惊人的事情，你可能就会激动地战栗不已。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\"><span style=\"border: 0px; margin: 0px; padding: 0px;\">谷歌电视（和 Chrome 操作系统）</span></p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">谷歌会在 2014 年初准备什么呢？带有 Kinect 体感外设的 Nexus 机顶盒。这种设备将会取代命运多桀的谷歌电视。它可能具有的功能包括触摸式的遥控器、语音激活的频道搜索功能、手势控制屏幕的功能以及随时与谷歌 Hangouts 上的人召开视频会议的功能。如果所有这一切实现，那么那些需要通过传统按键式遥控器控制的苹果电视、Roku 和其他机顶盒就需要小心了。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">但是，谷歌并不满足于仅在电视行业推出一款设备。在低端市场上，它已推出了 Chromecast 电视棒，这款设备售价仅为 35 美元，可即插即用，非常受欢迎。它可以插在电视 HDMI 接口上，将智能手机或平板电脑或笔记本电脑上播放的 Youtube 视频推送到电视上。Chromecast 现在仅在美国销售，而且迄今为止，仅有为数不多的几款应用程序。在 2014 年，它将会面向国际市场发售，开发者将能够首次把 Chromecast 添加到他们的应用程序中。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">说到明年可能会引起用户兴趣的产品，非谷歌 Chromebook 莫属。据台湾《电子时报》研究中心预测，在 2014 年，这款轻量级的“完全在线”的笔记本电脑将会售出 800 万台。三星的 Chromebook 已是亚马逊网站上最畅销的产品；惠普推出了两款 Chromebook；戴尔将在明年初针对教育市场销售它的首款 Chromebook，售价为 300 美元。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">Chromebook 销量不佳的唯一公司是谷歌自己。Chromebook Pixel 是一款漂亮的高清触摸屏笔记本电脑，但是它的售价为 1299 美元，这对于网络笔记本来说太过于高端。但是，如果 Chrome 操作系统继续在 PC 电脑行业获得人气，那么谷歌仍然有可能会赢回市场份额。它的预期 800 万台的销量将会让谷歌占据全球 PC 电脑市场5% 的份额。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\"><span style=\"border: 0px; margin: 0px; padding: 0px;\">智能手机和搜索业务</span></p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">接下来说说 Android——全世界使用最广泛的智能手机操作系统。由于谷歌推出 Android 4.4 的速度很快——在 5 月发布预告，在 9 月宣布名称 KitKat，在 10 月正式发布——因此，我们相信该公司也很快会发布 4.5。迄今为止，我们对新的操作系统知之不多，只知道它的名称将会以字母L开头，是某种点心的名称（Android Lemon Meringue Pie 或 Android Lollipop 还是其他？）</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">谷歌投入了很多资源来改善 Android 的语音搜索。谷歌推介 KitKat 的文稿中用很多笔墨描述了该公司在语音识别技术上所做的改进，它宣称 KitKat 的语音识别技术要比上一代精确 20%。它已比苹果语音助手 Siri 更智能、反应更灵敏。在新的 Android 操作系统中，语音搜索可能成为人们购买 Android 手机的首要原因。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">渐渐地，移动操作系统已掌握了话语权，这种情况不仅仅发生在谷歌。就谷歌而言，这可能是因为人们从 Android 体验（尤其是智能语音搜索服务 Google Now）中得到的教训已开始影响王冠上的珠宝：搜索本身了。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\"><span style=\"border: 0px; margin: 0px; padding: 0px;\">谷歌眼镜成为主流</span></p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">两年来，谷歌眼镜仅提供给“探索者”——谷歌对于开发者和其他早期使用者的称呼，这些人能够巧妙地弄到谷歌的邀请函，并愿意为此设备支付 1500 美元的价格。在 2014 年，谷歌眼镜应该能够进入消费者市场了。至于它的定价是多少，我们尚不得而知。但是，早在 2012 年，布林就说过，消费者版谷歌眼镜的价格应该要比探索者版的价格“低很多”。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">由此，我们产生了三个疑问。如果这些“探索者”发现他们支付如此高的价格，仅仅比普通消费者提前享用了几个月，他们是否会有上当的感觉？更重要的是，多低的价格才能够吸引到足够多的消费者呢？第三，多少消费者才算多呢？</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">谷歌停泊在旧金山、波特兰和缅因的神秘驳船，最终证明是浮动式的 Google X 产品展示区，只有接到谷歌邀请函的人才能够登船观看。谷歌现在推出这种浮动式展示区的原因很可能是为了销售谷歌眼镜。这表明，谷歌倾向于使用它以前曾用过的两种战略：首先定位于高端市场，然后通过限制使用来创造产品的独占性。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">反过来，这一切表明我们不可能看到谷歌眼镜以远低于 1000 美元的价格进入市场——这种低价足以吸引更多的早期使用者以及勾起其他人的占有欲。谷歌眼镜到底会以怎样的价格推向市场呢，消费者会做出怎样的反应呢？让我们拭目以待吧。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">但是，在 2014 年，我们应该能够看到结果。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\"><span style=\"border: 0px; margin: 0px; padding: 0px;\">其他一切产品</span></p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">谷歌无人驾驶汽车目前尚处于观望阶段。它正在慢慢搜集证据，以证明自己比人类驾驶的普通汽车更安全。谷歌正在耐心等待合适的管制环境出现——这可能需要改变限速法律。（施密特曾表示，无人驾驶汽车使用的最大障碍是它们总是按照速度限制的上线奔跑，这是人类司机几乎从来不做的事情。）</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">2014 年可能不是无人驾驶汽车腾飞的一年，尽管你可能会看到更多的无人驾驶汽车奔跑在允许它上路的加利福尼亚州和内华达州。而且，2014 年也不可能是谷歌 Calico 项目、太空升降机和其他项目大功告成的一年。有一点必须明确，谷歌天生适合马拉松比赛，而不是短跑冲刺。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">我们的期望是，谷歌将会在新的一年从背后拿出让我们惊喜的东西来。谷歌的神秘驳船已让我们惊讶了一把。据悉，该公司正在研制类似 Oculus Rift 的虚拟现实头戴式设备。（它还把微软顶级增强现实工程师布莱斯-亚科斯（Blaise Agüera y Arcas）挖了过来。）以类似 Oculus Rift 的低价格推出这样的设备，将会给谷歌眼镜增加不少光辉。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">尽管做亿万富翁和应对国家政治和 NSA 入侵会有不少负面的影响，但是佩奇和布林仍然保持着 27 岁时敢想敢做的劲头，不断地向我们展示着惊艳的新产品。无论谷歌在 2014 年发展得有多么好，在 2015 年它指定会再次超越自己。</p>', '9', '1', '2014-01-01 14:35:54', '2014-01-01 14:35:54', '329', '0', '1', '1', null, null, null);
INSERT INTO `tech_blog_article` VALUES ('8', 'jasmine - 前端单元测试框架', '<div style=\"orphans: 2; widows: 2;\"><strong style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\"></span></strong><div style=\"font: 12px/normal Arial, Helvetica, sans-serif; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; background-color: rgb(255, 255, 255); -webkit-text-stroke-width: 0px;\"><span style=\"font-family:\'Microsoft YaHei\';\"><span style=\"font-size:16px;\"><strong></strong></span></span><div style=\"font: 12px/normal Arial, Helvetica, sans-serif; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; background-color: rgb(255, 255, 255); -webkit-text-stroke-width: 0px;\"><span style=\"font-family:\'Microsoft YaHei\';font-size:16px;\"><strong>1. 为什么需要前端的单元测试</strong></span></div><div style=\"font: 12px/normal Arial, Helvetica, sans-serif; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; background-color: rgb(255, 255, 255); -webkit-text-stroke-width: 0px;\"><p><span style=\"font-family:\'Microsoft YaHei\';font-size:16px;\">由于网页用户环境的复杂性与多样性，前端代码往往需要在数十个浏览器上测试器正确性。靠点击点击点击来寻找程序bug。这种方式既费时费力，又无法保证测试的覆盖面。<br clear=\"none\" />随着web2.0的发展，前端页面日益复杂，背后的JS逻辑也越来越复杂，一个页面里面多达上千行的js文件不在少数。一个函数，一个模块，在修改bug或添加新功能的过程中，很容易就产生新的bug，或使老的bug复活。这种情况下，在各个浏览器反复进行黑盒测试，其工作量和测试质量是可想而知的。<br clear=\"none\" />所以为了让测试人员从大量重复性劳动中释放出来，以及保证测试工作的完整和全面性，JS代码需要自动化测试。</span></p><p><span style=\"font-size:16px;\"><br /></span></p><p><span style=\"font-family:\'Microsoft YaHei\';font-size:16px;\"><span style=\"font-weight: bold;\">2. 怎么样进行单元测试</span></span></p><p><span style=\"font-family:\'Microsoft YaHei\';font-size:16px;\">单元测试，主要涉及到两种思想。</span></p><p><span style=\"font-size:16px;\"><span style=\"font-family:\'Microsoft YaHei\';\"><span style=\"font-family:\'Microsoft YaHei\';orphans: 2; widows: 2;\">TDD -&nbsp;</span></span><span style=\"font-family:\'Microsoft YaHei\';\">Test Driven Development，测试驱动开发</span></span></p><p><span style=\"font-family:\'Microsoft YaHei\';\"><span style=\"font-size:16px;\"><span style=\"font-family:\'Microsoft YaHei\';orphans: 2; widows: 2;\">BDD -&nbsp;</span>Behavior Driven Development，行为驱动开发</span></span></p><p><span style=\"font-family:\'Microsoft YaHei\';font-size:16px;\">TDD 理论将就先编写测试代码，再进行开发。 具体开发流程：<br clear=\"none\" />a） 在开始编码前，针对每个关键函数，预先编写好测试用例<br clear=\"none\" /><span style=\"font-family:\'Microsoft YaHei\';orphans: 2; widows: 2;\">b）</span><span>&nbsp;</span>运行测试用列（此时用例肯定会失败，因为代码还未生鲜）<br clear=\"none\" /><span style=\"font-family:\'Microsoft YaHei\';orphans: 2; widows: 2;\">c）</span><span>&nbsp;</span>编写实现代码<br clear=\"none\" /><span style=\"font-family:\'Microsoft YaHei\';orphans: 2; widows: 2;\">d）</span>&nbsp;针对实现代码，运行测试用列<br clear=\"none\" /><span style=\"font-family:\'Microsoft YaHei\';orphans: 2; widows: 2;\">e）</span><span>&nbsp;</span>根据测试结果，重构实现代码<br clear=\"none\" /><span style=\"font-family:\'Microsoft YaHei\';orphans: 2; widows: 2;\">f）</span>&nbsp;回归用例，解决bug</span></p><p><span style=\"font-family:\'Microsoft YaHei\';font-size:16px;\">该过程不断循环下去，直到达到测试完成的标准，这就是测试驱动开发。</span></p><p><span style=\"font-size:16px;\"><br /></span></p><p><span style=\"font-family:\'Microsoft YaHei\';font-size:16px;font-weight: bold;\">3. 什么是jasmine</span></p><p><span style=\"font-family:\'Microsoft YaHei\';font-size:16px;\">（1） jasmine是一个有名的javascript单元测试框架，它是独立的行为驱动开发(BDD)。</span></p><p><span style=\"font-family:\'Microsoft YaHei\';font-size:16px;\">（2） jasmine框架由以下四个部分组成：</span></p><p><span style=\"font-size:16px;\"><span style=\"font-family:\'Microsoft YaHei\';\">a） jasmine的核心组件(jasmine.css 、jasmine.js 、jasmine-html.js)。核心组件实现了对测试用例</span><span style=\"font-family:\'Microsoft YaHei\';\">的解析、运行和展现样式的封装。</span></span></p><p><span style=\"font-family:\'Microsoft YaHei\';font-size:16px;\">b） 待测试的js文件</span></p><p><span style=\"font-family:\'Microsoft YaHei\';font-size:16px;\">c） 对应待测试js文件的测试用列<br /><br clear=\"none\" />d）&nbsp;一个结果展示页面，他将上述相关联的文件都引入，将单元测试用例运行的结果展示在页面上</span></p><p><span style=\"font-family:\'Microsoft YaHei\';font-size:16px;\">&nbsp;</span></p><p><span style=\"font-family:\'Microsoft YaHei\';font-size:16px;\"><span style=\"font-weight: bold;\">4. jasmine使用实例</span></span></p><p><span style=\"font-family:\'Microsoft YaHei\';font-size:16px;\">（1）项目文件目录结构</span></p><p><span style=\"font-size:16px;\"></span></p><div><p style=\"font-family: Tahoma; orphans: 2; widows: 2;\"><span style=\"font-size:16px;\">lib</span></p><p style=\"font-family: Tahoma; orphans: 2; widows: 2;\"><span style=\"font-size:16px;\">| -&nbsp;jasmine-1.3.0</span></p><p style=\"font-family: Tahoma; orphans: 2; widows: 2;\"><span style=\"font-size:16px;\">&nbsp; &nbsp;| -&nbsp;jasmine.css</span></p><p style=\"font-family: Tahoma; orphans: 2; widows: 2;\"><span style=\"font-size:16px;\">&nbsp; &nbsp;| -&nbsp;jasmine.js</span></p><p style=\"font-family: Tahoma; orphans: 2; widows: 2;\"><span style=\"font-size:16px;\">&nbsp; &nbsp;| -&nbsp;jasmine-html.js</span></p><p style=\"font-family: Tahoma; orphans: 2; widows: 2;\"><span style=\"font-size:16px;\">&nbsp; &nbsp;| -&nbsp;MIT.LICENSE</span></p><p style=\"font-family: Tahoma; orphans: 2; widows: 2;\"><span style=\"font-size:16px;\">spec</span></p><div style=\"font-family: Tahoma; orphans: 2; widows: 2;\"><span style=\"font-size:16px;\">| -&nbsp;sourceSpec.js (测试用例文件)</span></div><div style=\"font-family: Tahoma; orphans: 2; widows: 2;\"><span style=\"font-size:16px;\"><br /></span></div><div style=\"font-family: Tahoma; orphans: 2; widows: 2;\"><span style=\"font-size:16px;\">src</span></div><div style=\"font-family: Tahoma; orphans: 2; widows: 2;\"><span style=\"font-size:16px;\"><br /></span></div><div style=\"font-family: Tahoma; orphans: 2; widows: 2;\"><span style=\"font-size:16px;\">| -&nbsp;source.js (待测试的源代码文件)</span></div><div style=\"font-family: Tahoma; orphans: 2; widows: 2;\"><span style=\"font-size:16px;\"><br /></span></div><div style=\"font-family: Tahoma; orphans: 2; widows: 2;\"><span style=\"font-size:16px;\">SpecRunner.html &nbsp;(结果展示页面)</span></div></div><p><span style=\"font-family:\'Microsoft YaHei\';font-size:16px;\"></span></p><p><span style=\"font-family:\'Microsoft YaHei\';font-size:16px;\">&nbsp;</span></p><p><span style=\"font-family:\'Microsoft YaHei\';font-size:16px;\">（2） 利用jasmine进行前端单元测试</span></p><p><span style=\"font-size:16px;\"><span style=\"font-family:\'Microsoft YaHei\';\">&nbsp;</span><span style=\"font-family:\'Microsoft YaHei\';\">测试用例文件也是一个普通的js文件，由一个或多个describe函数结构构成，每个decribe表示一个用例suite，decribe函数有两个参数：一个描述字符串和一个函数体，描述字符串用来描述这个suite的功能，函数体包含若干个it函数结构，每个it函数表示一个测试用例。接下来用一个“hello word”来介绍如何使用jasmine进行前端单元测试。</span></span></p><p><span style=\"font-size:16px;\"><span style=\"font-family:\'Microsoft YaHei\';\">a） 首先在spec文件夹下，创建测试用例文件</span><span style=\"font-family:Tahoma;\">sourceSpec.js：</span></span></p><p><span style=\"font-family:Tahoma;font-size:16px;\"></span><pre class=\"brush: js;\" style=\"padding: 0px 1em; margin-left: 2em; border-left-color: rgb(204, 204, 204); border-left-width: 3px; border-left-style: solid;\"><span style=\"font-size:16px;\">describe(&quot;addition&quot;, function() {\n  it(&quot;should be equal to 3&quot;, function() {\n    expect(add(1,2)).toEqual(3);\n  });\n});</span></pre><span style=\"font-size:16px;\">该文件定义了1个测试用例，标题是addition加法，用例调用了add函数，以1和2作为参数，以toEqual(3)作为用例执行成功的标准</span></p><p></p><p></p><p></p><p><span style=\"font-size:16px;\"></span></p><p><span style=\"font-size:16px;\"></span></p><p><span style=\"font-size:16px;\"></span></p><p><span style=\"font-size:16px;\"><span style=\"font-family:Tahoma;\">b）在src文件夹下编写待测试的的</span><span style=\"font-family:Tahoma;\">源代码source.js：</span></span></p><p><span style=\"font-family:Tahoma;font-size:16px;\"></span><pre class=\"brush: js;\" style=\"padding: 0px 1em; margin-left: 2em; border-left-color: rgb(204, 204, 204); border-left-width: 3px; border-left-style: solid;\"><span style=\"font-size:16px;\">/*\n * Get sum of a and b\n */\nfunction add(a, b) {\n	return a+b;\n}</span></pre><span style=\"font-size:16px;\">待测试函数是一个简单的加法函数</span></p><p></p><p></p><p></p><p><span style=\"font-size:16px;\"></span></p><p><span style=\"font-size:16px;\"></span></p><p><span style=\"font-size:16px;\"></span></p><p><span style=\"font-family:Tahoma;\"><span style=\"font-size:16px;\">c）在根目录创建测试结果显示页面<span style=\"font-family:Tahoma;orphans: 2; widows: 2;\">SpecRunner.html:</span></span></span></p><p><span style=\"font-family:Tahoma;\"><span style=\"font-family:Tahoma;font-size:16px;orphans: 2; widows: 2;\"></span></span><pre class=\"brush: js;\" style=\"padding: 0px 1em; margin-left: 2em; border-left-color: rgb(204, 204, 204); border-left-width: 3px; border-left-style: solid;\"><span style=\"font-size:16px;\">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;\n  &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Jasmine Spec Runner&lt;/title&gt;\n\n  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;lib/jasmine-1.3.0/jasmine.css&quot;&gt;\n  &lt;script type=&quot;text/javascript&quot; src=&quot;lib/jasmine-1.3.0/jasmine.js&quot;&gt;&lt;/script&gt;\n  &lt;script type=&quot;text/javascript&quot; src=&quot;lib/jasmine-1.3.0/jasmine-html.js&quot;&gt;&lt;/script&gt;\n\n  &lt;!-- include source files here... --&gt;\n  &lt;script type=&quot;text/javascript&quot; src=&quot;src/source.js&quot;&gt;&lt;/script&gt;\n\n  &lt;!-- include spec files here... --&gt;\n  &lt;script type=&quot;text/javascript&quot; src=&quot;spec/sourceSpec.js&quot;&gt;&lt;/script&gt;\n\n  &lt;script type=&quot;text/javascript&quot;&gt;\n    window.onload = function() {\n		var jasmineEnv = jasmine.getEnv();\n		jasmineEnv.updateInterval = 1000;\n		var htmlReporter = new jasmine.HtmlReporter();\n		jasmineEnv.addReporter(htmlReporter);\n		jasmineEnv.specFilter = function(spec) {\n		return htmlReporter.specFilter(spec);\n		};\n		jasmineEnv.execute();\n	};\n  &lt;/script&gt;\n\n&lt;/head&gt;\n\n&lt;body&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</span></pre><span style=\"font-size:16px;\">该页面创建了一个jasmineEnv对象，并执行生成报表</span></p><p></p><p></p><p></p><p><span style=\"font-size:16px;\"></span></p><p><span style=\"font-size:16px;\"></span></p><p><span style=\"font-size:16px;\"></span></p><p><span style=\"font-size:16px;\"><br /></span></p><p><span style=\"font-size:16px;\">打开<span style=\"font-family:Tahoma;orphans: 2; widows: 2;\">SpecRunner.html页面，显示如下，表示用例执行成功:</span></span></p><p><span style=\"font-family:Tahoma;font-size:16px;orphans: 2; widows: 2;\"><img alt=\"\" src=\"/xheditor_img/20140102/bc2ca848-0d06-4a9a-9a4c-c03a13fdda00.png\" /></span></p><p><span style=\"font-family:Tahoma;orphans: 2; widows: 2;\"><span style=\"font-size:16px;\">这是运行成功的报表显示，如果我们在<span style=\"font-family:Tahoma;\">sourceSpec.js再加一个异常用例，如：</span></span></span></p><span style=\"font-family:Tahoma;orphans: 2; widows: 2;\"></span><pre class=\"brush: js;\"><span style=\"font-size:16px;\">describe(&quot;addition&quot;, function() {\n  it(&quot;should be equal to 3&quot;, function() {\n    expect(add(1,2)).toEqual(3);\n  });\n  \n  it(&quot;should be equal to 9&quot;, function() {\n    expect(add(3,5)).toEqual(9);\n  });\n});</span></pre><p><span style=\"font-size:16px;\">再次打开<span style=\"font-family:Tahoma;\">SpecRunner.html页面，显示如下：</span></span></p><p><span style=\"font-size:16px;\"><img alt=\"\" src=\"/xheditor_img/20140102/3dbf2cb8-d8bd-415d-aeda-30437e287222.png\" /><br /></span></p><p><span style=\"font-size:16px;\">报表显示两个用例中有一个执行失败，并显示失败的信息。</span></p><p><br /><span style=\"font-size:16px;\">&nbsp;</span></p><p><span style=\"font-weight: bold;\"><span style=\"font-family:\'Microsoft YaHei\';font-size:16px;orphans: 2; widows: 2;\">jasmine项目github地址：&nbsp;</span><a style=\"font-family: \'Microsoft YaHei\'; font-size: 12px; orphans: 2; widows: 2;\" href=\"https://github.com/pivotal/jasmine\"><span style=\"font-size:16px;\">https://github.com/pivotal/jasmine</span></a></span></p></div></div></div>', '8', '1', '2014-01-02 10:36:49', '2014-01-15 15:13:28', '2707', '2', '1', '1', null, null, null);
INSERT INTO `tech_blog_article` VALUES ('9', 'Oracle数据库Windows后台服务进程', '<p><span style=\"font-size:16px;\">在WIndows平台上，Oracle数据服务一般会在后台产生6种进程，如图所示：</span></p><p><span style=\"font-size:16px;\"><img alt=\"\" src=\"/xheditor_img/20140109/99635edd-3b9a-4147-8c37-74ba8fd2fe09.png\" /></span></p><p>&nbsp;</p><strong><span style=\"font-size:16px;\"></span></strong><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><strong><span style=\"font-size:16px;\">1. OracleService实例名</span></strong></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-size:16px;\">数据库实例的数据库服务。</span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-size:16px;\"></span>&nbsp;</div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-size:16px;\"></span>&nbsp;</div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><strong><span style=\"font-size:16px;\">2. OracleJobScheduler实例名</span></strong></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-size:16px;\"><span style=\"font-size:16px;\">数据库</span>实例的作业调度服务。</span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-size:16px;\"></span>&nbsp;</div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-size:16px;\"></span>&nbsp;</div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><strong><span style=\"font-size:16px;\">3. OracleDBConsole实例名</span></strong></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-size:16px;\"><span style=\"font-size:16px;\">数据库</span>实例的控制台服务，运行Enterprise Manager的时候需要启动该服务。</span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-size:16px;\"></span>&nbsp;</div><p><strong><span style=\"font-size:16px;\">4. OracleOraDb**_homeTNSListener</span></strong></p><p><span style=\"font-size:16px;\">Oracle数据监听服务，用来监听客户端的数据库连接，并把连接转发到数据库服务器。</span></p><p><span style=\"font-size:16px;\"></span>&nbsp;</p><p><strong><span style=\"font-size:16px;\">5</span><span style=\"font-size:16px;\">. &nbsp;OracleOraDb**_homeClrAgent</span></strong></p><div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-size:16px;\">该服务用来开启、配置和关闭exrproc进程。</span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-size:16px;\">.NET平台上，.net程序集会被拷贝到ORACLE_HOME/BIN/CLR目录下，并加载到extproc进程中运行，当调用.net存储过程时，oracle将与这个进程进行通信，获取传入参数并执行检索。</span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\">&nbsp;</div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\">&nbsp;</div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><strong><span style=\"font-size:16px;\">6. Oracle 实例名 VSS Writer Service</span></strong></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-size:16px;\">VSS（卷映射拷贝）是windows平台的基础服务，一个映射拷贝就是一个连续的数据时间点映像。Oracle VSS Writer Service支持Oracle数据库在windows平台上创建这些数映射拷贝。</span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-size:16px;\"><br /></span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-size:16px;\"><br /></span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-size:16px;\"><br /></span></div></div></div></div>', '3', '1', '2014-01-09 15:06:27', '2014-01-14 17:27:47', '517', '0', '1', '1', null, null, null);
INSERT INTO `tech_blog_article` VALUES ('10', '自动加载分页导航框架', '<h3><span style=\"font-family:Microsoft YaHei;\">分页导航</span></h3><p><span style=\"font-family:Microsoft YaHei;\">在页面上做数据显示的时候，经常要利用<strong>分页。</strong></span></p><p><span style=\"font-family:Microsoft YaHei;\">所以需要在前端显示页号作为导航，通常分页导航需要显示的元素有：首页、当前页号、上一页、下一页等等。</span></p><p><span style=\"font-family:Microsoft YaHei;\">很多站点都有比较美观还用的分页导航，如：</span></p><p><span style=\"font-family:Microsoft YaHei;\">&nbsp;<img src=\"/xheditor_img/20140117/b6846bd5-abc0-4808-b4c5-43d273acd711.PNG\" alt=\"\" /></span></p><p><span style=\"font-family:Microsoft YaHei;\">&nbsp;<img src=\"/xheditor_img/20140117/ef2c7851-7c40-409b-afe3-6d79d43f1254.png\" alt=\"\" /></span></p><p><span style=\"font-family:Microsoft YaHei;\"><img src=\"/xheditor_img/20140117/793cb0c8-a485-4b20-b595-69540b8807af.png\" alt=\"\" /></span></p><p><span style=\"font-family:Microsoft YaHei;\"><img src=\"/xheditor_img/20140117/d59e6496-60f2-41af-8ad5-4ccdc8096c70.png\" alt=\"\" /></span></p><h3><span style=\"font-family:Microsoft YaHei;\">&nbsp;</span></h3><div><span style=\"font-family:Microsoft YaHei;\"><br /></span></div><h3><span style=\"font-family:Microsoft YaHei;\">AutoPagination自动加载分页导航</span></h3><p><span style=\"font-family:Microsoft YaHei;\"><br /></span></p><p><span style=\"font-family:Microsoft YaHei;\">为了快速在页面上添加一个分页导航，避免重复的编码，笔者做了一个自动加载分页导航的前端框架，只需要一个简单的js函数，就可以在页面上呈现如下的一个分页导航：</span></p><p><span style=\"font-family:Microsoft YaHei;\"><img src=\"/xheditor_img/20140117/e76e1bb8-3698-425c-8407-32b82942c0b2.png\" alt=\"\" /></span></p><p><span style=\"font-family:Microsoft YaHei;\"><br /></span></p><h4><span style=\"font-family:Microsoft YaHei;\">AutoPagination函数讲解</span></h4><p><span style=\"font-family:Microsoft YaHei;\"><span style=\"font-size:12px;\">根据不同需求，提供了两种方式加载分页导航：</span></span></p><ul><li><span style=\"font-family:Microsoft YaHei;\"><span style=\"font-size:12px;\">load_pagination(page_div, pageNum, maxShow, param_name, link)</span></span></li></ul><div><p><span style=\"font-family:Microsoft YaHei;\"><span style=\"font-size:12px;\">加载分页导航，页号url参数名由param_name给出</span></span></p><p><span style=\"font-family:Microsoft YaHei;\"><span style=\"font-size:12px;\">参数说明：</span></span></p><p dir=\"ltr\"><span style=\"font-family:Microsoft YaHei;\"><span style=\"font-size:12px;\">page_div：指定分页导航的div的ID</span></span></p><p dir=\"ltr\"><span style=\"font-family:Microsoft YaHei;\"><span style=\"font-size:12px;\">pageNum：总页数</span></span></p><p dir=\"ltr\"><span style=\"font-family:Microsoft YaHei;\"><span style=\"font-size:12px;\">maxShow：页数太多时，省略的页号之前最大显示的页数，若该值大于等于pageNum的一半，则显示全部页数</span></span></p><p dir=\"ltr\"><span style=\"font-family:Microsoft YaHei;\"><span style=\"font-size:12px;\">param_name：url参数中表示页号的参数名称</span></span></p><p><span style=\"font-family:Microsoft YaHei;\"><span style=\"font-size:12px;\">link：页号跳转链接</span></span></p><span style=\"font-family:Microsoft YaHei;\"><span style=\"font-size:12px;\"><br /></span></span></div><ul><li><span style=\"font-family:Microsoft YaHei;\"><span style=\"font-size:12px;\">load_pagination_pageno(page_div, pageNum, pageNo, maxShow, link)</span></span></li></ul><div><p><span style=\"font-family:Microsoft YaHei;\"><span style=\"font-size:12px;\">加载分页导航，页号url参数名在link中给出</span></span></p><p><span style=\"font-family:Microsoft YaHei;\"><span style=\"font-size:12px;\">参数说明：</span></span></p><p dir=\"ltr\"><span style=\"font-family:Microsoft YaHei;\"><span style=\"font-size:12px;\">page_div：指定分页导航的div的ID</span></span></p><p dir=\"ltr\"><span style=\"font-family:Microsoft YaHei;\"><span style=\"font-size:12px;\">pageNum：总页数</span></span></p><p dir=\"ltr\"><span style=\"font-family:Microsoft YaHei;\"><span style=\"font-size:12px;\">pageNo：页号</span></span></p><p dir=\"ltr\"><span style=\"font-family:Microsoft YaHei;\"><span style=\"font-size:12px;\">maxShow：页数太多时，省略的页号之前最大显示的页数，若该值大于等于pageNum的一半，则显示全部页数</span></span></p><p><span style=\"font-family:Microsoft YaHei;\"><span style=\"font-size:12px;\">link：页号跳转链接，带有页号url参数名</span></span></p><p><span style=\"font-family:Microsoft YaHei;\"><br /></span></p></div><h4><span style=\"font-family:Microsoft YaHei;\">AutoPagination使用实例</span></h4><ul><li><span style=\"font-family:Microsoft YaHei;\">&nbsp;文件结构：</span></li></ul><div><p><span style=\"font-size:10px;\"><span style=\"font-family:Microsoft YaHei;\"><br /></span></span></p><p><span style=\"font-size:10px;\"><span style=\"font-family:Microsoft YaHei;\">js</span></span></p><p><span style=\"font-size:10px;\"><span style=\"font-family:Microsoft YaHei;\">|__&nbsp; auto-pagination.min.js</span></span></p><p><span style=\"font-size:10px;\"><span style=\"font-family:Microsoft YaHei;\">css</span></span></p><p><span style=\"font-size:10px;\"><span style=\"font-family:Microsoft YaHei;\">|__&nbsp; auto-pagination.min.css</span></span></p><p><span style=\"font-size:10px;\"><span style=\"font-family:Microsoft YaHei;\">demo.html</span></span></p><span style=\"font-family:Microsoft YaHei;\"><br /></span></div><ul dir=\"ltr\"><li><div><span style=\"font-family:Microsoft YaHei;\">&nbsp;demo.html代码如下：</span></div></li></ul><pre class=\"brush: js;\"><span style=\"font-family:Microsoft YaHei;\">&lt;!doctype html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n	&lt;head&gt;\n		&lt;title&gt;Auto Pagination&lt;/title&gt;\n		&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/auto-pagination.min.css&quot; /&gt;\n		&lt;script type=&quot;text/javascript&quot; src=&quot;http://www.charlestech.org/js/jquery-1.4.4.min.js&quot;&gt;&lt;/script&gt;\n		&lt;script type=&quot;text/javascript&quot; src=&quot;js/auto-pagination.js&quot;&gt;&lt;/script&gt;\n		&lt;script type=&quot;text/javascript&quot;&gt;\n			$(function(){\n				load_pagination_pageno(&quot;page_area&quot;, 20, get_param(&quot;page&quot;), 5, &quot;demo.html?page=&quot;);	// 方式1\n				load_pagination(&quot;page_area_1&quot;, 20, 5, &quot;page&quot;, &quot;demo.html&quot;);	// 方式2\n			});\n		&lt;/script&gt;\n	&lt;/head&gt;\n	\n	&lt;body&gt;\n		&lt;div class=&quot;page_area&quot;&gt;&lt;/div&gt;\n		&lt;div class=&quot;page_area_1&quot;&gt;&lt;/div&gt;\n	&lt;/body&gt;\n&lt;/html&gt;\n</span></pre><p><span style=\"font-family:Microsoft YaHei;\">&nbsp;</span></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><strong><span style=\"font-size:16px;\">点击<a href=\"http://www.charlestech.org/demo/autopagination_demo.html\" target=\"_blank\">这里</a>，查看在线demo。</span></strong></span></p><p><span style=\"font-family:Microsoft YaHei;\"><br /></span></p><h4><span style=\"font-family:Microsoft YaHei;\">AutoPagination源码下载</span></h4><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">AutoPagination最新源代码已发布在Github上，点击<a href=\"https://github.com/charleschaochen/AutoPagination\" target=\"_blank\">这里</a>进行查看下载。</span></span></p>', '2', '1', '2014-01-14 18:29:41', '2014-01-17 13:58:07', '973', '1', '1', '1', null, null, null);
INSERT INTO `tech_blog_article` VALUES ('11', '15分钟学会使用Git和远程代码库', '<div>Git是个了不起但却复杂的源代码管理系统。它能支持复杂的任务，却因此经常被认为太过复杂而不适用于简单的日常工作。让我们诚实一记吧：Git是复杂的，我们不要装作它不是。但我仍然会试图教会你用（我的）基本的Git和远程代码库干活的工作步骤，在15分钟内。</div><p>&nbsp;</p><h2>工作步骤</h2><div>我会展示以下的步骤，通常能帮我独自在一台或多台机器上做项目。</div><div></div><div><ol><li>创建一个远程的空代码库（在<a href=\"https://bitbucket.org/\" target=\"_blank\"><span style=\"color:#0099cc;\">BitBucket</span></a>上）</li><li>在本地代码库添加一个项目</li><li>在分支上开发新功能</li><li>a) 保留新功能 或者 b) 丢弃它们</li><li>也许，回到某个早先的时间点</li><li>将本地代码库推送到远程代码库</li><li>在另一台机器上取得远程代码库</li></ol></div><p>&nbsp;</p><h2><span style=\"font-family:\'Helvetica Neue\', Helvetica, Arial, sans-serif;font-size:24px;line-height: 36px; font-style: normal; font-weight: bold;\">安装Git &nbsp; &nbsp;</span></h2><div>在大多数*nix系统（Linux、OS X）上，Git已经被安装了。你通过发送下面的命令，可以通过Git自身，把它更新到最新的的开发版本（不推荐）。</div><div></div><div><div class=\"syntaxhighlighter nogutter notranslate bash ie\" id=\"highlighter_39514\"><table border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"bash plain\">git clone https:</code><code class=\"bash plain\">//github</code><code class=\"bash plain\">.com</code><code class=\"bash plain\">/git/git</code></div></div></td></tr></tbody></table></div></div><div></div><div>在Windows上，你可以在<a href=\"http://git-scm.com/download/win\" target=\"_blank\"><span style=\"color:#0099cc;\">这里</span></a>下载Git的安装程序。如果你真的需要其他系统的安装程序，Mac OS X安装文件在<a href=\"http://code.google.com/p/git-osx-installer/downloads/list?can=3\" target=\"_blank\"><span style=\"color:#0099cc;\">这里</span></a>，Linux的操作指导在<a href=\"http://book.git-scm.com/2_installing_git.html\" target=\"_blank\"><span style=\"color:#0099cc;\">这里</span></a>。</div><div></div><p>&nbsp;</p><h2>创建一个远程代码库</h2><div>很多人喜欢用<a href=\"https://github.com/\" target=\"_blank\"><span style=\"color:#0099cc;\">Github</span></a>。我个人更喜欢<a href=\"https://bitbucket.org/\" target=\"_blank\"><span style=\"color:#0099cc;\">BitBucket</span></a>，因为它提供了不限制的私有代码库，那是我最需要的。你可以将下列指令转换到Github上，这些过程是相同的。</div><div>那么，去到<a href=\"https://bitbucket.org/\" target=\"_blank\"><span style=\"color:#0099cc;\">www.bitbucket.org</span></a>并注册一个账号。一旦完成，登录后点击最上方的“create（创建）”按钮。照着填写表格，勾选私有代码库。你可不想让其他人来偷窥你的Facebook的杀手级应用的源代码，对吧。</div><div>&nbsp;你现在可以离开BitBucket了，我们在已经有了所有那里需要的东西了。</div><div></div><h2></h2><p>&nbsp;</p><h2>设置Git</h2><div>在我们能用Git工作之前，我们需要做个一次性的配置。为了Git能跟踪到谁做了修改，我们需要设置你的用户名。我强烈建议你使用与注册BitBucket账号相同的用户名和电子邮箱地址。发送这些命令，相应地替换掉其中的“your_username”和“your_email@domain.com”（注意引号）：</div><div></div><div><div class=\"syntaxhighlighter nogutter notranslate bash ie\" id=\"highlighter_787301\"><table border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"bash plain\">git config --global user.name </code><code class=\"bash string\">&quot;your_username&quot;</code></div><div class=\"line number2 index1 alt1\"><code class=\"bash plain\">git config --global user.email your_email@domain.com</code></div></div></td></tr></tbody></table></div></div><div></div><div>我们也会设定推送（push）的默认值为‘simple’。要了解这是什么意思，快速阅读我之前发布的<a href=\"http://blog.nicoschuele.com/?p=217\" target=\"_blank\"><span style=\"color:#0099cc;\">关于推送的默认值</span></a>（非必须）。发送这条命令：</div><div></div><div><div class=\"syntaxhighlighter nogutter notranslate bash ie\" id=\"highlighter_538016\"><table border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"bash plain\">git config --global push.default simple</code></div></div></td></tr></tbody></table></div></div><div></div><div>我们都设好了。你无需在你的机器上再重复这些配置，但如果你在另一台机器上工作的话，不要忘记这些配置。如果你忘记做初始的配置，Git不会允许你提交任何东西，这会让你困扰。</div><div></div><h2></h2><p>&nbsp;</p><h2><span style=\"font-family:\'Helvetica Neue\', Helvetica, Arial, sans-serif;font-size:24px;line-height: 36px; font-style: normal; font-weight: bold;\">创建一个本地代码库</span></h2><div>作为例子，我们会假装我们有一个网站（无所谓技术）存在于我们机器上的‘workspace’文件夹下的’my_site’文件夹内。在命令行中，去到你的站点的根文件夹。在OS X和Linux上：</div><div></div><div><div class=\"syntaxhighlighter nogutter notranslate shell ie\" id=\"highlighter_934077\"><table border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"shell functions\">cd</code> <code class=\"shell plain\">~</code><code class=\"shell plain\">/workspace/my_site/</code></div></div></td></tr></tbody></table></div></div><div></div><div>在Windows上：</div><div></div><div><div class=\"syntaxhighlighter nogutter notranslate bash ie\" id=\"highlighter_699197\"><table border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"bash functions\">cd</code> <code class=\"bash plain\">c:\\workspace\\my_site</code></div></div></td></tr></tbody></table></div></div><div></div><div>我们首先需要告诉Git这个文件夹是我们需要跟踪的项目。所以我们发送这个命令来初始化一个新的本地Git代码库</div><div></div><div><div class=\"syntaxhighlighter nogutter notranslate bash ie\" id=\"highlighter_580118\"><table border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"bash plain\">git init</code></div></div></td></tr></tbody></table></div></div><div></div><div>Git会在my_site文件夹内创建一个名为.git的隐藏文件夹，那就是你的本地代码库。</div><div></div><h2></h2><p>&nbsp;</p><h2>加载（Stage）文件</h2><div>我们现在需要命令Git我们需要加载（stage）所有项目文件。发送：</div><div></div><div><div class=\"syntaxhighlighter nogutter notranslate bash ie\" id=\"highlighter_385104\"><table border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"bash plain\">git add .</code></div></div></td></tr></tbody></table></div></div><div></div><div>最后的“.”符号的意思是“所有文件、文件夹和子文件夹”。假如我们只想要把特定文件添加到源代码控制中去，我们可以指定它们：</div><div></div><div><div class=\"syntaxhighlighter nogutter notranslate bash ie\" id=\"highlighter_520736\"><table border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"bash plain\">git add my_file, my_other_file</code></div></div></td></tr></tbody></table></div></div><h2></h2><p>&nbsp;</p><h2>提交文件</h2><div>现在，我们想要提交已加载（staged）的文件。阅读“添加一个时间点，在这里你的文件处在一个可还原的状态”。我们提交我们的文件时，总是附带着有意义的注释，描述了它们现在的状态。我一直用“initial commit”来作为第一个提交的注释。</div><div></div><div><div class=\"syntaxhighlighter nogutter notranslate bash ie\" id=\"highlighter_258451\"><table border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"bash plain\">git commit -m </code><code class=\"bash string\">&quot;initial commit&quot;</code></div></div></td></tr></tbody></table></div></div><div></div><div>就这样。现在你随时都可以回滚到这个提交状态。如果你有需要检查你现在的已加载（staged）和未加载（unstaged）文件的状态、提交等，你可以询问git的状态：</div><div></div><div><div class=\"syntaxhighlighter nogutter notranslate bash ie\" id=\"highlighter_242164\"><table border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"bash plain\">git status</code></div></div></td></tr></tbody></table></div></div><h2></h2><p>&nbsp;</p><h2>创建分支</h2><div>建立分支是你创建代码的独立版本的动作，独立于你的主干分支。默认地，每次你提交到Git的文件都会被储存到“master（主干）”分支。</div><div>现在我们来说说，你想要向项目里添加一个功能，但你想要能够回滚到现在版本，以防出现差错，或者你决定要放弃这个功能。这就是你创建分支的时候了。创建并同时切换到你新建的分支，发送：</div><div></div><div><div class=\"syntaxhighlighter nogutter notranslate bash ie\" id=\"highlighter_29313\"><table border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"bash plain\">git checkout -b new_feature</code></div></div></td></tr></tbody></table></div></div><div></div><div>或者，你可以先创建一个分支然后手动切换，就像这样：</div><div></div><div><div class=\"syntaxhighlighter nogutter notranslate bash ie\" id=\"highlighter_367237\"><table border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"bash plain\">git branch new_featuregit checkout new_feature</code></div></div></td></tr></tbody></table></div></div><div></div><div>要看你现在项目下所有的分支，发送这个：</div><div></div><div><div class=\"syntaxhighlighter nogutter notranslate bash ie\" id=\"highlighter_822894\"><table border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"bash plain\">git branch</code></div></div></td></tr></tbody></table></div></div><div></div><div>现在你可以在你的项目上无所顾忌地做任何你想做的：任何时候，你都可以回到你创建分支前的状态。注意，你同时可以有多个分支，甚至可以从一个分支上再创建一个分支。</div><div></div><h2></h2><p>&nbsp;</p><h2>合并分支</h2><div>当你对你的新功能满意了的时候，你想要把它加到主干分支上。当你在你的新功能分支上时，你首先需要加载（stage）并且提交你的文件：</div><div></div><div><div class=\"syntaxhighlighter nogutter notranslate bash ie\" id=\"highlighter_349355\"><table border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"bash plain\">git add .git commit -m </code><code class=\"bash string\">&quot;adds my new feature&quot;</code></div></div></td></tr></tbody></table></div></div><div></div><div>然后你移到你的主干分支：</div><div></div><div><div class=\"syntaxhighlighter nogutter notranslate bash ie\" id=\"highlighter_535486\"><table border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"bash plain\">git checkout master</code></div></div></td></tr></tbody></table></div></div><div></div><div>像这样合并：</div><div></div><div><div class=\"syntaxhighlighter nogutter notranslate bash ie\" id=\"highlighter_807374\"><table border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"bash plain\">git merge new_feature</code></div></div></td></tr></tbody></table></div></div><div></div><div>此时，你的主干分支和你的新功能分支会变成一样的了。</div><div></div><h2></h2><p>&nbsp;</p><h2>丢弃分支</h2><div>相反，如果你打算丢弃你在分支里做的修改，你首先需要加载（stage）你的文件并且在分支里提交：</div><div></div><div><div class=\"syntaxhighlighter nogutter notranslate bash ie\" id=\"highlighter_128707\"><table border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"bash plain\">git add .git commit -m </code><code class=\"bash string\">&quot;feature to be discarded&quot;</code></div></div></td></tr></tbody></table></div></div><div></div><div>然后，你移到主干分支：</div><div></div><div><div class=\"syntaxhighlighter nogutter notranslate bash ie\" id=\"highlighter_957427\"><table border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"bash plain\">git checkout master</code></div></div></td></tr></tbody></table></div></div><div></div><div>现在，你的代码处于你创建分支之前的状态了。</div><div></div><h2></h2><p>&nbsp;</p><h2>删除一个分支</h2><div>如果你要把你的分支合并到主干分支，从主干（master）分支上发送：</div><div></div><div><div class=\"syntaxhighlighter nogutter notranslate bash ie\" id=\"highlighter_580657\"><table border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"bash plain\">git branch -d new_feature</code></div></div></td></tr></tbody></table></div></div><div></div><div>假如修改已经合并了，它<em>只会</em>删除分支。假如分支没有合并，你会得到一个错误信息。删除一个未合并的分支（通常你不想保留的修改），你需要发送一样的命令附带一个大写D。意思是“强制删除分支，无论如何我不想要它了。”：</div><div></div><div><div class=\"syntaxhighlighter nogutter notranslate bash ie\" id=\"highlighter_806076\"><table border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"bash plain\">git branch -D new_feature</code></div></div></td></tr></tbody></table></div></div><h2></h2><p>&nbsp;</p><h2>回滚到之前的提交状态</h2><div>在某些时候，你可能想要回到之前的代码版本。首先，你需要找到你想回到哪个版本。要看所有的完成了的提交，发送：</div><div></div><div><div class=\"syntaxhighlighter nogutter notranslate bash ie\" id=\"highlighter_620871\"><table border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"bash plain\">git log</code></div></div></td></tr></tbody></table></div></div><div></div><div>这会输出你的提交的历史记录，像这样：</div><div></div><div><div class=\"syntaxhighlighter nogutter notranslate bash ie\" id=\"highlighter_803340\"><table border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"bash plain\">commit ca82a6dff817ec66f44342007202690a93763949Author: your_username your_email@domain.comDate:&nbsp;&nbsp; Mon Nov 4 12:52:11 2013 -0700&nbsp;&nbsp;&nbsp; changes the frontpage layout</code></div><div class=\"line number2 index1 alt1\"><code class=\"bash plain\">commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7Author: your_username your_email@domain.comDate:&nbsp;&nbsp; Mon Nov 4 11:40:33 2013 -0700&nbsp;&nbsp;&nbsp; adds my new feature</code></div><div class=\"line number3 index2 alt2\"><code class=\"bash plain\">commit a11bef06a3f659402fe7563abf99ad00de2209e6Author: your_username your_email@domain.comDate:&nbsp;&nbsp; Mon Nov 4 10:37:28 2013 -0700&nbsp;&nbsp;&nbsp; initial commit</code></div></div></td></tr></tbody></table></div></div><div></div><div>如果你想回到“adds my new feature”这个提交，简单地用提交的ID做签出（checkout）（我通常只用到ID开头的9个字符）</div><div></div><div><div class=\"syntaxhighlighter nogutter notranslate bash ie\" id=\"highlighter_393716\"><table border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"bash plain\">git checkout 085bb3bcb</code></div></div></td></tr></tbody></table></div></div><div></div><div>你也可以签出到一个新的分支，像这样：</div><div></div><div><div class=\"syntaxhighlighter nogutter notranslate bash ie\" id=\"highlighter_835355\"><table border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"bash plain\">git checkout -b my_previous_version 085bb3bcb</code></div></div></td></tr></tbody></table></div></div><div></div><div><em>只是别太疯狂了！</em>你的分支越复杂，就越难确定你真正在做什么。</div><div></div><h2></h2><p>&nbsp;</p><h2>推送到远程代码库</h2><div>在第一次你想推送一个本地代码库到远程代码库时，你需要把它添加到你的项目配置里。像这样做：</div><div></div><div><div class=\"syntaxhighlighter nogutter notranslate bash ie\" id=\"highlighter_57290\"><table border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"bash plain\">git remote add origin https:</code><code class=\"bash plain\">//your_username</code><code class=\"bash plain\">@bitbucket.org</code><code class=\"bash plain\">/your_username/name_of_remote_repository</code><code class=\"bash plain\">.git</code></div></div></td></tr></tbody></table></div></div><div></div><div>注意这里的“origin”只是一个习惯。它是你的远程代码库的别名，但是你可以用其他任何你喜欢的词。你甚至可以有多个远程代码库，你只需要给它们起不同的别名。</div><div>之后，你想要推送你的本地代码库的主干分支到你的远程代码库：</div><div></div><div><div class=\"syntaxhighlighter nogutter notranslate bash ie\" id=\"highlighter_976516\"><table border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"bash plain\">git push origin master</code></div></div></td></tr></tbody></table></div></div><div></div><div>如果你使用Bitbucket，在这时，你会被请求输入你的密码。照做，你的本地代码库会被推送到你的远程代码库上。</div><div></div><h2></h2><p>&nbsp;</p><h2>取得远程代码库的一份本地拷贝</h2><div>如果你还没有一份远程代码库的本地版本（例如，如果你在另一台机器上开始工作，这台机器上还没有用过这个项目），你首先需要拷贝（clone）它。去到你的代码库想要拷贝到的文件夹下，并发送：</div><div></div><div><div class=\"syntaxhighlighter nogutter notranslate bash ie\" id=\"highlighter_783215\"><table border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"bash plain\">git clone https:</code><code class=\"bash plain\">//your_username</code><code class=\"bash plain\">@bitbucket.org</code><code class=\"bash plain\">/your_username/name_of_remote_repository</code><code class=\"bash plain\">.git</code></div></div></td></tr></tbody></table></div></div><div></div><div>另一方面，如果你已经在本地的项目上工作了，只是想从远程代码库上取得它最新的版本，移动到项目的根目录下，并发送：</div><div></div><div><div class=\"syntaxhighlighter nogutter notranslate bash ie\" id=\"highlighter_672622\"><table border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"bash plain\">git pull origin master</code></div></div></td></tr></tbody></table></div></div><h2></h2><p>&nbsp;</p><h2>别名</h2><div>Git允许你为你常用的命令创建快捷方式（别名）。例如，如果你不想每次都输入git commit -m “some comment”，而是输入git c “some comment”，你可以向你的git全局配置里添加一个别名来实现，像这样：</div><div></div><div><div class=\"syntaxhighlighter nogutter notranslate bash ie\" id=\"highlighter_193268\"><table border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"bash plain\">git config --global </code><code class=\"bash functions\">alias</code><code class=\"bash plain\">.c </code><code class=\"bash string\">\'commit -m\'</code></div></div></td></tr></tbody></table></div></div><div></div><div>这是我使用的别名列表：</div><div></div><div><div class=\"syntaxhighlighter nogutter notranslate bash ie\" id=\"highlighter_732779\"><table border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"bash plain\">git config --global </code><code class=\"bash functions\">alias</code><code class=\"bash plain\">.c </code><code class=\"bash string\">\'commit -m\'</code></div><div class=\"line number2 index1 alt1\"><code class=\"bash plain\">git config --global </code><code class=\"bash functions\">alias</code><code class=\"bash plain\">.co </code><code class=\"bash string\">\'checkout\'</code></div><div class=\"line number3 index2 alt2\"><code class=\"bash plain\">git config --global </code><code class=\"bash functions\">alias</code><code class=\"bash plain\">.cob </code><code class=\"bash string\">\'checkout -b\'</code></div><div class=\"line number4 index3 alt1\"><code class=\"bash plain\">git config --global </code><code class=\"bash functions\">alias</code><code class=\"bash plain\">.br </code><code class=\"bash string\">\'branch\'</code></div><div class=\"line number5 index4 alt2\"><code class=\"bash plain\">git config --global </code><code class=\"bash functions\">alias</code><code class=\"bash plain\">.m </code><code class=\"bash string\">\'merge\'</code></div><div class=\"line number6 index5 alt1\"><code class=\"bash plain\">git config --global </code><code class=\"bash functions\">alias</code><code class=\"bash plain\">.a </code><code class=\"bash string\">\'add .\'</code></div><div class=\"line number7 index6 alt2\"><code class=\"bash plain\">git config --global </code><code class=\"bash functions\">alias</code><code class=\"bash plain\">.s </code><code class=\"bash string\">\'status\'</code></div><div class=\"line number8 index7 alt1\"><code class=\"bash plain\">git config --global </code><code class=\"bash functions\">alias</code><code class=\"bash plain\">.dbr </code><code class=\"bash string\">\'branch -d\'</code></div></div></td></tr></tbody></table></div></div><h2></h2><p>&nbsp;</p><h2>进一步</h2><div>当然，还有比这些更多的Git内容。如果你想要更了解Git，我推荐官方文档和教程，你可以在<a href=\"http://git-scm.com/documentation\" target=\"_blank\"><span style=\"color:#0099cc;\">http://git-scm.com/documentation</span></a>找到。</div><p>&nbsp;</p><p>原文链接： <a href=\"http://blog.nicoschuele.com/?p=219\" target=\"_blank\" ref=\"nofollow\"><span style=\"color:#0099cc;\">Nico</span></a>&nbsp;&nbsp;&nbsp;翻译： <a href=\"http://blog.jobbole.com/\"><span style=\"color:#0099cc;\"> 伯乐在线 </span></a> - <a href=\"http://blog.jobbole.com/author/cjpan/\"><span style=\"color:#0099cc;\">cjpan</span></a><br />译文链接： <a href=\"http://blog.jobbole.com/53573/\"><span style=\"color:#0099cc;\">http://blog.jobbole.com/53573/</span></a><br />[ <span style=\"color:#ff0000;\"><strong>转载必须在正文中标注并保留原文链接、译文链接和译者等信息。</strong></span>]<br /></p>', '1', '1', '2014-01-15 14:21:09', '2014-01-15 14:21:52', '774', '0', '1', '1', null, null, null);
INSERT INTO `tech_blog_article` VALUES ('12', 'IntelliJ Idea 13创建J2EE工程', '<p dir=\"ltr\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">捣鼓了好一会，终于在Idea IDE上成功创建并运行了J2EE工程。下面总结一下在IntelliJ Idea下创建J2EE工程、Tomcat配置、应用部署的详细步骤。</span></p><p dir=\"ltr\">&nbsp;</p><h3>1. 创建J2EE工程</h3><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">在IntelliJ IDEA中，&quot;New Project&quot;创建的project相当于eclipse中workspace，而module才相当于eclipse中的project。IDEA提倡一个workspace存放一个project。</span></div><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><ul><li><span style=\"font-family:Microsoft YaHei;font-size:16px;\">首先，需要创建一个&quot;workspace&quot;:</span></li></ul></div><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">File - New Project - Java，点击Next之后，勾选Web Application，若需要使用其他框架或技术，也可以此时在左侧列表中进行选择。</span></div><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\"></span>&nbsp;</div><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><img alt=\"\" src=\"/xheditor_img/20140120/540eda2a-788b-45e4-a7c0-44e5e86fd037.png\" /></span></div><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;\"><br /><span style=\"font-size:16px;\"></span></span></div><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><ul><li><span style=\"font-family:Microsoft YaHei;font-size:16px;\">接下来，我们需要创建一个真正的J2EE工程。右击项目选择Open Module Settings，进入Modules标签，点击+新建New Module。依然选择Java，选择所需要的框架组件，Finish。</span></li></ul></div><blockquote style=\"MARGIN-RIGHT: 0px\" dir=\"ltr\"><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\">此时可以看到在project的目录下多一个工程目录。IDEA中，工程的输出存放在project根目录的out文件夹下，**_exploded文件夹下所有的文件就是该module的发布文件。按照eclipse的习惯，我们可以在该工程目录下/web/WEB-INF下创建classes和lib文件夹作为Java文件编译和Jar包存放的目录。</span></p></blockquote><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><img alt=\"\" src=\"/xheditor_img/20140120/bc11b54c-2885-4832-9c41-aad41111ed40.png\" /></span></div><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;\"><br /><span style=\"font-size:16px;\"></span></span></div><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><ul><li><span style=\"font-family:Microsoft YaHei;font-size:16px;\">创建完毕后，需要手动修改java类编译和jar包存放的默认目录。同样进入Open Module Settings - Modules，点击当前的Module，在右侧窗口中，选择Paths，选中Use module compile output path，选择output path和test path的路径为上一步创建的classes目录</span></li></ul><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\"></span></div></div><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;\"><img alt=\"\" src=\"/xheditor_img/20140120/3cee52a7-58f9-4851-a9ce-7be56237dfeb.png\" /><br /><span style=\"font-size:16px;\"></span></span></div><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><ul><li><span style=\"font-family:Microsoft YaHei;font-size:16px;\">选择Dependencies，点击+新建Java or directories，选择后在弹出窗口中选择jar directory</span></li></ul><div><span style=\"font-family:Microsoft YaHei;\"><img alt=\"\" src=\"/xheditor_img/20140120/7d8005b9-87c8-4935-a61e-bfcb16536d17.png\" /><br /><span style=\"font-size:16px;\"></span></span></div></div><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;\"><br /><span style=\"font-size:16px;\"></span></span></div><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;\"><br /><span style=\"font-size:16px;\"></span></span></div><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;\"><br /><span style=\"font-size:16px;\"></span></span></div><h3 style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><strong>2. 设置Tomcat服务器</strong></h3><ul><li><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">点击File - Settings，找到Application Servers选项，添加tomcat服务器目录，OK。这一步就相当于在eclipse的Preferences中配置tomcat。</span></div></li></ul><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><img alt=\"\" src=\"/xheditor_img/20140120/8aafa34e-0bbe-4c24-bbe8-7d1f410f8bfe.png\" /><br /></span></div><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;\"><br /><span style=\"font-size:16px;\"></span></span></div><ul><li><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">在当前项目下，添加tomcat容器。这一步每次新建project之后都要重新添加。选择 Run - Edit Configurations，点击+添加本地tomcat，</span></div></li></ul><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><img alt=\"\" src=\"/xheditor_img/20140120/544bb2cf-0a75-43b0-9412-f04d6330b90a.png\" /></span></div><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;\"><br /><span style=\"font-size:16px;\"></span></span></div><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;\"><br /><span style=\"font-size:16px;\"></span></span></div><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">3、部署应用</span></div><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">在上一步添加本地tomcat时，如果不做其他设置，窗口下端会出现提示：</span></div><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\"></span>&nbsp;</div><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><img alt=\"\" src=\"/xheditor_img/20140120/4485eaa6-480f-4952-b9bc-cc3c016eea2b.png\" /></div><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\">&nbsp;</div><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">意思是当前tomcat未发布任何artifacts, 此时可以直接点击Fix添加，也可以进入Development标签，手动添加Artifacts。</span></div><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">(artifact是工程的项目输出，可以是JAR包，WAR包,，EAR包或Exploded，项目创建后会默认添加Exploded的artifact，可以直接部署在tomcat上。官方解释：</span><a href=\"http://www.jetbrains.com/idea/webhelp/artifact.html\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">http://www.jetbrains.com/idea/webhelp/artifact.html</span></a><span style=\"font-family:Microsoft YaHei;font-size:16px;\">。如果没有默认生成，可以右击项目，Open Module Settings，进入Artifacts的tab下，新建Web Application: Exploded。)</span></div><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">添加后，对应的应用就部署到了tomcat服务器上，此时就可以启动tomcat运行应用了。</span></div><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;\"><br /><span style=\"font-size:16px;\"></span></span></div><div><br /></div><p dir=\"ltr\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\"></span>&nbsp;</p>', '1', '1', '2014-01-20 19:12:39', '2014-01-20 19:19:50', '1322', '0', '1', '1', null, null, null);
INSERT INTO `tech_blog_article` VALUES ('13', 'IntelliJ Idea初体验', '<div><span style=\"font-family:Microsoft YaHei;font-size:16px;color:#000000;WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; FLOAT: none; LETTER-SPACING: normal; WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IntelliJ Idea是JetBrains公司的产品，是公认最好的Java IDE之一，除了作为Java的IDE，在Groovy，Javascript，python等语言的开发上，Idea也变得越来越流行。其实个人认为eclipse已经够强大够好用了，平时也用惯了eclipse，快捷键什么的也用得风生水起。但最近身边有人推荐IntelliJ Idea，我便稍微去了解了一下这个工具的口碑，大多程序猿普通认为它速度快，UI好，框架和版本控制工具的整合都非常优秀，于是我也想试试转到Idea上做开发。下面总结一下我使用IntelliJ Idea的初体验</span></div><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><br /></div><h3 style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><strong>1. UI界面<br /></strong></h3><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">下载了IntelliJ Idea 13版本，打开之后给我的感觉就是UI确实做得十分优秀，相比eclipse有些高大上的感觉。</span></div><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-size:16px;\"></span>&nbsp;</div><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-size:16px;\"><img alt=\"\" src=\"http://www.charlestech.org/xheditor_img/20140120/010b3874-4c9e-416b-bbaf-82b9b3dc8250.png\" /><br /></span></div><span style=\"font-family:Microsoft YaHei;\"></span><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">Idea的初始化界面并不是酷炫的黑色，而是比较朴素的白色背景，怎么修改呢？很简单：</span></div><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">进入File - Settings，在IDE Settings下找到Appearance，选择主题Theme为“Darcula”</span></div><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\"></span></div><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-size:16px;\"></span>&nbsp;</div><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-size:16px;\"><img alt=\"\" src=\"http://www.charlestech.org/xheditor_img/20140120/a027049b-8c91-417d-8d6d-c78fc7bd216d.png\" /><br /></span></div><span style=\"font-family:Microsoft YaHei;\"></span><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">同样在IDE Settings下，展开Editors选项，可以设置编辑器的其他选项，例如字体、大小等等。</span></div><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:微软雅黑;font-size:16px;\"></span>&nbsp;</div><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-size:16px;\"><br /><span style=\"font-family:Microsoft YaHei;\"></span></span></div><h3 style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><strong>2. 初始化配置</strong></h3><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">一般我使用IDE，喜欢先做一些初始化配置，例如配置代码模板，这个同样是在IDE Settings中可以找到。</span></div><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">找到File and Code Templates，在templates的tab下就可以设置各种文件的代码模板。</span></div><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">例如：我习惯让IDE在创建类的时候，初始化一些注释。只要在templates下找到Class，把注释内容添加到&quot;public class ...&quot;之上就可以了：</span></div><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\"></span></div><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-size:16px;\"></span>&nbsp;</div><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-size:16px;\"><img alt=\"\" src=\"http://www.charlestech.org/xheditor_img/20140120/1475078b-53b6-4142-8a6f-d6254524c282.png\" /><br /></span></div><span style=\"font-family:Microsoft YaHei;\"></span><h3 style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><strong>3. 常用快捷键</strong></h3><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">IDE的快捷键对开发人员来说还是比较重要的，熟悉一个IDE快捷键可以一定程度上提高开发人员的效率。下面列一下一些比较常用的基础快捷键：</span></div><ul><li><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0px 0px 10px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\"></span><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0px 0px 10px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">Ctrl+Shift+N <span style=\"font-family:微软雅黑;font-size:16px;\">查找类</span></span></div></div></li><li><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0px 0px 10px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\"></span><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0px 0px 10px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><span style=\"font-family:微软雅黑;font-size:16px;\">Ctrl+Shift+N 查找文件</span>&nbsp;</span></div></div></li><li><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0px 0px 10px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:微软雅黑;font-size:16px;\">Ctrl+Alt+L&nbsp; 格式化代码&nbsp;&nbsp;</span></div></li><li><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0px 0px 10px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">Ctrl+P 方法参数提示&nbsp;</span></div></li><li><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0px 0px 10px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">Ctrl+Shift+上/下 &nbsp; &nbsp; 移动代码到上一行或下一行，若光标在方法声明上，将会移动整个方法到前一个方法之上</span></div></li><li><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0px 0px 10px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">Ctrl+X 删除行</span></div></li><li><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0px 0px 10px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">Ctrl+D 复制行</span></div></li><li><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0px 0px 10px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">Alt+1 快速打开或隐藏Project面板</span></div></li><li><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0px 0px 10px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">F2 &nbsp; &nbsp; 快速定位到错误位置</span></div></li><li><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0px 0px 10px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">调试：</span></div></li><ul><li><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0px 0px 10px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">F8 Step over</span></div></li><li><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0px 0px 10px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">F7 Step into</span></div></li><li><div style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0px 0px 10px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">F9 Resume</span></div></li></ul></ul><p style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0px 0px 10px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:微软雅黑;font-size:16px;\"></span>&nbsp;</p><p style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0px 0px 10px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><strong>4. 创建J2EE工程</strong></p><p style=\"WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0px 0px 10px; FONT: medium Tahoma; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px\"><span style=\"font-family:微软雅黑;font-size:16px;\">Idea下常见J2EE工程和eclipse还是有很大区别的，这部分我单独在另外一篇文章中总结，可以进入<a href=\"http://www.charlestech.org/view_article.shtml?uid=ZWEXSDARQC60\">这里</a>查看</span><br /></p>', '1', '1', '2014-01-20 19:19:03', '2014-01-20 19:21:35', '1309', '0', '1', '1', null, null, null);
INSERT INTO `tech_blog_article` VALUES ('14', '《爸爸去哪儿》粘土Q版公仔设计 萌到不得了', '<p>转自7号人原创作品，原文地址：<a href=\"http://www.zcool.com.cn/work/ZMjg2MDc2OA==.html\" target=\"_blank\">http://www.zcool.com.cn/work/ZMjg2MDc2OA==.html</a></p><p><br /></p><p><span style=\"color: rgb(97, 97, 97); font-family: Verdana, 宋体, Helvetica, sans-serif; font-size: 14px; line-height: 24px;\"><span style=\"white-space:pre\">	</span>有些节目能火是因为巧合、有些是因为金元炒作、还有些是因为火爆火辣，而爸爸去哪儿真的是因为真实。在我们眼前的只有父子，没有明星。很被节目感动，用了2个星期的时间，创作了节目的Q版公仔形象，用粘土来制作节目的形象真是相当贴切。呵呵,粘土大爱。 喜欢粘土的亲 欢迎关注我的新浪微博@7号人的粘土世界。</span></p><ul style=\"margin: 0px; padding: 0px; list-style: none; color: rgb(97, 97, 97); font-family: Verdana, 宋体, Helvetica, sans-serif; font-size: 16px; line-height: 25.600000381469727px;\"><li style=\"margin: 20px auto 0px; padding: 0px; text-align: center; width: 900px; overflow: hidden;\"><div style=\"text-align: left;\"><img id=\"_list_img_0\" class=\"mb10\" src=\"http://image.zcool.com.cn/2013/49/23/m_1384958551284.jpg\" alt=\"查看《7号人——《爸爸去哪儿》粘土Q版公仔设计 萌到不得了》原图，原图尺寸：800x880\" width=\"600\" height=\"580\" style=\"border: 0px; margin-bottom: 10px;\" /></div><div class=\"wsDes\" style=\"text-align: left; padding: 0px 0px 10px; line-height: 22px;\"><p class=\"f14\" style=\"margin: 0px; padding: 0px; font-size: 14px;\"></p></div></li><li style=\"margin: 20px auto 0px; padding: 0px; text-align: center; width: 900px; overflow: hidden;\"><div style=\"text-align: left;\"><img id=\"_list_img_1\" class=\"mb10\" src=\"http://image.zcool.com.cn/2013/25/45/m_1384958610530.jpg\" alt=\"查看《7号人——《爸爸去哪儿》粘土Q版公仔设计 萌到不得了》原图，原图尺寸：800x762\" style=\"border: 0px; margin-bottom: 10px;\" width=\"600\" height=\"562\" /></div><div class=\"wsDes\" style=\"text-align: left; padding: 0px 0px 10px; line-height: 22px;\"><p class=\"f14\" style=\"margin: 0px; padding: 0px; font-size: 14px;\"></p></div></li><li style=\"margin: 20px auto 0px; padding: 0px; text-align: center; width: 900px; overflow: hidden;\"><div style=\"text-align: left;\"><img id=\"_list_img_2\" class=\"mb10\" src=\"http://image.zcool.com.cn/2013/26/0/m_1384958552696.jpg\" alt=\"查看《7号人——《爸爸去哪儿》粘土Q版公仔设计 萌到不得了》原图，原图尺寸：800x476\" style=\"border: 0px; margin-bottom: 10px;\" width=\"600\" height=\"376\" /></div><div class=\"wsDes\" style=\"text-align: left; padding: 0px 0px 10px; line-height: 22px;\"><p class=\"f14\" style=\"margin: 0px; padding: 0px; font-size: 14px;\"></p></div></li><li style=\"margin: 20px auto 0px; padding: 0px; text-align: center; width: 900px; overflow: hidden;\"><div style=\"text-align: left;\"><img id=\"_list_img_3\" class=\"mb10\" src=\"http://image.zcool.com.cn/2013/37/3/m_1384958624173.jpg\" alt=\"查看《7号人——《爸爸去哪儿》粘土Q版公仔设计 萌到不得了》原图，原图尺寸：800x865\" style=\"border: 0px; margin-bottom: 10px;\" width=\"600\" height=\"665\" /></div><div class=\"wsDes\" style=\"text-align: left; padding: 0px 0px 10px; line-height: 22px;\"><p class=\"f14\" style=\"margin: 0px; padding: 0px; font-size: 14px;\"></p></div></li><li style=\"margin: 20px auto 0px; padding: 0px; text-align: center; width: 900px; overflow: hidden;\"><div style=\"text-align: left;\"><img id=\"_list_img_4\" class=\"mb10\" src=\"http://image.zcool.com.cn/2013/48/51/m_1384958551632.jpg\" alt=\"查看《7号人——《爸爸去哪儿》粘土Q版公仔设计 萌到不得了》原图，原图尺寸：800x415\" style=\"border: 0px; margin-bottom: 10px;\" width=\"600\" height=\"315\" /></div><div class=\"wsDes\" style=\"text-align: left; padding: 0px 0px 10px; line-height: 22px;\"><p class=\"f14\" style=\"margin: 0px; padding: 0px; font-size: 14px;\"></p></div></li><li style=\"margin: 20px auto 0px; padding: 0px; text-align: center; width: 900px; overflow: hidden;\"><div style=\"text-align: left;\"><img id=\"_list_img_5\" class=\"mb10\" src=\"http://image.zcool.com.cn/2013/18/19/m_1384958624117.jpg\" alt=\"查看《7号人——《爸爸去哪儿》粘土Q版公仔设计 萌到不得了》原图，原图尺寸：800x755\" style=\"border: 0px; margin-bottom: 10px;\" width=\"600\" height=\"555\" /></div><div class=\"wsDes\" style=\"text-align: left; padding: 0px 0px 10px; line-height: 22px;\"><p class=\"f14\" style=\"margin: 0px; padding: 0px; font-size: 14px;\"></p></div></li><li style=\"margin: 20px auto 0px; padding: 0px; text-align: center; width: 900px; overflow: hidden;\"><div style=\"text-align: left;\"><img id=\"_list_img_6\" class=\"mb10\" src=\"http://image.zcool.com.cn/2013/27/55/m_1384958608223.jpg\" alt=\"查看《7号人——《爸爸去哪儿》粘土Q版公仔设计 萌到不得了》原图，原图尺寸：800x476\" style=\"border: 0px; margin-bottom: 10px;\" width=\"600\" height=\"376\" /></div><div class=\"wsDes\" style=\"text-align: left; padding: 0px 0px 10px; line-height: 22px;\"><p class=\"f14\" style=\"margin: 0px; padding: 0px; font-size: 14px;\"></p></div></li><li style=\"margin: 20px auto 0px; padding: 0px; text-align: center; width: 900px; overflow: hidden;\"><div style=\"text-align: left;\"><img id=\"_list_img_7\" class=\"mb10\" src=\"http://image.zcool.com.cn/2013/30/62/m_1384958621386.jpg\" alt=\"查看《7号人——《爸爸去哪儿》粘土Q版公仔设计 萌到不得了》原图，原图尺寸：800x747\" style=\"border: 0px; margin-bottom: 10px;\" width=\"600\" height=\"547\" /></div><div class=\"wsDes\" style=\"text-align: left; padding: 0px 0px 10px; line-height: 22px;\"><p class=\"f14\" style=\"margin: 0px; padding: 0px; font-size: 14px;\"></p></div></li><li style=\"margin: 20px auto 0px; padding: 0px; text-align: center; width: 900px; overflow: hidden;\"><div style=\"text-align: left;\"><img id=\"_list_img_8\" class=\"mb10\" src=\"http://image.zcool.com.cn/2013/48/1/m_1384958631946.jpg\" alt=\"查看《7号人——《爸爸去哪儿》粘土Q版公仔设计 萌到不得了》原图，原图尺寸：800x880\" style=\"border: 0px; margin-bottom: 10px;\" width=\"600\" height=\"680\" /></div><div class=\"wsDes\" style=\"text-align: left; padding: 0px 0px 10px; line-height: 22px;\"><p class=\"f14\" style=\"margin: 0px; padding: 0px; font-size: 14px;\"></p></div></li><li style=\"margin: 20px auto 0px; padding: 0px; text-align: center; width: 900px; overflow: hidden;\"><div style=\"text-align: left;\"><img id=\"_list_img_9\" class=\"mb10\" src=\"http://image.zcool.com.cn/2013/5/2/m_1384958599452.jpg\" alt=\"查看《7号人——《爸爸去哪儿》粘土Q版公仔设计 萌到不得了》原图，原图尺寸：800x274\" style=\"border: 0px; margin-bottom: 10px;\" width=\"600\" height=\"200\" /></div><div class=\"wsDes\" style=\"text-align: left; padding: 0px 0px 10px; line-height: 22px;\"><br /><p class=\"f14\" style=\"margin: 0px; padding: 0px; font-size: 14px;\"></p></div></li></ul><br /><p></p>', '7', '1', '2014-01-22 10:05:50', '2014-01-22 10:21:36', '28', '0', '0', '1', null, null, null);
INSERT INTO `tech_blog_article` VALUES ('15', '初识Webservice', '<h2><span style=\"font-family:Microsoft YaHei;font-size:16px;\">1. &nbsp;什么是Webservice</span></h2><p><span style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><span style=\"white-space: pre;\"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Webservice是基于web的服务，接受和相应外部系统的请求，为远程系统提供服务，从而实现不同系统之间的交互。举个简单的例子，系统A中需要实现某一个功能，而该功能在系统B中已经实现，并且系统B对外提供该功能的webservice，此时系统A可以向B发送服务请求，系统B处理请求后返回结果给A。</span></span></p><p><span style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 或者如果现在你要做一个app，需要定位当前用户的位置实现LBS服务，这种服务当然不可能也没必要自己去实现，因为已经互联网上已经有很多成熟的LBS服务供调用，这些服务都是webservice。</span></span><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><br /></span>&nbsp;</p><h2><span style=\"font-family:Microsoft YaHei;font-size:16px;\">2. Webservice的特点</span></h2><p><span style=\"font-family:\'Microsoft YaHei\';font-size:16px;orphans: 2; widows: 2;\">（1） Webservice以HTTP POST方式传输数据，不用GET<br /></span><span style=\"font-family:\'Microsoft YaHei\';font-size:16px;orphans: 2; widows: 2;\">（2） Webservice采用SOAP协议规范交换数据<br /></span><span style=\"font-family:\'Microsoft YaHei\';font-size:16px;orphans: 2; widows: 2;\">（3） Webservice采用WSDL描述服务接口</span></p><div style=\"orphans: 2; widows: 2;\"><span style=\"font-family:\'Microsoft YaHei\';font-size:16px;\"></span><div><br /></div><h2><span style=\"font-family:Microsoft YaHei;font-size:16px;\">3. Webservice体系结构</span></h2></div><div style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">（1）Webserive拥有三要素：</span></div><div style=\"orphans: 2; widows: 2;\"><ol><li><span style=\"font-family:Microsoft YaHei;font-size:16px;\">SOAP(Simple Object Acess Protocol)，简单数据访问协议。服务请求的协议规范，SOAP定义了一个基于XML的框架，描述通信消息的来源、内容、以及对象等等</span></li><li><span style=\"font-family:Microsoft YaHei;font-size:16px;\">UDDI(Universal Description, Discovery and Integration)，通用描述、发现和集成服务。目录服务，提供webservice的注册和发现机制。服务请求客户端向UDDI发送查询请求，UDDI会查询已注册的webservice从而返回具体的服务WSDL。</span></li><li><span style=\"font-family:Microsoft YaHei;font-size:16px;\">WSDL(Web Service Description Language)，Web服务描述语言。WSDL是一种基于XML的接口描述语言，用来描述webservice的接口信息等</span></li></ol><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><br /></span></div><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\">（2）Webservice原理</span></div></div><div style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">Webservice架构的系统一般有三个成员：</span></div><div style=\"orphans: 2; widows: 2;\"><ol><li><span style=\"font-family:Microsoft YaHei;font-size:16px;\">服务提供者。Web服务的拥有者，对外部系统提供webservice接口</span></li><li><span style=\"font-family:Microsoft YaHei;font-size:16px;\">服务中介者。提供web服务的注册和发现服务，一般是UDDI</span></li><li><span style=\"font-family:Microsoft YaHei;font-size:16px;\">服务请求者。请求web服务的客户端。</span></li></ol><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\">Web service体系架构图：</span></div></div><div style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><img alt=\"\" src=\"http://www.charlestech.org/xheditor_img/20140131/df72e5ea-351b-4eb4-8417-82bfab23662a.png\" /><br /></span></div><div style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\"></span>&nbsp;</div><div style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><br /></span></div><div style=\"orphans: 2; widows: 2;\"><ol><li><span style=\"font-family:Microsoft YaHei;font-size:16px;\">服务提供者设计好web服务，在UDDI上进行注册，这个过程称为发布</span></li><li><span style=\"font-family:Microsoft YaHei;font-size:16px;\">服务请求者向UDDI发送请求，查找指定的webservice</span></li><li><span style=\"font-family:Microsoft YaHei;font-size:16px;\">UDDI向server返回服务接口信息(WSDL)给请求者，这个过程称为发现</span></li><li><span style=\"font-family:Microsoft YaHei;font-size:16px;\">服务请求者根据WSDL封装请求消息(SOAP)，向指定的服务提供者发送请求，这个过程称为绑定</span></li><li><span style=\"font-family:Microsoft YaHei;font-size:16px;\">服务提供者执行服务请求，返回结果给请求者</span></li></ol></div>', '11', '1', '2014-01-31 11:22:21', '2014-02-02 20:09:25', '1406', '0', '1', '1', null, null, null);
INSERT INTO `tech_blog_article` VALUES ('16', 'WSDL文档详解', '<h3><span style=\"font-family:Microsoft YaHei;font-size:16px;\">1. 什么是WSDL</span></h3><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WSDL(Web Service Description Language)，Web服务描述语言。WSDL是基于XML的web接口描述语言，用来描述Web服务和如何与Web服务进行通信，相当于一个接口说明文件。</span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">&nbsp;</span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">&nbsp;</span></div><h3 style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><strong><span style=\"font-family:Microsoft YaHei;font-size:16px;\">2. WSDL文档结构</span></strong></h3><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 一个WSDL文档的主要结构如下，</span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><pre class=\"brush: js;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">&lt;definitions&gt;\n\n&lt;types&gt;\n   definition of types........\n&lt;/types&gt;\n\n&lt;message&gt;\n   definition of a message....\n&lt;/message&gt;\n\n&lt;portType&gt;\n   definition of a port.......\n&lt;/portType&gt;\n\n&lt;binding&gt;\n   definition of a binding....\n&lt;/binding&gt;\n\n&lt;/definitions&gt;</span></pre></div><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\">WSDL 文档可包含其它的元素，比如 extension 元素，以及一个 service 元素，此元素可把若干个 web services 的定义组合在一个单一的 WSDL 文档中。</span></div><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\">&nbsp;</span></div><h3><span style=\"font-family:Microsoft YaHei;font-size:16px;\">3. WSDL文档主要元素</span></h3><div><div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">（1） &lt;wsdl:types&gt;用来定义各个接口的输入和输出参数的数据类型。</span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><ul><li><span style=\"font-family:Microsoft YaHei;font-size:16px;\">types的定义使用的是XML Schema定义的方式。一个类型的说明由一个&lt;xsd:element&gt;来组织。关于XML Shema Definition的教程可以参考</span><a href=\"http://www.w3school.com.cn/schema/index.asp\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">http://www.w3school.com.cn/schema/index.asp</span></a></li><li><span style=\"font-family:Microsoft YaHei;font-size:16px;\">一个接口一般需要在types中定义两个复合类型，一个是输入参数的复合类型，一个是输出参数的复合类型，</span></li><li><span style=\"font-family:Microsoft YaHei;font-size:16px;\">示例：接口方法double add(int a, int b)，数据类型定义如下，</span></li></ul></div><pre class=\"brush: js;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">&lt;xsd:element name=&quot;add&quot;&gt;\n	&lt;xsd:complexType&gt;\n		&lt;xsd:sequence&gt;\n			&lt;xsd:element maxOccurs=&quot;1&quot; minOccurs=&quot;1&quot; name=&quot;in0&quot; type=&quot;xsd:double&quot;/&gt;\n			&lt;xsd:element maxOccurs=&quot;1&quot; minOccurs=&quot;1&quot; name=&quot;in1&quot; type=&quot;xsd:double&quot;/&gt;\n		&lt;/xsd:sequence&gt;\n	&lt;/xsd:complexType&gt;\n&lt;/xsd:element&gt;\n&lt;xsd:element name=&quot;addResponse&quot;&gt;\n	&lt;xsd:complexType&gt;\n		&lt;xsd:sequence&gt;\n			&lt;xsd:element maxOccurs=&quot;1&quot; minOccurs=&quot;1&quot; name=&quot;out&quot; type=&quot;xsd:double&quot;/&gt;\n		&lt;/xsd:sequence&gt;\n	&lt;/xsd:complexType&gt;\n&lt;/xsd:element&gt;\n</span></pre><div style=\"font-family: monospace; font-size: 13px;\"><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\">复合类型&quot;add&quot;中定义了输入参数的两个类型，复合类型&quot;addResponse&quot;定义了输出参数的类型。其中，&lt;xsd:sequence&gt;元素是用来指定类型元素的顺序必须和声明的一致。</span></div><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\">&nbsp;</span></div></div><div><br /><span style=\"font-family:Microsoft YaHei;font-size:16px;\"></span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">（2） &lt;wsdl:message&gt;用来定义各个接口的消息部件，</span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><ul><li><span style=\"font-family:Microsoft YaHei;font-size:16px;\">通常一个接口有两个消息部件，一个是request，代表请求消息，一个是response，代表相应消息。例如sayHello这个接口，一般需要为其定义sayHelloRequest作为输入消息，sayHelloResponse作为输出消息。</span></li><li><span style=\"font-family:Microsoft YaHei;font-size:16px;\">消息的数据结构是使用types中定义的类型元素。</span></li><li><span style=\"font-family:Microsoft YaHei;font-size:16px;\">示例：接口方法double add(int a, int b)，消息定义如下，</span></li></ul><div style=\"font-family: monospace; font-size: 13px;\"><div><pre class=\"brush: js;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">&lt;wsdl:message name=&quot;addRequest&quot;&gt;\n	&lt;wsdl:part name=&quot;parameters&quot; element=&quot;tns:add&quot;/&gt;\n&lt;/wsdl:message&gt;\n&lt;wsdl:message name=&quot;addResponse&quot;&gt;\n	&lt;wsdl:part name=&quot;parameters&quot; element=&quot;tns:addResponse&quot;/&gt;\n&lt;/wsdl:message&gt;\n</span></pre><br /></div></div><div><br /><span style=\"font-family:Microsoft YaHei;font-size:16px;\"></span></div></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">（3）&lt;wsdl:portType&gt;是最重要的元素，用来描述当前webservice可被调用的操作(operation)集合及其相关信息，相当于该webservice所有接口的函数库。</span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><ul><li><span style=\"font-family:Microsoft YaHei;font-size:16px;\">portType由若干个&lt;wsdl:operation&gt;组成，每个operation代表一个可被调用接口的操作描述，定义了访问接口的请求/相应消息对。请求消息由&lt;wsdl:input name=&quot;*&quot; message=&quot;*&quot;/&gt;来组织，相应消息由&lt;wsdl:output name=&quot;*&quot; message=&quot;*&quot;/&gt;来组织。</span></li><li><span style=\"font-family:Microsoft YaHei;font-size:16px;\">示例：webservice提供double add(int a, int b)和double minus(int a, int b)两个接口，portType定义如下，</span></li></ul><div style=\"font-family: monospace; font-size: 13px;\"><pre class=\"brush: js;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">&lt;wsdl:portType name=&quot;ComputerServicePortType&quot;&gt;\n	&lt;wsdl:operation name=&quot;minus&quot;&gt;\n		&lt;wsdl:input name=&quot;minusRequest&quot; message=&quot;tns:minusRequest&quot;/&gt;\n		&lt;wsdl:output name=&quot;minusResponse&quot; message=&quot;tns:minusResponse&quot;/&gt;\n	&lt;/wsdl:operation&gt;\n	&lt;wsdl:operation name=&quot;add&quot;&gt;\n		&lt;wsdl:input name=&quot;addRequest&quot; message=&quot;tns:addRequest&quot;/&gt;\n		&lt;wsdl:output name=&quot;addResponse&quot; message=&quot;tns:addResponse&quot;/&gt;\n	&lt;/wsdl:operation&gt;\n&lt;/wsdl:portType&gt;\n</span></pre><br /></div></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><br /><span style=\"font-family:Microsoft YaHei;font-size:16px;\"></span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">（4） &lt;wsdl:binding&gt;描述web服务与具体协议之间的绑定。通过binding可将portType绑定到具体的协议上。</span></div><div style=\"font:/normal Tahoma; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\"><ul><li><span style=\"font-family:Microsoft YaHei;\"><span style=\"font-size:16px;\">WSDL是基于XML的，具有平台无关性，支持多种协议。可绑定的协议有SOAP, HTTP, SMTP, FTP等等，<strong>一般情况下会使用SOAP作为绑定协议</strong></span></span></li><li><span style=\"font-family:Microsoft YaHei;font-size:16px;\">&lt;wsdl:binding&gt;由一个全局&lt;wsdlsoap:binding&gt;绑定和若干个&lt;wsdl:operation&gt;具体绑定组成</span></li><li><span style=\"font-family:Microsoft YaHei;\"><span style=\"font-size:16px;\">&lt;wsdl:binding&gt;可指定style属性，用来规定请求和相应的消息格式，style有两种取值：<strong>rpc</strong>和<strong>document</strong></span></span></li></ul><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><strong>如果全局的&lt;wsdlsoap:binding&gt;指定了style，那么该绑定下所有的operation都是默认使用这种style，如果operation也有指定的style，该operation就使用自己指定的style。如果都没有指定，默认为document。</strong></span></div><div><br /><span style=\"font-family:Microsoft YaHei;font-size:16px;\"></span></div><ul><li><span style=\"font-family:Microsoft YaHei;font-size:16px;\">&lt;wsdl:operation&gt;由一个&lt;wsdlsoap:operation soapAction=&quot;*&quot;&gt;和&lt;wsdl:input&gt;, &lt;wsdl:output&gt;组成，&lt;wsdl:input&gt;和&lt;wsdl:output&gt;中的&lt;wsdlsoap:body use=&quot;*&quot;&gt;描述请求和相应消息的编码，有两种方式：encoded和literal</span></li></ul><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\">&nbsp;</span></p><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\">（5） &lt;wsdl:service&gt;描述所有对外提供服务的portType集合以及其具体的协议binding和service地址。</span></div><div><ul><li><span style=\"font-family:Microsoft YaHei;font-size:16px;\">&lt;wsdl:service&gt;由若干个&lt;wsdl:port&gt;组成，每个port标签需要指定portType的name和binding</span></li><li><span style=\"font-family:Microsoft YaHei;font-size:16px;\">每个&lt;wsdl:port&gt;下通过&lt;wsdlsoap:address location=&quot;*&quot;&gt;指定服务的URL</span></li><li><span style=\"font-family:Microsoft YaHei;font-size:16px;\">示例：webservice提供SayHelloPortType和SayGoodbyePortType两个operation集合，service定义如下，</span></li></ul></div></div></div></div><div><pre class=\"brush: js;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">&lt;wsdl:service&gt;\n     &lt;wsdl:port name=&quot;SayHelloPortType&quot; binding=&quot;SayHelloHttpBinding&quot;&gt;\n          &lt;wsdlsoap:address location=&quot;http://locahost:8080/service/SayHello&quot; /&gt;\n     &lt;/wsdl:port&gt;\n     &lt;wsdl:port name=&quot;SayGoodbyePortType&quot; binding=&quot;SayGoodbyeHttpBinding&quot;&gt;\n          &lt;wsdlsoap:address location=&quot;http://locahost:8080/service/SayGoodbye&quot; /&gt;\n     &lt;/wsdl:port&gt;\n&lt;/wsdl:service&gt;\n</span></pre></div><div><br /><span style=\"font-family:Microsoft YaHei;font-size:16px;\">&nbsp;</span></div><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\">&nbsp;</span></p>', '11', '1', '2014-01-31 11:40:28', '2014-02-02 20:09:14', '1830', '1', '1', '1', null, null, null);
INSERT INTO `tech_blog_article` VALUES ('17', '8个对程序员来说有用的jQuery小贴士和技巧', '<p><span style=\"font-family:Microsoft YaHei;\"><span style=\"font-size:12px;\">原文出处：<a href=\"http://bbs.html5cn.org/thread-79045-1-1.html\" target=\"_blank\">http://bbs.html5cn.org/thread-79045-1-1.html</a></span><br /><br /></span></p><p><span style=\"font-size:16px;\"><strong><span style=\"font-family:Microsoft YaHei;\">1) 禁用鼠标右键单击</span></strong></span></p><span style=\"font-family:Microsoft YaHei;\"><span style=\"font-size:16px;\">jQuery程序员可以使用此代码在网页上禁用鼠标右键点击。</span><br /><br /></span><pre class=\"brush: js;\"><span style=\"font-size:16px;\">$(document).ready(function() {\n    //catch the right-click context menu\n    $(document).bind(&quot;contextmenu&quot;,function(e) {                \n        //warning prompt - optional\n        alert(&quot;No right-clicking!&quot;);\n\n        //delete the default context menu\n        return false;\n    });\n});</span></pre><br /><br /><span style=\"font-size:16px;\"><strong>2) 利用jQuery调整文字大小<br /></strong>使用此代码，用户可以重新<a class=\"relatedlink\" href=\"http://www.html5cn.org/\" target=\"_blank\">网站</a>上文字的大小（增大和减少）</span><br /><span style=\"font-size:16px;\"><br /></span><pre class=\"brush: js;\"><span style=\"font-size:16px;\">$(document).ready(function() {\n    //find the current font size\n    var originalFontSize = $(\'html\').css(\'font-size\');\n    //Increase the text size\n    $(&quot;.increaseFont&quot;).click(function() {\n        var currentFontSize = $(\'html\').css(\'font-size\');\n        var currentFontSizeNumber = parseFloat(currentFontSize, 10);\n        var newFontSize = currentFontSizeNumber*1.2;\n        $(\'html\').css(\'font-size\', newFontSize);\n        return false;\n    });\n    //Decrease the Text Size\n    $(&quot;.decreaseFont&quot;).click(function() {\n        var currentFontSize = $(\'html\').css(\'font-size\');\n        var currentFontSizeNum = parseFloat(currentFontSize, 10);\n\n        var newFontSize = currentFontSizeNum*0.8;\n        $(\'html\').css(\'font-size\', newFontSize);\n        return false;\n    });\n    // Reset Font Size\n    $(&quot;.resetFont&quot;).click(function(){\n    $(\'html\').css(\'font-size\', originalFontSize);\n  });\n});</span></pre><br /><br /><span style=\"font-size:16px;\"><strong>3) 在新的Windows打开链接<br /></strong></span><pre class=\"brush: js;\"><span style=\"font-size:16px;\">// Try this code and increase your site impressions because using this jquery code users will go on new window after clicking on any link of your site. Code is below: -\n\n$(document).ready(function() {\n    //select all anchor tags that have http in the href\n    //and apply the target=_blank\n    $(&quot;a[href^=\'http\']&quot;).attr(\'target\',\'_blank\');\n});</span></pre><br /><br /><span style=\"font-size:16px;\"><strong>4) Style Sheets Swap</strong><br /> Swap style sheets using this code and the “Style sheets swap” script&nbsp;&nbsp;is below: -</span><br /><br /><pre class=\"brush: js;\"><span style=\"font-size:16px;\">$(document).ready(function() {\n    $(&quot;a.cssSwap&quot;).click(function() {\n        //swap the link rel attribute with the value in the rel   \n        $(\'link[rel=stylesheet]\').attr(\'href\' , $(this).attr(\'rel\'));\n    });\n});</span></pre><br /><br /><span style=\"font-size:16px;\"><strong>5) 回到顶部链接</strong><br />That is very common function you can see on eve site nowadays is ” Back to Top”. This functionality is very useful for long pages for make short in a single click. Visit this code below: -</span><br /><span style=\"font-size:16px;\"><br /></span><pre class=\"brush: js;\"><span style=\"font-size:16px;\">$(document).ready(function() {\n    //when the id=&quot;top&quot; link is clicked\n    $(\'#top\').click(function() {\n        //scoll the page back to the top\n        $(document).scrollTo(0,500);\n    }\n});</span></pre><br /><br /><span style=\"font-size:16px;\"><strong>6) 获取鼠标光标的x和y轴<br /></strong>You can find the values of X and Y coordinator of mouse pointer. Code is blow : -</span><br /><span style=\"font-size:16px;\"><br /></span><pre class=\"brush: js;\"><span style=\"font-size:16px;\">$().mousemove(function(e){\n    //display the x and y axis values inside the P element\n    $(\'p\').html(&quot;X Axis : &quot; + e.pageX + &quot; | Y Axis &quot; + e.pageY);\n});</span></pre><br /><br /><span style=\"font-size:16px;\"><strong>7) 检测当前鼠标坐标</strong><br /> 使用这个脚本，你可以在jQuery所支持的任何Web浏览器找到当前鼠标的坐标。代码如下：</span><br /><br /><pre class=\"brush: js;\"><span style=\"font-size:16px;\">$(document).ready(function() {\n<span style=\"white-space:pre\">	</span>$().mousemove(function(e){\n<span style=\"white-space:pre\">		</span>$(\'# MouseCoordinates \').html(&quot;X Axis Position = &quot; + e.pageX + &quot; and Y Axis Position = &quot; + e.pageY);\n<span style=\"white-space:pre\">	</span>});\n});</span></pre><br /><br /><span style=\"font-size:16px;\"><strong>8) 在jQuery中预加载图片</strong><br /> 此图像预加载的脚本有助于非常快速加载图像或网页。你不必等待图像加载。代码：</span><br /><br /><pre class=\"brush: js;\"><span style=\"font-size:16px;\">jQuery.preloadImagesInWebPage = function(){\n<span style=\"white-space:pre\">	</span>for(var ctr = 0; ctr&lt;arguments.length; ctr++){\n<span style=\"white-space:pre\">		</span>jQuery(&quot;&lt;img alt=&quot;&quot;&gt;&quot;).attr(&quot;src&quot;, arguments[ctr]);\n<span style=\"white-space:pre\">	</span>}\n}\n// To use the above method, you can use the following piece of code:\n$.preloadImages(&quot;image1.gif&quot;, &quot;image2.gif&quot;, &quot;image3.gif&quot;);\n// To check whether an image has been loaded, you can use the following piece of code:\n$(\'#imageObject\').attr(\'src\', \'image1.gif\').load(function() {\n<span style=\"white-space:pre\">	</span>alert(\'The image has been loaded…\');\n});</span></pre><br /><br /><br />', '1', '1', '2014-03-03 18:00:27', '2014-03-03 18:05:14', '930', '0', '1', '1', null, null, null);
INSERT INTO `tech_blog_article` VALUES ('18', '10G整数文件中寻找中位数', '<p><strong><span style=\"color: rgb(255, 0, 0);\">题目：在一个文件中有 10G 个整数，乱序排列，要求找出中位数。内存限制为 2G。只写出思路即可（内存限制为  2G的意思就是，可以使用2G的空间来运行程序，而不考虑这台机器上的其他软件的占用内存）。</span> </strong> </p><p>&nbsp;</p><p>&nbsp;</p><p><span style=\"color: rgb(128, 0, 128);\">分析：</span> <span style=\"color: rgb(128, 0, 128);\">既然要找中位数，很简单就是排序的想法。那么基于字节的桶排序是一个可行的方法</span> （请见《<a href=\"http://hxraid.iteye.com/blog/647759\">桶排序</a> 》）：<br /><br /> 思想：将整形的每1byte作为一个关键字，也就是说一个整形可以拆成4个keys，而且最高位的keys越大，整数越大。如果高位keys相同，则比较次高位的keys。整个比较过程类似于字符串的字典序。<br /><br /> 第一步:把10G整数每2G读入一次内存，然后一次遍历这536,870,912个数据。每个数据用位运算&quot;&gt;&gt;&quot;取出最高8位(31-24)。这8bits(0-255)最多表示255个桶，那么可以根据8bit的值来确定丢入第几个桶。最后把每个桶写入一个磁盘文件中，同时在内存中统计每个桶内数据的数量，自然这个数量只需要255个整形空间即可。<br /><br /><span style=\"color: rgb(0, 0, 255);\">代价：(1) 10G数据依次读入内存的IO代价(这个是无法避免的，CPU不能直接在磁盘上运算)。(2)在内存中遍历536,870,912个数据，这是一个O(n)的线性时间复杂度。(3)把255个桶写会到255个磁盘文件空间中，这个代价是额外的，也就是多付出一倍的10G数据转移的时间。</span> <br /><br /> 第二步：根据内存中255个桶内的数量，计算中位数在第几个桶中。很显然，2,684,354,560个数中位数是第1,342,177,280个。假设前127个桶的数据量相加，发现少于1,342,177,280，把第128个桶数据量加上，大于1,342,177,280。说明，中位数必在磁盘的第128个桶中。而且在这个桶的第1,342,177,280-N(0-127)个数位上。N(0-127)表示前127个桶的数据量之和。然后把第128个文件中的整数读入内存。(平均而言，每个文件的大小估计在10G/128=80M左右，当然也不一定，但是超过2G的可能性很小)。<br /><br /><span style=\"color: rgb(0, 0, 255);\">代价：(1)循环计算255个桶中的数据量累加，需要O(M)的代价，其中m&lt;255。(2)读入一个大概80M左右文件大小的IO代价。</span> <br /><br /><span style=\"color: rgb(0, 0, 255);\">注意，变态的情况下，这个需要读入的第128号文件仍然大于2G，那么整个读入仍然可以按照第一步分批来进行读取。</span> <br /><br /> 第三步：继续以内存中的整数的次高8bit进行桶排序(23-16)。过程和第一步相同，也是255个桶。<br /><br /> 第四步：一直下去，直到最低字节(7-0bit)的桶排序结束。我相信这个时候完全可以在内存中使用一次快排就可以了。</p><p>&nbsp;</p><p>&nbsp;</p><p>整个过程的时间复杂度在O(n)的线性级别上(没有任何循环嵌套)。但主要时间消耗在第一步的第二次内存-磁盘数据交换上，即10G数据分255个文件写回磁盘上。一般而言，如果第二步过后，内存可以容纳下存在中位数的某一个文件的话，直接快排就可以了。关于快排的效率，可以看看我博客中的数据《<a href=\"http://hxraid.iteye.com/blog/646760\">基于比较的内部排序总结 </a> 》。</p>', '6', '1', '2014-03-04 14:15:03', '2014-03-04 14:15:03', '1', '0', '0', '0', null, null, null);
INSERT INTO `tech_blog_article` VALUES ('19', '教你如何迅速秒杀掉：99%的海量数据处理面试题', '<p><span style=\"font-size:12px;\"><strong>作者：July</strong></span></p><p style=\"color: rgb(51, 51, 51); font-family: Arial; line-height: 26px; text-align: left; \"><span style=\"font-size:12px;\"><strong>出处：结构之法算法之道<span style=\"font-family: \'Comic Sans MS\'; \">blog</span></strong></span></p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><br /></p><h3 style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; color: rgb(51, 51, 51); font-family: Arial; line-height: 26px; text-align: left; \"><a name=\"t1\" style=\"color: rgb(51, 102, 153); \"></a>前言</h3><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp;&nbsp; 一般而言，标题含有“秒杀”，“99%”，“史上最全/最强”等词汇的往往都脱不了哗众取宠之嫌，但进一步来讲，如果读者读罢此文，却无任何收获，那么，我也甘愿背负这样的罪名，:-)，同时，此文可以看做是对这篇文章：<a target=\"_blank\" href=\"http://blog.csdn.net/v_JULY_v/archive/2011/03/26/6279498.aspx\" style=\"color: rgb(34, 0, 0); text-decoration: none; \"><span style=\"font-family: SimHei; \">十道海量数据处理面试题与十个方法大总结</span></a>的一般抽象性总结。</p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp; 毕竟受文章和理论之限，本文将摒弃绝大部分的细节，只谈方法/模式论，且注重用最通俗最直白的语言阐述相关问题。最后，有一点必须强调的是，全文行文是基于面试题的分析基础之上的，具体实践过程中，还是得具体情况具体分析，且各个场景下需要考虑的细节也远比本文所描述的任何一种解决方法复杂得多。</p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp; OK，若有任何问题，欢迎随时不吝赐教。谢谢。</p><h3 style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; color: rgb(51, 51, 51); font-family: Arial; line-height: 26px; text-align: left; \"><a name=\"t2\" style=\"color: rgb(51, 102, 153); \"></a><br />何谓海量数据处理？</h3><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp;&nbsp; 所谓海量数据处理，无非就是基于海量数据上的存储、处理、操作。何谓海量，就是数据量太大，所以导致要么是无法在较短时间内迅速解决，要么是数据太大，导致无法一次性装入内存。</p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp;&nbsp;&nbsp; 那解决办法呢?针对时间，我们可以采用巧妙的算法搭配合适的数据结构，如<span style=\"font-family: \'Comic Sans MS\'; \">Bloom filter/Hash/bit-map/堆/数据库或倒排索引/trie树</span>，针对空间，无非就一个办法：大而化小，<span style=\"font-family: \'Comic Sans MS\'; \">分而治之（hash映射）</span>，你不是说规模太大嘛，那简单啊，就把规模大化为规模小的，各个击破不就完了嘛。</p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp;&nbsp;&nbsp; 至于所谓的单机及集群问题，通俗点来讲，单机就是处理装载数据的机器有限(只要考虑cpu，内存，硬盘的数据交互)，而集群，机器有多辆，适合分布式处理，并行计算(更多考虑节点和节点间的数据交互)。</p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp;&nbsp;&nbsp; 再者，通过本blog内的有关海量数据处理的文章：<a target=\"_blank\" href=\"http://blog.csdn.net/v_july_v/article/category/1106578\" style=\"color: rgb(51, 102, 153); text-decoration: none; \"><span style=\"font-family: \'Comic Sans MS\'; \">Big Data Processing</span></a>，我们已经大致知道，处理海量数据问题，无非就是：</p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"></p><ol style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><li>分而治之/hash映射 + hash统计 + 堆/快速/归并排序；</li><li>双层桶划分</li><li>Bloom filter/Bitmap；</li><li>Trie树/数据库/倒排索引；</li><li>外排序；</li><li>分布式处理之Hadoop/Mapreduce。</li></ol><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp; 下面，本文第一部分、<span style=\"font-family: \'Comic Sans MS\'; \">从set/map谈到hashtable/hash_map/hash_set，简要介绍下set/map/multiset/multimap，及hash_set/hash_map/hash_multiset/hash_multimap之区别</span>(<span style=\"font-family: SimHei; \">万丈高楼平地起，基础最重要</span>)，而本文第二部分，则针对上述那6种方法模式结合对应的海量数据处理面试题分别具体阐述。</p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"></p><h2 style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; color: rgb(51, 51, 51); font-family: Arial; line-height: 26px; text-align: left; \"><a name=\"t3\" style=\"color: rgb(51, 102, 153); \"></a><span style=\"font-size: 14px; \">第一部分、从set/map谈到hashtable/hash_map/hash_set</span></h2><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; padding-bottom: 2px; margin-top: 4px; margin-right: 0px; margin-bottom: 4px; margin-left: 0px; padding-left: 0px; padding-right: 0px; padding-top: 2px; \">&nbsp; &nbsp; 稍后本文第二部分中将多次提到hash_map/hash_set，下面稍稍介绍下这些容器，以作为基础准备。一般来说，STL容器分两种，<br /></p><ul style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><li>序列式容器(vector/list/deque/stack/queue/heap)，</li><li>关联式容器。关联式容器又分为set(集合)和map(映射表)两大类，以及这两大类的衍生体multiset(多键集合)和multimap(多键映射表)，这些容器均以RB-tree完成。此外，还有第3类关联式容器，如hashtable(散列表)，以及以hashtable为底层机制完成的hash_set(散列集合)/hash_map(散列映射表)/hash_multiset(散列多键集合)/hash_multimap(散列多键映射表)。也就是说，set/map/multiset/multimap都内含一个RB-tree，而hash_set/hash_map/hash_multiset/hash_multimap都内含一个hashtable。</li></ul><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp; 所谓关联式容器，类似关联式数据库，每笔数据或每个元素都有一个键值(key)和一个实值(value)，即所谓的Key-Value(键-值对)。当元素被插入到关联式容器中时，容器内部结构(RB-tree/hashtable)便依照其键值大小，以某种特定规则将这个元素放置于适当位置。</p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp; &nbsp;包括在非关联式数据库中，比如，在<span style=\"font-family: \'Comic Sans MS\'; \">MongoDB内</span>，文档(document)是最基本的数据组织形式，每个文档也是以Key-Value（键-值对）的方式组织起来。一个文档可以有多个Key-Value组合，每个Value可以是不同的类型，比如String、Integer、List等等。&nbsp;<br /><span style=\"white-space: pre; \"></span><span style=\"font-family: \'Comic Sans MS\'; \">{ &quot;name&quot; : &quot;July&quot;, &nbsp;<br />&nbsp;&nbsp;<span style=\"white-space: pre; \"></span>&quot;sex&quot; : &quot;male&quot;, &nbsp;<br />&nbsp; &nbsp;<span style=\"white-space: pre; \"> </span>&quot;age&quot; : 23 } &nbsp;</span><br /></p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"></p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; padding-bottom: 2px; margin-top: 4px; margin-right: 0px; margin-bottom: 4px; margin-left: 0px; padding-left: 0px; padding-right: 0px; padding-top: 2px; \"><span style=\"font-family: \'Comic Sans MS\'; \"><strong>set/map/multiset/multimap</strong></span></p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp; set，同map一样，所有元素都会根据元素的键值自动被排序，因为set/map两者的所有各种操作，都只是转而调用RB-tree的操作行为，不过，值得注意的是，两者都不允许两个元素有相同的键值。<br />&nbsp; &nbsp; 不同的是：set的元素不像map那样可以同时拥有实值(value)和键值(key)，set元素的键值就是实值，实值就是键值，而map的所有元素都是pair，同时拥有实值(value)和键值(key)，pair的第一个元素被视为键值，第二个元素被视为实值。<br />&nbsp; &nbsp; 至于multiset/multimap，他们的特性及用法和set/map完全相同，唯一的差别就在于它们允许键值重复，即所有的插入操作基于RB-tree的insert_equal()而非insert_unique()。<br /></p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; padding-bottom: 2px; margin-top: 4px; margin-right: 0px; margin-bottom: 4px; margin-left: 0px; padding-left: 0px; padding-right: 0px; padding-top: 2px; \"><span style=\"font-family: \'Comic Sans MS\'; \"><strong>hash_set/hash_map/hash_multiset/hash_multimap</strong></span></p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; padding-bottom: 2px; margin-top: 4px; margin-right: 0px; margin-bottom: 4px; margin-left: 0px; padding-left: 0px; padding-right: 0px; padding-top: 2px; \">&nbsp; &nbsp; hash_set/hash_map，两者的一切操作都是基于hashtable之上。不同的是，hash_set同set一样，同时拥有实值和键值，且实质就是键值，键值就是实值，而hash_map同map一样，每一个元素同时拥有一个实值(value)和一个键值(key)，所以其使用方式，和上面的map基本相同。但由于hash_set/hash_map都是基于hashtable之上，所以不具备自动排序功能。为什么?因为hashtable没有自动排序功能。<br />&nbsp; &nbsp; 至于hash_multiset/hash_multimap的特性与上面的multiset/multimap完全相同，唯一的差别就是它们hash_multiset/hash_multimap的底层实现机制是hashtable（而multiset/multimap，上面说了，底层实现机制是RB-tree），所以它们的元素都不会被自动排序，不过也都允许键值重复。</p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; padding-bottom: 2px; margin-top: 4px; margin-right: 0px; margin-bottom: 4px; margin-left: 0px; padding-left: 0px; padding-right: 0px; padding-top: 2px; \">&nbsp; &nbsp; 所以，综上，说白了，什么样的结构决定其什么样的性质，因为set/map/multiset/multimap都是基于RB-tree之上，所以有自动排序功能，而hash_set/hash_map/hash_multiset/hash_multimap都是基于hashtable之上，所以不含有自动排序功能，至于加个前缀multi_无非就是允许键值重复而已。</p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; padding-bottom: 2px; margin-top: 4px; margin-right: 0px; margin-bottom: 4px; margin-left: 0px; padding-left: 0px; padding-right: 0px; padding-top: 2px; \">&nbsp; &nbsp; 此外，</p><ul style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><li>关于什么hash，请看blog内此篇<a target=\"_blank\" href=\"http://blog.csdn.net/v_JULY_v/article/details/6256463\" style=\"color: rgb(51, 102, 153); text-decoration: none; \">文章</a>；</li><li>关于红黑树，请参看blog内系列<a target=\"_blank\" href=\"http://blog.csdn.net/v_july_v/article/category/774945\" style=\"color: rgb(51, 102, 153); text-decoration: none; \">文章</a>，</li><li>关于<span style=\"font-family: \'Comic Sans MS\'; \">hash_map</span>的具体应用：请看<a target=\"_blank\" href=\"http://blog.csdn.net/sdhongjun/article/details/4517325\" style=\"color: rgb(51, 102, 153); text-decoration: none; \">这里</a><span style=\"font-family: \'Comic Sans MS\'; \">，关于hash_set：请看<a target=\"_blank\" href=\"http://blog.csdn.net/morewindows/article/details/7330323\" style=\"color: rgb(51, 102, 153); text-decoration: none; \">此文</a>。</span></li></ul><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; padding-bottom: 2px; margin-top: 4px; margin-right: 0px; margin-bottom: 4px; margin-left: 0px; padding-left: 0px; padding-right: 0px; padding-top: 2px; \">&nbsp; &nbsp; OK，接下来，请看本文第二部分、处理海量数据问题之六把密匙。</p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; padding-bottom: 2px; margin-top: 4px; margin-right: 0px; margin-bottom: 4px; margin-left: 0px; padding-left: 0px; padding-right: 0px; padding-top: 2px; \"><br /></p><h3 style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; color: rgb(51, 51, 51); font-family: Arial; line-height: 26px; text-align: left; \"><a name=\"t4\" style=\"color: rgb(51, 102, 153); \"></a>第二部分、处理海量数据问题之六把密匙</h3><h3 style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; color: rgb(51, 51, 51); font-family: Arial; line-height: 26px; text-align: left; \"><a name=\"t5\" style=\"color: rgb(51, 102, 153); \"></a><span style=\"font-family: \'Comic Sans MS\'; \"><span style=\"color: rgb(153, 0, 0); \">密匙一、分而治之/Hash映射 + Hash_map统计 + 堆/快速/归并排序</span></span></h3><div style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><strong><span style=\"white-space: pre; \"></span>1、海量日志数据，提取出某日访问百度次数最多的那个IP。</strong><br /></div><div style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp; 既然是海量数据处理，那么可想而知，给我们的数据那就一定是海量的。针对这个数据的海量，我们如何着手呢?对的，无非就是分而治之/hash映射 + hash统计 + 堆/快速/归并排序，说白了，就是先映射，而后统计，最后排序：<br /></div><div style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><ol><li>分而治之/hash映射：针对数据太大，内存受限，只能是：把大文件化成(取模映射)小文件，即16字方针：大而化小，各个击破，缩小规模，逐个解决</li><li>hash_map统计：当大文件转化了小文件，那么我们便可以采用常规的hash_map(ip，value)来进行频率统计。</li><li>堆/快速排序：统计完了之后，便进行排序(可采取堆排序)，得到次数最多的IP。</li></ol></div><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><span style=\"font-size: 12px; \">&nbsp; &nbsp;具体而论，则是： “首先是这一天，并且是访问百度的日志中的IP取出来，逐个写入到一个大文件中。注意到IP是32位的，最多有个2^32个IP。同样可以采用映射的方法，比如%1000，把整个大文件映射为1000个小文件，再找出每个小文中出现频率最大的IP（可以采用hash_map对那1000个文件中的所有IP进行频率统计，然后依次找出各个文件中频率最大的那个IP）及相应的频率。然后再在这1000个最大的IP中，找出那个频率最大的IP，即为所求。”--<span style=\"font-size: 14px; \"><span style=\"font-family: SimHei; \"><a target=\"_blank\" href=\"http://blog.csdn.net/v_JULY_v/archive/2011/03/26/6279498.aspx\" style=\"color: rgb(34, 0, 0); text-decoration: none; \">十道海量数据处理面试题与十个方法大总结</a>。</span></span></span></p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp; 关于本题，还有几个问题，如下：</p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp; &nbsp; 1、Hash取模是一种等价映射，不会存在同一个元素分散到不同小文件中去的情况，即这里采用的是mod1000算法，那么相同的IP在hash后，只可能落在同一个文件中，不可能被分散的。<br />&nbsp; &nbsp; &nbsp; 2、那到底什么是hash映射呢？简单来说，就是为了便于计算机在有限的内存中处理big数据，从而通过一种映射散列的方式让数据均匀分布在对应的内存位置(如大数据通过取余的方式映射成小树存放在内存中，或大文件映射成多个小文件)，而这个映射散列方式便是我们通常所说的hash函数，设计的好的hash函数能让数据均匀分布而减少冲突。尽管数据映射到了另外一些不同的位置，但数据还是原来的数据，只是代替和表示这些原始数据的形式发生了变化而已。</p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp; OK，有兴趣的，还可以再了解下<span style=\"font-size: 12px; \">一致性hash算法</span>，见blog内此文第五部分：<a target=\"_blank\" href=\"http://blog.csdn.net/v_july_v/article/details/6879101\" style=\"color: rgb(51, 102, 153); text-decoration: none; font-size: 12px; \"><span style=\"font-family: \'Comic Sans MS\'; \">http://blog.csdn.net/v_july_v/article/details/6879101</span></a>。<br /></p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><strong><span style=\"white-space: pre; \"></span>2、寻找热门查询，300万个查询字符串中统计最热门的10个<span style=\"font-family: SimHei; \">查询</span></strong></p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><strong>&nbsp;&nbsp;&nbsp;</strong><span style=\"font-family: SimHei; \">&nbsp;原题：</span>搜索引擎会通过日志文件把用户每次检索使用的所有检索串都记录下来，每个查询串的长度为1-255字节。假设目前有一千万个记录（<span style=\"font-size: 12px; \">这些查询串的重复度比较高，虽然总数是1千万，但如果除去重复后，不超过3百万个。一个查询串的重复度越高，说明查询它的用户越多，也就是越热门</span>），请你统计最热门的10个查询串，要求使用的内存不能超过1G。</p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp;&nbsp; &nbsp;<span style=\"font-family: KaiTi_GB2312; \">解答：</span>由上面第1题，我们知道，数据大则划为小的，如如一亿个Ip求Top 10，可先%1000将ip分到1000个小文件中去，并保证一种ip只出现在一个文件中，再对每个小文件中的ip进行hashmap计数统计并按数量排序，最后归并或者最小堆依次处理每个小文件的top10以得到最后的结。</p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp; 但如果数据规模比较小，能一次性装入内存呢?比如这第2题，虽然有一千万个Query，但是由于重复度比较高，因此事实上只有300万的Query，每个Query255Byte，因此我们可以考虑把他们都放进内存中去（<span style=\"font-size: 12px; \">300万个字符串假设没有重复，都是最大长度，那么</span><span style=\"font-size: 12px; \">最多</span><span style=\"font-size: 12px; \">占用内存3M*1K/4=0.75G。所以可以将所有字符串都存放在内存中进行处理</span>），而现在只是需要一个合适的数据结构，在这里，HashTable绝对是我们优先的选择。</p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp;&nbsp; &nbsp;所以我们放弃分而治之/hash映射的步骤，直接上hash统计，然后排序。So，针对此类<span style=\"font-family: SimHei; \">典型的TOP K问题，采取的对策往往是：hashmap + 堆</span>。如下所示：<br /></p><ol style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><li>hash_map统计：先对这批海量数据预处理。具体方法是：维护一个Key为Query字串，Value为该Query出现次数的HashTable，即hash_map(Query，Value)，每次读取一个Query，如果该字串不在Table中，那么加入该字串，并且将Value值设为1；如果该字串在Table中，那么将该字串的计数加一即可。最终我们在O(N)的时间复杂度内用Hash表完成了统计；</li><li>堆排序：第二步、借助堆这个数据结构，找出Top K，时间复杂度为N‘logK。即借助堆结构，我们可以在log量级的时间内查找和调整/移动。因此，维护一个K(该题目中是10)大小的小根堆，然后遍历300万的Query，分别和根元素进行对比。所以，我们最终的时间复杂度是：O（N） + N\' * O（logK），（<span style=\"font-size: 12px; \">N为1000万，N’为300万</span>）。</li></ol><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp;&nbsp;&nbsp; 别忘了这篇文章中所述的堆排序思路：“维护k个元素的最小堆，即用容量为k的最小堆存储最先遍历到的k个数，并假设它们即是最大的k个数，建堆费时O（k），并调整堆(<span style=\"font-size: 12px; \">费时O（logk）)</span>后，有k1&gt;k2&gt;...kmin（kmin设为小顶堆中最小元素）。继续遍历数列，每次遍历一个元素x，与堆顶元素比较，若x&gt;kmin，则更新堆（<span style=\"font-size: 12px; \">x入堆，用时logk</span><span style=\"font-size: 12px; \">），否则不更新堆。这样下来，总费时O（k*logk+（n-k）*logk）=O（n*logk）。此方法得益于在堆中，查找等各项操作时间复杂度均为logk。</span>”--<a target=\"_blank\" href=\"http://blog.csdn.net/v_JULY_v/archive/2011/04/28/6370650.aspx\" style=\"color: rgb(34, 0, 0); text-decoration: none; \"><span style=\"color: rgb(51, 51, 51); \"></span></a><a target=\"_blank\" href=\"http://blog.csdn.net/v_JULY_v/archive/2011/05/08/6403777.aspx\" style=\"color: rgb(34, 0, 0); text-decoration: none; \"><span style=\"font-family: SimHei; \">第三章续、Top K算法问题的实现</span></a>。<br />&nbsp;&nbsp;&nbsp; 当然，你也可以采用trie树，关键字域存该查询串出现的次数，没有出现为0。最后用10个元素的最小推来对出现频率进行排序。</p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><strong><span style=\"white-space: pre; \"></span><span style=\"white-space: pre; \"></span>3、有一个1G大小的一个文件，里面每一行是一个词，词的大小不超过16字节，内存限制大小是1M。返回频数最高的100个词。</strong><br />&nbsp;&nbsp; &nbsp; &nbsp; 由上面那两个例题，分而治之 + hash统计 + 堆/快速排序这个套路，我们已经开始有了屡试不爽的感觉。下面，再拿几道再多多验证下。请看此第3题：又是文件很大，又是内存受限，咋办?还能怎么办呢?无非还是：<br /></p><ol style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><li>分而治之/hash映射：顺序读文件中，对于每个词x，取hash(x)%5000，然后按照该值存到5000个小文件（记为x0,x1,...x4999）中。这样每个文件大概是200k左右。如果其中的有的文件超过了1M大小，还可以按照类似的方法继续往下分，直到分解得到的小文件的大小都不超过1M。</li><li>hash_map统计：对每个小文件，采用trie树/hash_map等统计每个文件中出现的词以及相应的频率。</li><li>堆/归并排序：取出出现频率最大的100个词（可以用含100个结点的最小堆）后，再把100个词及相应的频率存入文件，这样又得到了5000个文件。最后就是把这5000个文件进行归并（类似于归并排序）的过程了。</li></ol><div style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><strong><span style=\"white-space: pre; \"></span><span style=\"white-space: pre; \"></span>4、海量数据分布在100台电脑中，想个办法高效统计出这批数据的TOP10。</strong></div><div style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp; 如果每个数据元素只出现一次，而且只出现在某一台机器中，那么可以采取以下步骤统计出现次数TOP10的数据元素：</div><div style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><ol><li>堆排序：在每台电脑上求出TOP10，可以采用包含10个元素的堆完成（<span style=\"font-size: 12px; \">TOP10小，用最大堆，TOP10大，用最小堆，比如求TOP10大，我们首先取前10个元素调整成最小堆，如果发现，然后扫描后面的数据，并与堆顶元素比较，如果比堆顶元素大，那么用该元素替换堆顶，然后再调整为最小堆。最后堆中的元素就是TOP10大</span><span style=\"font-size: 12px; \">）。</span></li><li>求出每台电脑上的TOP10后，然后把这100台电脑上的TOP10组合起来，共1000个数据，再利用上面类似的方法求出TOP10就可以了。</li></ol></div><span style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp; 但如果同一个元素重复出现在不同的电脑中呢，如下例子所述：</span><br style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \" /><blockquote style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; border-bottom-width: medium; border-bottom-style: none; border-bottom-color: initial; border-left-width: medium; border-left-style: none; border-left-color: initial; padding-bottom: 0px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 40px; padding-left: 0px; padding-right: 0px; border-top-width: medium; border-top-style: none; border-top-color: initial; border-right-width: medium; border-right-style: none; border-right-color: initial; padding-top: 0px; \"><p><img src=\"http://img.blog.csdn.net/20140219165731625\" alt=\"\" style=\"border-top-style: none; border-right-style: none; border-bottom-style: none; border-left-style: none; border-width: initial; border-color: initial; border-image: initial; max-width: 100%; \" /><br /></p><p></p><div></div></blockquote><div style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><strong>&nbsp; &nbsp;</strong>&nbsp;这个时候，你可以有两种方法：</div><div style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><ul><li>遍历一遍所有数据，重新hash取摸，如此使得同一个元素只出现在单独的一台电脑中，然后采用上面所说的方法，统计每台电脑中各个元素的出现次数找出TOP10，继而组合100台电脑上的TOP10，找出最终的TOP10。</li><li>或者，暴力求解：直接统计统计每台电脑中各个元素的出现次数，然后把同一个元素在不同机器中的出现次数相加，最终从所有数据中找出TOP10。</li></ul></div><div style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><strong><span style=\"white-space: pre; \"></span><span style=\"white-space: pre; \"></span>5、有10个文件，每个文件1G，每个文件的每一行存放的都是用户的query，每个文件的query都可能重复。要求你按照query的频度排序。</strong><br /></div><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp;方案1：直接上：<br /></p><ol style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><li>hash映射：顺序读取10个文件，按照hash(query)%10的结果将query写入到另外10个文件（记为a0,a1,..a9）中。这样新生成的文件每个的大小大约也1G（假设hash函数是随机的）。</li><li>hash_map统计：找一台内存在2G左右的机器，依次对用hash_map(query, query_count)来统计每个query出现的次数。<span style=\"font-size: 12px; \">注：hash_map(query,query_count)是用来统计每个query的出现次数，不是存储他们的值，出现一次，则count+1。</span></li><li>堆/快速/归并排序：利用快速/堆/归并排序按照出现次数进行排序，将排序好的query和对应的query_cout输出到文件中，这样得到了10个排好序的文件（记为<img alt=\"\" src=\"http://hi.csdn.net/attachment/201108/14/0_1313302329UNN0.gif\" style=\"border-top-style: none; border-right-style: none; border-bottom-style: none; border-left-style: none; border-width: initial; border-color: initial; border-image: initial; max-width: 100%; \" />）。最后，对这10个文件进行归并排序（内排序与外排序相结合）。根据此方案1，这里有一份实现：<a target=\"_blank\" href=\"https://github.com/ooooola/sortquery/blob/master/querysort.py\" style=\"color: rgb(51, 102, 153); text-decoration: none; \"><span style=\"font-family: \'Comic Sans MS\'; font-size: 12px; \">https://github.com/ooooola/sortquery/blob/master/querysort.py</span></a>。</li></ol><span style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp; &nbsp;除此之外，此题还有以下两个方法：</span><br style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \" /><span style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp;&nbsp;&nbsp; 方案2：一般query的总量是有限的，只是重复的次数比较多而已，可能对于所有的query，一次性就可以加入到内存了。这样，我们就可以采用trie树/hash_map等直接来统计每个query出现的次数，然后按出现次数做快速/堆/归并排序就可以了。</span><br style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \" /><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp;&nbsp;&nbsp; 方案3：与方案1类似，但在做完hash，分成多个文件后，可以交给多个文件来处理，采用分布式的架构来处理（比如MapReduce），最后再进行合并。</p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><strong><span style=\"white-space: pre; \"></span><span style=\"white-space: pre; \"></span>6、 给定a、b两个文件，各存放50亿个url，每个url各占64字节，内存限制是4G，让你找出a、b文件共同的url？</strong><br /></p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp; 可以估计每个文件安的大小为5G×64=320G，远远大于内存限制的4G。所以不可能将其完全加载到内存中处理。考虑采取分而治之的方法。<br /></p><ol style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><li><span style=\"font-family: \'Comic Sans MS\'; \">分而治之/hash映射</span>：遍历文件a，对每个url求取<img alt=\"\" src=\"http://hi.csdn.net/attachment/201108/14/0_1313302192BLP4.gif\" style=\"border-top-style: none; border-right-style: none; border-bottom-style: none; border-left-style: none; border-width: initial; border-color: initial; border-image: initial; max-width: 100%; \" />，然后根据所取得的值将url分别存储到1000个小文件（记为<img alt=\"\" src=\"http://hi.csdn.net/attachment/201108/14/0_13133022154fL9.gif\" style=\"border-top-style: none; border-right-style: none; border-bottom-style: none; border-left-style: none; border-width: initial; border-color: initial; border-image: initial; max-width: 100%; \" />，<span style=\"font-size: 12px; \">这里漏写个了a1</span>）中。这样每个小文件的大约为300M。遍历文件b，采取和a相同的方式将url分别存储到1000小文件中（记为<img alt=\"\" src=\"http://hi.csdn.net/attachment/201108/14/0_13133022364Qoo.gif\" style=\"border-top-style: none; border-right-style: none; border-bottom-style: none; border-left-style: none; border-width: initial; border-color: initial; border-image: initial; max-width: 100%; \" />）。这样处理后，所有可能相同的url都在对应的小文件（<img alt=\"\" src=\"http://hi.csdn.net/attachment/201108/14/0_1313302261MhJ0.gif\" style=\"border-top-style: none; border-right-style: none; border-bottom-style: none; border-left-style: none; border-width: initial; border-color: initial; border-image: initial; max-width: 100%; \" />）中，不对应的小文件不可能有相同的url。然后我们只要求出1000对小文件中相同的url即可。</li><li><span style=\"font-family: \'Comic Sans MS\'; \">hash_set</span><span style=\"font-family: \'Comic Sans MS\'; \">统计</span>：求每对小文件中相同的url时，可以把其中一个小文件的url存储到hash_set中。然后遍历另一个小文件的每个url，看其是否在刚才构建的hash_set中，如果是，那么就是共同的url，存到文件里面就可以了。</li></ol><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp; OK，此第一种方法：<span style=\"font-family: \'Comic Sans MS\'; \">分而治之/hash映射 + hash统计 + 堆/快速/归并排序</span>，再看最后4道题，如下：</p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><strong><span style=\"white-space: pre; \"></span><span style=\"white-space: pre; \"></span>7、怎么在海量数据中找出重复次数最多的一个？</strong><br /></p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp; 方案1：先做hash，然后求模映射为小文件，求出每个小文件中重复次数最多的一个，并记录重复次数。然后找出上一步求出的数据中重复次数最多的一个就是所求（具体参考前面的题）。</p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><strong><span style=\"white-space: pre; \"></span><span style=\"white-space: pre; \"></span>8、上千万或上亿数据（有重复），统计其中出现次数最多的钱N个数据。</strong><br /></p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp; 方案1：上千万或上亿的数据，现在的机器的内存应该能存下。所以考虑采用hash_map/搜索二叉树/红黑树等来进行统计次数。然后就是取出前N个出现次数最多的数据了，可以用第2题提到的堆机制完成。</p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><strong><span style=\"white-space: pre; \"></span>9、一个文本文件，大约有一万行，每行一个词，要求统计出其中最频繁出现的前10个词，请给出思想，给出时间复杂度分析。</strong><br /></p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp; &nbsp;方案1：这题是考虑时间效率。用trie树统计每个词出现的次数，时间复杂度是O(n*le)（le表示单词的平准长度）。然后是找出出现最频繁的前10个词，可以用堆来实现，前面的题中已经讲到了，时间复杂度是O(n*lg10)。所以总的时间复杂度，是O(n*le)与O(n*lg10)中较大的哪一个。</p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"></p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><strong>10. 1000万字符串，其中有些是重复的，需要把重复的全部去掉，保留没有重复的字符串。请怎么设计和实现？</strong></p><ul style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><li>方案1：这题用trie树比较合适，hash_map也行。</li><li><span style=\"font-family: \'Comic Sans MS\'; \">方案2：from xjbzju:，</span><span style=\"line-height: 20px; \">1000w的数据规模插入操作完全不现实，以前试过在stl下100w元素插入set中已经慢得不能忍受，觉得基于hash的实现不会比红黑树好太多，使用vector+sort+unique都要可行许多，建议还是先hash成小文件分开处理再综合。</span></li></ul><div style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><span style=\"line-height: 20px; \">&nbsp; &nbsp; 上述方案2中读者xbzju的方法让我想到了一些问题，即是<span style=\"font-family: \'Comic Sans MS\'; color: rgb(153, 0, 0); \">set/map，与hash_set/hash_map的性能比较</span>?共计3个问题，如下：</span></div><div style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><ul><li><span style=\"line-height: 20px; \">1、hash_set在千万级数据下，insert操作优于set? 这位blog：<span style=\"font-family: \'Comic Sans MS\'; \"><a target=\"_blank\" href=\"http://t.cn/zOibP7t\" style=\"color: rgb(51, 102, 153); text-decoration: none; \">http://t.cn/zOibP7t</a>&nbsp;</span></span><span style=\"line-height: 20px; \">给的实践数据可靠不?&nbsp;</span></li><li><span style=\"line-height: 20px; \">2、那map和hash_map的性能比较呢? 谁做过相关实验?</span></li></ul></div><div style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><span style=\"line-height: 20px; \"><img alt=\"\" src=\"http://my.csdn.net/uploads/201204/05/1333606713_6865.jpg\" style=\"border-top-style: none; border-right-style: none; border-bottom-style: none; border-left-style: none; border-width: initial; border-color: initial; border-image: initial; max-width: 100%; \" /></span></div><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"></p><ul style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><li>3、那查询操作呢，如下段文字所述?</li></ul><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"></p><blockquote style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 40px; border-top-style: none; border-right-style: none; border-bottom-style: none; border-left-style: none; border-width: initial; border-color: initial; border-image: initial; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><p><img alt=\"\" src=\"http://my.csdn.net/uploads/201204/05/1333607153_1433.jpg\" width=\"518\" height=\"110\" style=\"border-top-style: none; border-right-style: none; border-bottom-style: none; border-left-style: none; border-width: initial; border-color: initial; border-image: initial; max-width: 100%; \" /></p></blockquote><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"></p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp; 或者小数据量时用map，构造快，大数据量时用hash_map?</p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><span style=\"font-family: \'Comic Sans MS\'; \"><strong>rbtree PK hashtable</strong></span></p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp; 据朋友№邦卡猫№的做的红黑树和hash table的性能测试中发现：当数据量基本上int型key时，hash&nbsp;table是rbtree的3-4倍，但hash&nbsp;table一般会浪费大概一半内存。</p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp; 因为hash&nbsp;table所做的运算就是个%，而rbtree要比较很多，比如rbtree要看value的数据 ，每个节点要多出3个指针（或者偏移量） 如果需要其他功能，比如，统计某个范围内的key的数量，就需要加一个计数成员。</p><div style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp; 且1s&nbsp;rbtree能进行大概50w+次插入，hash&nbsp;table大概是差不多200w次。不过很多的时候，其速度可以忍了，例如倒排索引差不多也是这个速度，而且单线程，且倒排表的拉链长度不会太大。正因为基于树的实现其实不比hashtable慢到哪里去，所以数据库的索引一般都是用的<span style=\"font-family: \'Comic Sans MS\'; \">B/B+</span>树，而且B+树还对磁盘友好(B树能有效降低它的高度，所以减少磁盘交互次数)。比如现在非常流行的NoSQL数据库，像<span style=\"font-family: \'Comic Sans MS\'; \">MongoDB</span>也是采用的B树索引。关于B树系列，请参考本blog内此篇文章：<a target=\"_blank\" href=\"http://blog.csdn.net/v_JULY_v/archive/2011/06/07/6530142.aspx\" style=\"color: rgb(34, 0, 0); text-decoration: none; \">从B树、B+树、B*树谈到R 树</a>。更多请待后续实验论证。</div><div style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><br /></div><div style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><strong>11. 一个文本文件，找出前10个经常出现的词，但这次文件比较长，说是上亿行或十亿行，总之无法一次读入内存，问最优解。</strong><br />&nbsp; &nbsp; 方案1：首先根据用hash并求模，将文件分解为多个小文件，对于单个文件利用上题的方法求出每个文件件中10个最常出现的词。然后再进行归并处理，找出最终的10个最常出现的词。</div><div style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><br /></div><div style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><strong>12. 100w个数中找出最大的100个数。</strong></div><div style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp; 方案1：采用局部淘汰法。选取前100个元素，并排序，记为序列L。然后一次扫描剩余的元素x，与排好序的100个元素中最小的元素比，如果比这个最小的要大，那么把这个最小的元素删除，并把x利用插入排序的思想，插入到序列L中。依次循环，知道扫描了所有的元素。复杂度为O(100w*100)。<br />&nbsp; &nbsp; 方案2：采用快速排序的思想，每次分割之后只考虑比轴大的一部分，知道比轴大的一部分在比100多的时候，采用传统排序算法排序，取前100个。复杂度为O(100w*100)。<br />&nbsp; &nbsp; 方案3：在前面的题中，我们已经提到了，用一个含100个元素的最小堆完成。复杂度为O(100w*lg100)。<br /></div><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"></p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp; 接下来，咱们来看第二种方法，双层捅划分。</p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><br /></p><h3 style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; color: rgb(51, 51, 51); font-family: Arial; line-height: 26px; text-align: left; \"><a name=\"t6\" style=\"color: rgb(51, 102, 153); \"></a><span style=\"font-family: \'Arial Black\'; \"><span style=\"color: rgb(153, 0, 0); \">密匙二、双层桶划分</span></span></h3><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; padding-bottom: 2px; margin-top: 4px; margin-right: 0px; margin-bottom: 4px; margin-left: 0px; padding-left: 0px; padding-right: 0px; padding-top: 2px; \">双层桶划分----其实本质上还是分而治之的思想，重在“分”的技巧上！<br />　　适用范围：第k大，中位数，不重复或重复的数字<br />　　基本原理及要点：因为元素范围很大，不能利用直接寻址表，所以通过多次划分，逐步确定范围，然后最后在一个可以接受的范围内进行。可以通过多次缩小，双层只是一个例子。<br />　　扩展：<br />　　问题实例：</p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; padding-bottom: 2px; margin-top: 4px; margin-right: 0px; margin-bottom: 4px; margin-left: 0px; padding-left: 0px; padding-right: 0px; padding-top: 2px; \"><span style=\"white-space: pre; \"></span><strong>13、2.5亿个整数中找出不重复的整数的个数，内存空间不足以容纳这2.5亿个整数。</strong><br />&nbsp; &nbsp; 有点像鸽巢原理，整数个数为2^32,也就是，我们可以将这2^32个数，划分为2^8个区域(比如用单个文件代表一个区域)，然后将数据分离到不同的区域，然后不同的区域在利用bitmap就可以直接解决了。也就是说只要有足够的磁盘空间，就可以很方便的解决。</p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; padding-bottom: 2px; margin-top: 4px; margin-right: 0px; margin-bottom: 4px; margin-left: 0px; padding-left: 0px; padding-right: 0px; padding-top: 2px; \"><span style=\"white-space: pre; \"></span><strong>14、5亿个int找它们的中位数。</strong><br /></p><ol style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><li><span style=\"white-space: pre; \">	</span>思路一：这个例子比上面那个更明显。首先我们将int划分为2^16个区域，然后读取数据统计落到各个区域里的数的个数，之后我们根据统计结果就可以判断中位数落到那个区域，同时知道这个区域中的第几大数刚好是中位数。然后第二次扫描我们只统计落在这个区域中的那些数就可以了。<br /><span style=\"white-space: pre; \">	</span>实际上，如果不是int是int64，我们可以经过3次这样的划分即可降低到可以接受的程度。即可以先将int64分成2^24个区域，然后确定区域的第几大数，在将该区域分成2^20个子区域，然后确定是子区域的第几大数，然后子区域里的数的个数只有2^20，就可以直接利用direct addr table进行统计了。</li><li>　　思路二@绿色夹克衫：同样需要做两遍统计，如果数据存在硬盘上，就需要读取2次。<br /><span style=\"white-space: pre; \">	</span>方法同基数排序有些像，开一个大小为65536的Int数组，第一遍读取，统计Int32的高16位的情况，也就是0-65535，都算作0,65536 - 131071都算作1。就相当于用该数除以65536。Int32 除以 65536的结果不会超过65536种情况，因此开一个长度为65536的数组计数就可以。每读取一个数，数组中对应的计数+1，考虑有负数的情况，需要将结果加32768后，记录在相应的数组内。<br /><span style=\"white-space: pre; \">	</span>第一遍统计之后，遍历数组，逐个累加统计，看中位数处于哪个区间，比如处于区间k，那么0- k-1的区间里数字的数量sum应该&lt;n/2（2.5亿）。而k+1 - 65535的计数和也&lt;n/2，第二遍统计同上面的方法类似，但这次只统计处于区间k的情况，也就是说(x / 65536) + 32768 = k。统计只统计低16位的情况。并且利用刚才统计的sum，比如sum = 2.49亿，那么现在就是要在低16位里面找100万个数(2.5亿-2.49亿)。这次计数之后，再统计一下，看中位数所处的区间，最后将高位和低位组合一下就是结果了。</li></ol><div style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><br /></div><h3 style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; color: rgb(51, 51, 51); font-family: Arial; line-height: 26px; text-align: left; \"><a name=\"t7\" style=\"color: rgb(51, 102, 153); \"></a><span style=\"font-family: \'Comic Sans MS\'; \"><span style=\"color: rgb(153, 0, 0); \">密匙三：Bloom filter/Bitmap</span></span></h3><h4 style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><a name=\"t8\" style=\"color: rgb(51, 102, 153); \"></a><strong>Bloom filter</strong></h4><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">关于什么是<strong>Bloom filter</strong>，请参看blog内此文：</p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"></p><ul style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><li><a target=\"_blank\" href=\"http://blog.csdn.net/v_july_v/article/details/6685894\" style=\"color: rgb(51, 102, 153); text-decoration: none; \">海量数据处理之Bloom Filter详解</a></li></ul><span style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">　　适用范围：可以用来实现数据字典，进行数据的判重，或者集合求交集</span><br style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \" /><span style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">　　基本原理及要点：</span><br style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \" /><span style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">　　对于原理来说很简单，位数组+k个独立hash函数。将hash函数对应的值的位数组置1，查找时如果发现所有hash函数对应位都是1说明存在，很明显这个过程并不保证查找的结果是100%正确的。同时也不支持删除一个已经插入的关键字，因为该关键字对应的位会牵动到其他的关键字。所以一个简单的改进就是 counting Bloom filter，用一个counter数组代替位数组，就可以支持删除了。</span><br style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \" /><span style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">　　还有一个比较重要的问题，如何根据输入元素个数n，确定位数组m的大小及hash函数个数。当hash函数个数k=(ln2)*(m/n)时错误率最小。在错误率不大于E的情况下，m至少要等于n*lg(1/E)才能表示任意n个元素的集合。但m还应该更大些，因为还要保证bit数组里至少一半为0，则m应该&gt;=nlg(1/E)*lge 大概就是nlg(1/E)1.44倍(lg表示以2为底的对数)。</span><br style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \" /><span style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">　　举个例子我们假设错误率为0.01，则此时m应大概是n的13倍。这样k大概是8个。</span><br style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \" /><span style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">　　注意这里m与n的单位不同，m是bit为单位，而n则是以元素个数为单位(准确的说是不同元素的个数)。通常单个元素的长度都是有很多bit的。所以使用bloom filter内存上通常都是节省的。</span><br style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \" /><br style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \" /><span style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">　　扩展：</span><br style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \" /><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">　　Bloom filter将集合中的元素映射到位数组中，用k（k为哈希函数个数）个映射位是否全1表示元素在不在这个集合中。Counting bloom filter（CBF）将位数组中的每一位扩展为一个counter，从而支持了元素的删除操作。Spectral Bloom Filter（SBF）将其与集合元素的出现次数关联。SBF采用counter中的最小值来近似表示元素的出现频率。</p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp;可以看下上文中的第6题：</p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"></p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><span style=\"white-space: pre; \"></span><strong>“6、给你A,B两个文件，各存放50亿条URL，每条URL占用64字节，内存限制是4G，让你找出A,B文件共同的URL。如果是三个乃至n个文件呢？</strong></p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">　　根据这个问题我们来计算下内存的占用，4G=2^32大概是40亿*8大概是340亿，n=50亿，如果按出错率0.01算需要的大概是650亿个bit。现在可用的是340亿，相差并不多，这样可能会使出错率上升些。另外如果这些urlip是一一对应的，就可以转换成ip，则大大简单了。<br /></p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp; 同时，上文的第5题：给定a、b两个文件，各存放50亿个url，每个url各占64字节，内存限制是4G，让你找出a、b文件共同的url？如果允许有一定的错误率，可以使用Bloom filter，4G内存大概可以表示340亿bit。将其中一个文件中的url使用Bloom filter映射为这340亿bit，然后挨个读取另外一个文件的url，检查是否与Bloom filter，如果是，那么该url应该是共同的url（注意会有一定的错误率）。”<br /></p><h4 style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><a name=\"t9\" style=\"color: rgb(51, 102, 153); \"></a><strong>Bitmap</strong></h4><ul style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><li>关于什么是<span style=\"font-family: \'Comic Sans MS\'; \">Bitmap</span>，请看blog内此文第二部分：<a target=\"_blank\" href=\"http://blog.csdn.net/v_july_v/article/details/6685962\" style=\"color: rgb(51, 102, 153); text-decoration: none; \"><span style=\"font-family: \'Comic Sans MS\'; \">http://blog.csdn.net/v_july_v/article/details/6685962</span></a>。</li></ul><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp; 下面关于Bitmap的应用，可以看下上文中的第13题，以及另外一道新题：</p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><strong>“13、在2.5亿个整数中找出不重复的整数，注，内存不足以容纳这2.5亿个整数。</strong><br /></p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp; 方案1：采用2-Bitmap（每个数分配2bit，00表示不存在，01表示出现一次，10表示多次，11无意义）进行，共需内存2^32 * 2 bit=1 GB内存，还可以接受。然后扫描这2.5亿个整数，查看Bitmap中相对应位，如果是00变01，01变10，10保持不变。所描完事后，查看bitmap，把对应位是01的整数输出即可。<br />&nbsp; &nbsp; 方案2：也可采用与第1题类似的方法，进行划分小文件的方法。然后在小文件中找出不重复的整数，并排序。然后再进行归并，注意去除重复的元素。<strong>”</strong></p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><strong>15、给40亿个不重复的unsigned int的整数，没排过序的，然后再给一个数，如何快速判断这个数是否在那40亿个数当中？</strong><br />&nbsp; &nbsp; 方案1：<span style=\"font-family: \'Comic Sans MS\'; \">frome oo</span>，用位图<span style=\"font-family: \'Comic Sans MS\'; \">/Bitmap</span>的方法，申请512M的内存，一个bit位代表一个unsigned int值。读入40亿个数，设置相应的bit位，读入要查询的数，查看相应bit位是否为1，为1表示存在，为0表示不存在。</p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><br /></p><h3 style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; color: rgb(51, 51, 51); font-family: Arial; line-height: 26px; text-align: left; \"><a name=\"t10\" style=\"color: rgb(51, 102, 153); \"></a><span style=\"font-family: \'Comic Sans MS\'; \"><span style=\"color: rgb(153, 0, 0); \">密匙四、Trie树/数据库/倒排索引</span></span></h3><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><strong><span style=\"font-family: \'Comic Sans MS\'; \">Trie树</span></strong></p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">　　适用范围：数据量大，重复多，但是数据种类小可以放入内存<br />　　基本原理及要点：实现方式，节点孩子的表示方式<br />　　扩展：压缩实现。<br />　　问题实例：<br /></p><ol style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><li>上面的<strong>第2题</strong>：寻找热门查询：查询串的重复度比较高，虽然总数是1千万，但如果除去重复后，不超过3百万个，每个不超过255字节。<br /></li><li>上面的<strong>第5题</strong>：有10个文件，每个文件1G，每个文件的每一行都存放的是用户的query，每个文件的query都可能重复。要你按照query的频度排序。</li><li>1000万字符串，其中有些是相同的(重复),需要把重复的全部去掉，保留没有重复的字符串。请问怎么设计和实现？</li><li>上面的<strong>第8</strong>题：一个文本文件，大约有一万行，每行一个词，要求统计出其中最频繁出现的前10个词。其解决方法是：用trie树统计每个词出现的次数，时间复杂度是O(n*le)（le表示单词的平准长度），然后是找出出现最频繁的前10个词。</li></ol><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"></p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp; 更多有关Trie树的介绍，请参见此文：<a target=\"_blank\" href=\"http://blog.csdn.net/v_july_v/article/details/6897097\" style=\"color: rgb(34, 0, 0); text-decoration: none; \"><span style=\"font-family: SimHei; \">从Trie树（字典树）谈到后缀树</span></a>。</p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><strong>数据库索引</strong><br />　　适用范围：大数据量的增删改查<br />　　基本原理及要点：利用数据的设计实现方法，对海量数据的增删改查进行处理。</p><ul style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><li>关于数据库索引及其优化，更多可参见此文：<span style=\"font-family: \'Comic Sans MS\'; \"><a target=\"_blank\" href=\"http://www.cnblogs.com/pkuoliver/archive/2011/08/17/mass-data-topic-7-index-and-optimize.html\" style=\"color: rgb(51, 102, 153); text-decoration: none; \">http://www.cnblogs.com/pkuoliver/archive/2011/08/17/mass-data-topic-7-index-and-optimize.html</a>；</span></li><li>关于MySQL索引背后的数据结构及算法原理，这里还有一篇很好的文章：<a target=\"_blank\" href=\"http://blog.codinglabs.org/articles/theory-of-mysql-index.html\" style=\"color: rgb(51, 102, 153); text-decoration: none; \"><span style=\"font-family: \'Comic Sans MS\'; font-size: 12px; \">http://blog.codinglabs.org/articles/theory-of-mysql-index.html</span></a><span style=\"font-family: \'Comic Sans MS\'; \">；</span></li><li><span style=\"font-family: \'Comic Sans MS\'; \">关于B 树、B+ 树、B* 树及R 树，本blog内有篇绝佳文章：<a target=\"_blank\" href=\"http://blog.csdn.net/v_JULY_v/article/details/6530142\" style=\"color: rgb(51, 102, 153); text-decoration: none; \">http://blog.csdn.net/v_JULY_v/article/details/6530142</a>。</span></li></ul><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><strong>倒排索引(Inverted index)</strong><br />　　适用范围：搜索引擎，关键字查询<br />　　基本原理及要点：为何叫倒排索引？一种索引方法，被用来存储在全文搜索下某个单词在一个文档或者一组文档中的存储位置的映射。<br />　以英文为例，下面是要被索引的文本：<br />&nbsp;&nbsp;<span style=\"white-space: pre; \"></span><span style=\"white-space: pre; \"></span>&nbsp;&nbsp;<span style=\"white-space: pre; \"></span>T0 = &quot;it is what it is&quot;<br />&nbsp;&nbsp;<span style=\"white-space: pre; \"></span><span style=\"white-space: pre; \"></span>&nbsp;&nbsp;<span style=\"white-space: pre; \"></span>T1 = &quot;what is it&quot;<br />&nbsp;&nbsp;<span style=\"white-space: pre; \"></span><span style=\"white-space: pre; \"></span>&nbsp;&nbsp;<span style=\"white-space: pre; \"></span>T2 = &quot;it is a banana&quot;<br />&nbsp; &nbsp; 我们就能得到下面的反向文件索引：<br />&nbsp; &nbsp;<span style=\"white-space: pre; \"> </span><span style=\"white-space: pre; \"></span>&quot;a&quot;: &nbsp; &nbsp; &nbsp;{2}<br />&nbsp;&nbsp;<span style=\"white-space: pre; \"></span>&nbsp;&nbsp;<span style=\"white-space: pre; \"></span>&quot;banana&quot;: {2}<br />&nbsp;&nbsp;<span style=\"white-space: pre; \"></span>&nbsp;&nbsp;<span style=\"white-space: pre; \"></span>&quot;is&quot;: &nbsp; &nbsp; {0, 1, 2}<br />&nbsp;<span style=\"white-space: pre; \"> </span>&nbsp;&nbsp;<span style=\"white-space: pre; \"></span>&quot;it&quot;: &nbsp; &nbsp; {0, 1, 2}<br />&nbsp;<span style=\"white-space: pre; \"> </span>&nbsp;&nbsp;<span style=\"white-space: pre; \"></span>&quot;what&quot;: &nbsp; {0, 1}<br />　检索的条件&quot;what&quot;,&quot;is&quot;和&quot;it&quot;将对应集合的交集。<br /><br />　　正向索引开发出来用来存储每个文档的单词的列表。正向索引的查询往往满足每个文档有序频繁的全文查询和每个单词在校验文档中的验证这样的查询。在正向索引中，文档占据了中心的位置，每个文档指向了一个它所包含的索引项的序列。也就是说文档指向了它包含的那些单词，而反向索引则是单词指向了包含它的文档，很容易看到这个反向的关系。<br />　　扩展：<br />　　问题实例：文档检索系统，查询那些文件包含了某单词，比如常见的学术论文的关键字搜索。<br /></p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp; 关于倒排索引的应用，更多请参见：</p><ul style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><li><a target=\"_blank\" href=\"http://blog.csdn.net/v_july_v/article/details/7085669\" style=\"color: rgb(34, 0, 0); text-decoration: none; \"><span style=\"font-family: SimHei; \">第二十三、四章：杨氏矩阵查找，倒排索引关键词Hash不重复编码实践</span></a>，</li><li><a target=\"_blank\" href=\"http://blog.csdn.net/v_july_v/article/details/7109500\" style=\"color: rgb(34, 0, 0); text-decoration: none; \"><span style=\"font-family: SimHei; \">第二十六章：基于给定的文档生成倒排索引的编码与实践</span></a>。</li></ul><div style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><span style=\"font-size: 18px; \"><span style=\"font-size: 14px; \"><br /></span></span></div><h3 style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; color: rgb(51, 51, 51); font-family: Arial; line-height: 26px; text-align: left; \"><a name=\"t11\" style=\"color: rgb(51, 102, 153); \"></a><span style=\"font-family: \'Comic Sans MS\'; \"><span style=\"color: rgb(153, 0, 0); \">密匙五、外排序</span></span></h3><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">　　适用范围：大数据的排序，去重<br />　　基本原理及要点：外排序的归并方法，置换选择败者树原理，最优归并树<br />　　扩展：<br />　　问题实例：<br />　　1).有一个1G大小的一个文件，里面每一行是一个词，词的大小不超过16个字节，内存限制大小是1M。返回频数最高的100个词。<br />　　这个数据具有很明显的特点，词的大小为16个字节，但是内存只有1M做hash明显不够，所以可以用来排序。内存可以当输入缓冲区使用。</p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp; 关于多路归并算法及外排序的具体应用场景，请参见blog内此文：</p><ul style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><li><span style=\"font-family: SimHei; \"><a target=\"_blank\" href=\"http://blog.csdn.net/v_JULY_v/archive/2011/05/28/6451990.aspx\" style=\"color: rgb(34, 0, 0); text-decoration: none; \">第十章、如何给10^7个数据量的磁盘文件排序</a></span></li></ul><div style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><br /></div><h3 style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; color: rgb(51, 51, 51); font-family: Arial; line-height: 26px; text-align: left; \"><a name=\"t12\" style=\"color: rgb(51, 102, 153); \"></a><span style=\"font-family: \'Comic Sans MS\'; \"><span style=\"color: rgb(153, 0, 0); \">密匙六、分布式处理之Mapreduce</span></span></h3><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp;&nbsp;MapReduce是一种计算模型，简单的说就是将大批量的工作（数据）分解（MAP）执行，然后再将结果合并成最终结果（REDUCE）。这样做的好处是可以在任务被分解后，可以通过大量机器进行并行计算，减少整个操作的时间。但如果你要我再通俗点介绍，那么，说白了，Mapreduce的原理就是一个归并排序。</p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp; &nbsp; &nbsp; 适用范围：数据量大，但是数据种类小可以放入内存<br />　　基本原理及要点：将数据交给不同的机器去处理，数据划分，结果归约。<br />　　扩展：<br />　　问题实例：<br /></p><ol style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><li>The canonical example application of MapReduce is a process to count the appearances of each different word in a set of documents:</li><li>海量数据分布在100台电脑中，想个办法高效统计出这批数据的TOP10。</li><li>一共有N个机器，每个机器上有N个数。每个机器最多存O(N)个数并对它们操作。如何找到N^2个数的中数(median)？</li></ol><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"></p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp; 更多具体阐述请参见blog内：</p><ul style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><li><a target=\"_blank\" title=\"从Hadhoop框架与MapReduce模式中谈海量数据处理\" href=\"http://blog.csdn.net/v_july_v/article/details/6704077\" style=\"color: rgb(34, 0, 0); text-decoration: none; font-family: \'Comic Sans MS\'; \">从Hadhoop框架与MapReduce模式中谈海量数据处理</a><span style=\"font-family: \'Comic Sans MS\'; \">，</span></li><li><span style=\"font-family: \'Comic Sans MS\'; \">及</span><a target=\"_blank\" href=\"http://blog.csdn.net/v_july_v/article/details/6637014\" style=\"color: rgb(51, 102, 153); text-decoration: none; \"><span style=\"font-family: \'Comic Sans MS\'; \">MapReduce技术的初步了解与学习</span></a>。</li></ul><h3 style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; color: rgb(51, 51, 51); font-family: Arial; line-height: 26px; text-align: left; \"><a name=\"t13\" style=\"color: rgb(51, 102, 153); \"></a>其它模式/方法论，结合操作系统知识</h3><div style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp; 至此，六种处理海量数据问题的模式/方法已经阐述完毕。据观察，这方面的面试题无外乎以上一种或其变形，然题目为何取为是：秒杀99%的海量数据处理面试题，而不是100%呢。OK，给读者看最后一道题，如下：</div><div style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp;&nbsp;<span style=\"font-family: \'Microsoft YaHei\'; \">非常大的文件，装不进内存。每行一个int类型数据，现在要你随机取100个数</span>。<br /></div><div style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp; 我们发现上述这道题，无论是以上任何一种模式/方法都不好做，那有什么好的别的方法呢？我们可以看看：操作系统内存分页系统设计(说白了，就是映射+建索引)。</div><div style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><span style=\"font-size: 12px; \">&nbsp; &nbsp; Windows 2000使用基于分页机制的虚拟内存。每个进程有4GB的虚拟地址空间。基于分页机制，这4GB地址空间的一些部分被映射了物理内存，一些部分映射硬盘上的交换文 件，一些部分什么也没有映射。程序中使用的都是4GB地址空间中的虚拟地址。而访问物理内存，需要使用物理地址。 关于什么是物理地址和虚拟地址，请看：<br /></span><ul><li>物理地址 (physical address): 放在寻址总线上的地址。放在寻址总线上，如果是读，电路根据这个地址每位的值就将相应地址的物理内存中的数据放到数据总线中传输。如果是写，电路根据这个 地址每位的值就将相应地址的物理内存中放入数据总线上的内容。物理内存是以字节(8位)为单位编址的。&nbsp;</li><li>虚拟地址 (virtual address): 4G虚拟地址空间中的地址，程序中使用的都是虚拟地址。&nbsp;使用了分页机制之后，4G的地址空间被分成了固定大小的页，每一页或者被映射到物理内存，或者被映射到硬盘上的交换文件中，或者没有映射任何东西。对于一 般程序来说，4G的地址空间，只有一小部分映射了物理内存，大片大片的部分是没有映射任何东西。物理内存也被分页，来映射地址空间。对于32bit的 Win2k，页的大小是4K字节。CPU用来把虚拟地址转换成物理地址的信息存放在叫做页目录和页表的结构里。&nbsp;</li></ul>&nbsp; &nbsp; 物理内存分页，一个物理页的大小为4K字节，第0个物理页从物理地址 0x00000000 处开始。由于页的大小为4KB，就是0x1000字节，所以第1页从物理地址 0x00001000 处开始。第2页从物理地址 0x00002000 处开始。可以看到由于页的大小是4KB，所以只需要32bit的地址中高20bit来寻址物理页。&nbsp;<br /></div><div style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp; 返回上面我们的题目：<span style=\"font-family: \'Microsoft YaHei\'; \">非常大的文件，装不进内存。每行一个int类型数据，现在要你随机取100个数</span>。针对此题，我们可以借鉴上述操作系统中内存分页的设计方法，做出如下解决方案：</div><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp; 操作系统中的方法，先生成4G的地址表，在把这个表划分为小的4M的小文件做个索引，二级索引。30位前十位表示第几个4M文件，后20位表示在这个4M文件的第几个，等等，基于key value来设计存储，用key来建索引。</p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp; 但如果现在只有10000个数，然后怎么去随机从这一万个数里面随机取100个数？请读者思考。更多海里数据处理面试题，请参见此文第一部分：<a target=\"_blank\" href=\"http://blog.csdn.net/v_july_v/article/details/6685962\" style=\"color: rgb(51, 102, 153); text-decoration: none; \"><span style=\"font-family: \'Comic Sans MS\'; \">http://blog.csdn.net/v_july_v/article/details/6685962</span></a>。</p><p style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><br /></p><h3 style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; color: rgb(51, 51, 51); font-family: Arial; line-height: 26px; text-align: left; \"><a name=\"t14\" style=\"color: rgb(51, 102, 153); \"></a>参考文献</h3><ol style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><li><a target=\"_blank\" href=\"http://blog.csdn.net/v_JULY_v/archive/2011/03/26/6279498.aspx\" style=\"color: rgb(34, 0, 0); text-decoration: none; \">十道海量数据处理面试题与十个方法大总结</a>；</li><li><a target=\"_blank\" href=\"http://blog.csdn.net/v_july_v/article/details/6685962\" style=\"color: rgb(34, 0, 0); text-decoration: none; \">海量数据处理面试题集锦与Bit-map详解</a>；</li><li><a target=\"_blank\" href=\"http://blog.csdn.net/v_JULY_v/archive/2011/03/17/6256463.aspx\" style=\"color: rgb(34, 0, 0); text-decoration: none; \">十一、从头到尾彻底解析Hash表算法</a>；</li><li><a target=\"_blank\" href=\"http://blog.csdn.net/v_july_v/article/details/6685894\" style=\"color: rgb(51, 102, 153); text-decoration: none; \">海量数据处理之Bloom Filter详解</a>；</li><li><a target=\"_blank\" href=\"http://blog.csdn.net/v_july_v/article/details/6897097\" style=\"color: rgb(34, 0, 0); text-decoration: none; \">从Trie树（字典树）谈到后缀树</a>；</li><li><a target=\"_blank\" href=\"http://blog.csdn.net/v_JULY_v/archive/2011/04/28/6370650.aspx\" style=\"color: rgb(34, 0, 0); text-decoration: none; \"><span style=\"color: rgb(51, 51, 51); \"></span></a><a target=\"_blank\" href=\"http://blog.csdn.net/v_JULY_v/archive/2011/05/08/6403777.aspx\" style=\"color: rgb(34, 0, 0); text-decoration: none; \">第三章续、Top K算法问题的实现</a>；</li><li><a target=\"_blank\" href=\"http://blog.csdn.net/v_JULY_v/archive/2011/05/28/6451990.aspx\" style=\"color: rgb(34, 0, 0); text-decoration: none; \">第十章、如何给10^7个数据量的磁盘文件排序</a>；</li><li><a target=\"_blank\" href=\"http://blog.csdn.net/v_JULY_v/archive/2011/06/07/6530142.aspx\" style=\"color: rgb(34, 0, 0); text-decoration: none; \">从B树、B+树、B*树谈到R 树</a>；</li><li><a target=\"_blank\" href=\"http://blog.csdn.net/v_july_v/article/details/7085669\" style=\"color: rgb(34, 0, 0); text-decoration: none; \">第二十三、四章：杨氏矩阵查找，倒排索引关键词Hash不重复编码实践</a>；</li><li><a target=\"_blank\" href=\"http://blog.csdn.net/v_july_v/article/details/7109500\" style=\"color: rgb(51, 102, 153); text-decoration: none; \">第二十六章：基于给定的文档生成倒排索引的编码与实践</a>；</li><li><a target=\"_blank\" title=\"从Hadhoop框架与MapReduce模式中谈海量数据处理\" href=\"http://blog.csdn.net/v_july_v/article/details/6704077\" style=\"color: rgb(34, 0, 0); text-decoration: none; \">从Hadhoop框架与MapReduce模式中谈海量数据处理</a>；</li><li><span style=\"font-family: SimHei; \"><a target=\"_blank\" href=\"http://blog.csdn.net/v_july_v/article/details/6879101\" style=\"color: rgb(34, 0, 0); text-decoration: none; \">第十六~第二十章：全排列，跳台阶，奇偶排序，第一个只出现一次等问题</a>；</span></li><li><a target=\"_blank\" href=\"http://blog.csdn.net/v_JULY_v/article/category/774945\" style=\"color: rgb(51, 102, 153); text-decoration: none; \"><span style=\"font-family: \'Comic Sans MS\'; \">http://blog.csdn.net/v_JULY_v/article/category/774945</span></a><span style=\"font-family: SimHei; \">；</span></li><li><span style=\"font-family: \'Comic Sans MS\'; \">STL源码剖析第五章，侯捷著；</span></li><li>2012百度实习生招聘笔试题：<a target=\"_blank\" href=\"http://blog.csdn.net/hackbuteer1/article/details/7542774\" style=\"color: rgb(51, 102, 153); text-decoration: none; \"><span style=\"font-family: \'Comic Sans MS\'; \">http://blog.csdn.net/hackbuteer1/article/details/7542774</span></a><span style=\"font-family: \'Microsoft YaHei\'; \">。</span></li></ol><div style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \"><span style=\"font-family: \'Microsoft YaHei\'; font-size: 18px; \"><span style=\"font-size: 14px; \"><br /></span></span></div><h3 style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; color: rgb(51, 51, 51); font-family: Arial; line-height: 26px; text-align: left; \"><a name=\"t15\" style=\"color: rgb(51, 102, 153); \"></a>后记</h3><div style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp; 经过上面这么多海量数据处理面试题的轰炸，我们依然可以看出这类问题是有一定的解决方案/模式的，所以，不必将其神化。然这类面试题所包含的问题还是比较简单的，若您在这方面有更多实践经验，欢迎随时来信与我不吝分享：<span style=\"font-family: \'Comic Sans MS\'; \">zhoulei0907@yahoo.cn</span>。当然，自会注明分享者及来源。</div><div style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp; 不过，相信你也早就意识到，若单纯论海量数据处理面试题，本blog内的有关海量数据处理面试题的文章已涵盖了你能在网上所找到的7<span style=\"font-family: \'Comic Sans MS\'; \">0~80%</span>。但有点，必须负责任的敬告大家：无论是这些海量数据处理面试题也好，还是算法也好，<span style=\"color: rgb(255, 0, 0); \">面试时</span>，<span style=\"font-family: \'Comic Sans MS\'; \">70~80%</span>的人不是倒在这两方面，而是倒在基础之上(<span style=\"font-family: SimHei; \">诸如语言，数据库，操作系统，网络协议等等</span>)，所以，<span style=\"color: rgb(153, 0, 0); \">无论任何时候，基础最重要</span>，没了基础，便什么都不是。如果你问我什么叫做掌握了基础，很简单，我可以举个例子，如到这里：<a target=\"_blank\" href=\"http://forum.csdn.net/BList/Cpp/\" style=\"color: rgb(51, 102, 153); text-decoration: none; \"><span style=\"font-family: \'Comic Sans MS\'; \">http://forum.csdn.net/BList/Cpp/</span></a>，如果你几乎能解决那里的全部问题，那么你的<span style=\"font-family: \'Comic Sans MS\'; \">c/c++</span>基础便够了。</div><div style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp; 最后，推荐国外一面试题网站：<span style=\"font-family: \'Comic Sans MS\'; \"><a target=\"_blank\" href=\"http://www.careercup.com/\" style=\"color: rgb(51, 102, 153); text-decoration: none; \">http://www.careercup.com/</a>，</span>以及个人正在读的<span style=\"font-family: \'Comic Sans MS\'; \">Redis/MongoDB</span>绝佳站点：<a target=\"_blank\" href=\"http://blog.nosqlfan.com/\" style=\"color: rgb(51, 102, 153); text-decoration: none; font-family: \'Comic Sans MS\'; \">http://blog.nosqlfan.com/</a>。</div><div style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; text-align: left; \">&nbsp; &nbsp; OK，本文若有任何问题，欢迎随时不吝留言，评论，赐教，谢谢。完。</div>', '6', '1', '2014-03-05 00:51:52', '2014-03-05 00:51:52', '1033', '0', '1', '1', null, null, null);
INSERT INTO `tech_blog_article` VALUES ('20', 'HTML5/CSS3各浏览器支持情况一览表', '<h3><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\"><a class=\"relatedlink\" href=\"http://www.html5cn.org/portal.php?mod=list&amp;catid=16\" target=\"_blank\">CSS3</a>性质(CSS3 Properties)</span></span></h3><p></p><table width=\"100%\" class=\"litmus-browser-support-results params_table    \" cellspacing=\"1\" cellpadding=\"0\" summary=\"浏览器对CSS3各个属性的支持情况\"><thead><tr><th class=\"primary-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">平台</span></th><th class=\"primary-heading\" colspan=\"4\" scope=\"colgroup\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">MAC</span></th><th class=\"primary-heading\" colspan=\"9\" scope=\"colgroup\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">WIN</span></th></tr><tr><th class=\"secondary-heading row-heading\" scope=\"row\"><span class=\"offScreen\" style=\"font-weight: normal;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">浏览器</span></span></th><th class=\"browser-chrome browser-id secondary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">CHROME</span></th><th class=\"browser-firefox browser-id secondary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">FIREFOX</span></th><th class=\"browser-opera browser-id secondary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">OPERA</span></th><th class=\"browser-safari browser-id secondary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">SAFARI</span></th><th class=\"browser-chrome browser-id secondary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">CHROME</span></th><th class=\"browser-firefox browser-id secondary-heading\" colspan=\"2\" scope=\"colgroup\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">FIREFOX</span></th><th class=\"browser-opera browser-id secondary-heading\" colspan=\"2\" scope=\"colgroup\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">OPERA</span></th><th class=\"browser-safari browser-id secondary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">SAFARI</span></th><th class=\"browser-ie browser-id secondary-heading\" colspan=\"3\" scope=\"colgroup\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">IE</span></th></tr><tr><th class=\"tertiary-heading row-heading\" scope=\"row\"><span class=\"offScreen\" style=\"font-weight: normal;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">版本</span></span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">5</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">3.6</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">10.1</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">4</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">4</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">3.6</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">3</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">10</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">10.5</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">4</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">6</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">7</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">8</span></th></tr></thead><tbody><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">RGBA</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">HSLA</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">Multiple Backgrounds</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">Border Image</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">Border Radius</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">Box Shadow</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">Opacity</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">CSS Animations</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">CSS Columns</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">CSS Gradients</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">CSS Reflections</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">CSS Transforms</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">CSS Transforms 3D</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">CSS Transitions</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">CSS FontFace</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td></tr></tbody></table><h3><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\"><br /></span></h3><h3><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">CSS3选择器(CSS3 Selectors)</span></span></h3><p></p><table width=\"100%\" class=\"litmus-browser-support-results params_table    \" cellspacing=\"1\" summary=\"CSS3选择器的浏览器支持情况一览表 张鑫旭-鑫空间-鑫生活\"><thead><tr><th class=\"primary-heading\" scope=\"row\"><span class=\"offScreen\" style=\"font-weight: normal;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">平台</span></span></th><th class=\"primary-heading\" colspan=\"4\" scope=\"colgroup\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">MAC</span></th><th class=\"primary-heading\" colspan=\"9\" scope=\"colgroup\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">WIN</span></th></tr><tr><th class=\"secondary-heading row-heading\" scope=\"row\"><span class=\"offScreen\" style=\"font-weight: normal;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">浏览器</span></span></th><th class=\"browser-chrome browser-id secondary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">CHROME</span></th><th class=\"browser-firefox browser-id secondary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">FIREFOX</span></th><th class=\"browser-opera browser-id secondary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">OPERA</span></th><th class=\"browser-safari browser-id secondary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">SAFARI</span></th><th class=\"browser-chrome browser-id secondary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">CHROME</span></th><th class=\"browser-firefox browser-id secondary-heading\" colspan=\"2\" scope=\"colgroup\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">FIREFOX</span></th><th class=\"browser-opera browser-id secondary-heading\" colspan=\"2\" scope=\"colgroup\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">OPERA</span></th><th class=\"browser-safari browser-id secondary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">SAFARI</span></th><th class=\"browser-ie browser-id secondary-heading\" colspan=\"3\" scope=\"colgroup\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">IE</span></th></tr><tr><th class=\"tertiary-heading row-heading\" scope=\"row\"><span class=\"offScreen\" style=\"font-weight: normal;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">版本</span></span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">5</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">3.6</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">10.1</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">4</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">4</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">3.6</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">3</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">10</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">10.5</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">4</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">6</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">7</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">8</span></th></tr></thead><tbody><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">CSS3: Begins with</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">CSS3: Ends with</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">CSS3: Matches</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">CSS3: Root</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">CSS3: nth-child</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">CSS3: nth-last-child</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">CSS3: nth-of-type</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">CSS3: nth-last-of-type</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">CSS3: last-child</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">CSS3: first-of-type</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">CSS3: last-of-type</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">CSS3: only-child</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">CSS3: only-of-type</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">CSS3: empty</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">CSS3: target</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">CSS3: enabled</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">CSS3: disabled</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">CSS3: checked</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">CSS3: not</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">CSS3: General Sibling</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td></tr></tbody></table><h3><br /></h3><h3><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\"><a class=\"relatedlink\" href=\"http://www.html5cn.org/\" target=\"_blank\">HTML5</a> web应用(HTML5 Web Applications)</span></span></h3><p></p><table width=\"100%\" class=\"litmus-browser-support-results params_table    \" cellspacing=\"1\" summary=\"浏览器对HTML5互联网应用的支持情况表 张鑫旭-鑫空间-鑫生活\"><thead><tr><th class=\"primary-heading\" scope=\"row\"><span class=\"offScreen\" style=\"font-weight: normal;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">平台</span></span></th><th class=\"primary-heading\" colspan=\"4\" scope=\"colgroup\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">MAC</span></th><th class=\"primary-heading\" colspan=\"9\" scope=\"colgroup\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">WIN</span></th></tr><tr><th class=\"secondary-heading row-heading\" scope=\"row\"><span class=\"offScreen\" style=\"font-weight: normal;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">浏览器</span></span></th><th class=\"browser-chrome browser-id secondary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">CHROME</span></th><th class=\"browser-firefox browser-id secondary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">FIREFOX</span></th><th class=\"browser-opera browser-id secondary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">OPERA</span></th><th class=\"browser-safari browser-id secondary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">SAFARI</span></th><th class=\"browser-chrome browser-id secondary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">CHROME</span></th><th class=\"browser-firefox browser-id secondary-heading\" colspan=\"2\" scope=\"colgroup\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">FIREFOX</span></th><th class=\"browser-opera browser-id secondary-heading\" colspan=\"2\" scope=\"colgroup\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">OPERA</span></th><th class=\"browser-safari browser-id secondary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">SAFARI</span></th><th class=\"browser-ie browser-id secondary-heading\" colspan=\"3\" scope=\"colgroup\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">IE</span></th></tr><tr><th class=\"tertiary-heading row-heading\" scope=\"row\"><span class=\"offScreen\" style=\"font-weight: normal;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">版本</span></span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">5</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">3.6</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">10.1</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">4</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">4</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">3.6</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">3</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">10</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">10.5</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">4</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">6</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">7</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">8</span></th></tr></thead><tbody><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">Local Storage</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">Session Storage</span></th><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">Post Message</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">Offline Applications</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">Workers</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">Query Selector</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">Web Database</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">GeoLocation</span></th><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr></tbody></table><h3><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\"><br /></span></h3><h3><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">HTML5嵌入内容(HTML5 Embedded Content)</span></span></h3><p></p><table width=\"100%\" class=\"litmus-browser-support-results params_table    \" cellspacing=\"1\" summary=\"HTML5嵌入内容的浏览器支持情况 张鑫旭-鑫空间-鑫生活\"><thead><tr><th class=\"primary-heading\" scope=\"row\"><span class=\"offScreen\" style=\"font-weight: normal;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">平台</span></span></th><th class=\"primary-heading\" colspan=\"4\" scope=\"colgroup\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">MAC</span></th><th class=\"primary-heading\" colspan=\"9\" scope=\"colgroup\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">WIN</span></th></tr><tr><th class=\"secondary-heading row-heading\" scope=\"row\"><span class=\"offScreen\" style=\"font-weight: normal;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">浏览器</span></span></th><th class=\"browser-chrome browser-id secondary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">CHROME</span></th><th class=\"browser-firefox browser-id secondary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">FIREFOX</span></th><th class=\"browser-opera browser-id secondary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">OPERA</span></th><th class=\"browser-safari browser-id secondary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">SAFARI</span></th><th class=\"browser-chrome browser-id secondary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">CHROME</span></th><th class=\"browser-firefox browser-id secondary-heading\" colspan=\"2\" scope=\"colgroup\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">FIREFOX</span></th><th class=\"browser-opera browser-id secondary-heading\" colspan=\"2\" scope=\"colgroup\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">OPERA</span></th><th class=\"browser-safari browser-id secondary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">SAFARI</span></th><th class=\"browser-ie browser-id secondary-heading\" colspan=\"3\" scope=\"colgroup\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">IE</span></th></tr><tr><th class=\"tertiary-heading row-heading\" scope=\"row\"><span class=\"offScreen\" style=\"font-weight: normal;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">版本</span></span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">5</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">3.6</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">10.1</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">4</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">4</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">3.6</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">3</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">10</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">10.5</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">4</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">6</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">7</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">8</span></th></tr></thead><tbody><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">Canvas</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">Canvas Text</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">Audio</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">Video</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr></tbody></table><h3><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\"><br /></span></h3><h3><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">HTML5音频编码(HTML5 Audio Codecs)</span></span></h3><p></p><table width=\"100%\" class=\"litmus-browser-support-results params_table    \" cellspacing=\"1\" summary=\"HTML5音频编码的浏览器支持情况表 张鑫旭-鑫空间-鑫生活\"><thead><tr><th class=\"primary-heading\" scope=\"row\"><span class=\"offScreen\" style=\"font-weight: normal;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">平台</span></span></th><th class=\"primary-heading\" colspan=\"4\" scope=\"colgroup\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">MAC</span></th><th class=\"primary-heading\" colspan=\"9\" scope=\"colgroup\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">WIN</span></th></tr><tr><th class=\"secondary-heading row-heading\" scope=\"row\"><span class=\"offScreen\" style=\"font-weight: normal;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">浏览器</span></span></th><th class=\"browser-chrome browser-id secondary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">CHROME</span></th><th class=\"browser-firefox browser-id secondary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">FIREFOX</span></th><th class=\"browser-opera browser-id secondary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">OPERA</span></th><th class=\"browser-safari browser-id secondary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">SAFARI</span></th><th class=\"browser-chrome browser-id secondary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">CHROME</span></th><th class=\"browser-firefox browser-id secondary-heading\" colspan=\"2\" scope=\"colgroup\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">FIREFOX</span></th><th class=\"browser-opera browser-id secondary-heading\" colspan=\"2\" scope=\"colgroup\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">OPERA</span></th><th class=\"browser-safari browser-id secondary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">SAFARI</span></th><th class=\"browser-ie browser-id secondary-heading\" colspan=\"3\" scope=\"colgroup\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">IE</span></th></tr><tr><th class=\"tertiary-heading row-heading\" scope=\"row\"><span class=\"offScreen\" style=\"font-weight: normal;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">版本</span></span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">5</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">3.6</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">10.1</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">4</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">4</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">3.6</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">3</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">10</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">10.5</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">4</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">6</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">7</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">8</span></th></tr></thead><tbody><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">Audio: ogg</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">Audio: mp3</span></th><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">Audio: wav</span></th><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">Audio: AAC</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr></tbody></table><h3><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\"><br /></span></h3><h3><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">HTML5视频编码(HTML5 Video Codecs)</span></span></h3><p></p><table width=\"100%\" class=\"litmus-browser-support-results params_table    \" cellspacing=\"1\" summary=\"HTML5视频编码的浏览器支持情况表 张鑫旭-鑫空间-鑫生活\"><thead><tr><th class=\"primary-heading\" scope=\"row\"><span class=\"offScreen\" style=\"font-weight: normal;\"><span style=\"font-family: \'Microsoft YaHei\';\">平台</span></span></th><th class=\"primary-heading\" colspan=\"4\" scope=\"colgroup\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">MAC</span></th><th class=\"primary-heading\" colspan=\"9\" scope=\"colgroup\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">WIN</span></th></tr><tr><th class=\"secondary-heading row-heading\" scope=\"row\"><span class=\"offScreen\" style=\"font-weight: normal;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">浏览器</span></span></th><th class=\"browser-chrome browser-id secondary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">CHROME</span></th><th class=\"browser-firefox browser-id secondary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">FIREFOX</span></th><th class=\"browser-opera browser-id secondary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">OPERA</span></th><th class=\"browser-safari browser-id secondary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">SAFARI</span></th><th class=\"browser-chrome browser-id secondary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">CHROME</span></th><th class=\"browser-firefox browser-id secondary-heading\" colspan=\"2\" scope=\"colgroup\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">FIREFOX</span></th><th class=\"browser-opera browser-id secondary-heading\" colspan=\"2\" scope=\"colgroup\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">OPERA</span></th><th class=\"browser-safari browser-id secondary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">SAFARI</span></th><th class=\"browser-ie browser-id secondary-heading\" colspan=\"3\" scope=\"colgroup\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">IE</span></th></tr><tr><th class=\"tertiary-heading row-heading\" scope=\"row\"><span class=\"offScreen\" style=\"font-weight: normal;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">版本</span></span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">5</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">3.6</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">10.1</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">4</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">4</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">3.6</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">3</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">10</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">10.5</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">4</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">6</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">7</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">8</span></th></tr></thead><tbody><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">Video: ogg</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">Video: H.264</span></th><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr></tbody></table><h3><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\"><br /></span></h3><h3><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">HTML5表单输入框(HTML5 Forms Inputs)</span></span></h3><p></p><table width=\"100%\" class=\"litmus-browser-support-results params_table    \" cellspacing=\"1\" summary=\"HTML5表单输入框主流浏览器的支持情况表 张鑫旭-鑫空间-鑫生活\"><thead><tr><th class=\"primary-heading\" scope=\"row\"><span class=\"offScreen\" style=\"font-weight: normal;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">平台</span></span></th><th class=\"primary-heading\" colspan=\"4\" scope=\"colgroup\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">MAC</span></th><th class=\"primary-heading\" colspan=\"9\" scope=\"colgroup\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">WIN</span></th></tr><tr><th class=\"secondary-heading row-heading\" scope=\"row\"><span class=\"offScreen\" style=\"font-weight: normal;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">浏览器</span></span></th><th class=\"browser-chrome browser-id secondary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">CHROME</span></th><th class=\"browser-firefox browser-id secondary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">FIREFOX</span></th><th class=\"browser-opera browser-id secondary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">OPERA</span></th><th class=\"browser-safari browser-id secondary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">SAFARI</span></th><th class=\"browser-chrome browser-id secondary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">CHROME</span></th><th class=\"browser-firefox browser-id secondary-heading\" colspan=\"2\" scope=\"colgroup\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">FIREFOX</span></th><th class=\"browser-opera browser-id secondary-heading\" colspan=\"2\" scope=\"colgroup\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">OPERA</span></th><th class=\"browser-safari browser-id secondary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">SAFARI</span></th><th class=\"browser-ie browser-id secondary-heading\" colspan=\"3\" scope=\"colgroup\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">IE</span></th></tr><tr><th class=\"tertiary-heading row-heading\" scope=\"row\"><span class=\"offScreen\" style=\"font-weight: normal;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">版本</span></span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">5</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">3.6</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">10.1</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">4</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">4</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">3.6</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">3</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">10</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">10.5</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">4</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">6</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">7</span></th><th class=\"tertiary-heading\" scope=\"col\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">8</span></th></tr></thead><tbody><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">Form: Search</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">Form: Phone</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">Form: URL</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">Form: Email</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">Form: DateTime</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">Form: Date</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">Form: Month</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">Form: Week</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">Form: Time</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">Form: LocalTime</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">Form: Number</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">Form: Range</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr><tr><th class=\"row-heading\" scope=\"row\"><span style=\"font-family:Microsoft YaHei;font-size:12px;font-weight: normal;\">Form: Colour</span></th><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td class=\"supported\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Y</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td><td><span style=\"font-family:Microsoft YaHei;font-size:12px;\">N</span></td></tr></tbody></table>', '2', '1', '2014-03-20 15:39:30', '2014-03-20 15:44:54', '881', '0', '1', '1', null, null, null);
INSERT INTO `tech_blog_article` VALUES ('21', 'WSDL绑定的style和use', '<div style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><span style=\"white-space: pre;\">	</span>在<a href=\"http://www.charlestech.org/view_article.shtml?uid=SXQZCADREW58\" target=\"_blank\">WSDL文档详解</a>中提到，wsdl binding中，&lt;wsdlsoap:binding&gt;标签可以指定其style，style有两种：<span style=\"orphans: 2; widows: 2;\">rpc和doucment。对于每个绑定的operation，也可以通过&quot;use&quot;指定其编码方式，use也有两种：encoded和literal。这里将对着两种style和use的优缺点以及组合方式进行分析。</span></span></div><div style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><span style=\"orphans: 2; widows: 2;\"><br /></span></span></div><div><span style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><strong>1. WSDL绑定的样式style有两种取值：rpc和doucment</strong></span></span><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">rpc和document的区别在于，生成的SOAP消息的主体Body中，是否出现操作名。</span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">（1）若使用rpc绑定样式，生成的SOAP消息的Body中，以操作名来调用对应的接口。</span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><ul><li><span style=\"font-family:Microsoft YaHei;font-size:16px;\">优点：操作名出现在消息中，服务接受者可以根据操作名直接调用对应的接口</span></li><li><span style=\"font-family:Microsoft YaHei;font-size:16px;\">缺点：以操作名标签的定义是在WSDL中，没有定义在schema中，所以不能直接验证SOAP消息的有效性</span></li></ul></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">（2）若使用document绑定样式，生成的SOAP消息的Body中，不出现操作名，而是直接发送传入参数。所以在WSDL文档中，需要在types标签中用schema定义参数类型element，SOAP消息用定义的element发送传入参数<br /></span><div><ul><li><span style=\"font-family:Microsoft YaHei;font-size:16px;\">优点：操作名没有出现在消息中，服务接受者难以根据操作名直接调用对应的接口</span></li><li><span style=\"font-family:Microsoft YaHei;font-size:16px;\">缺点：body下所有标签都定义在schema中，可以直接验证SOAP消息的有效性</span></li></ul><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><br /></span></div></div><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><strong>2. WSDL绑定operation的编码用法也有两种取值：encoded和literal</strong></span></div><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\">encoded和literal的区别在于，生成的SOAP消息的主体Body中，是否出现参数的类型</span></div><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\">（1）若使用encoded方式，生成的SOAP消息的传入参数包含类型定义</span></div><div><ul><li><span style=\"font-family:Microsoft YaHei;font-size:16px;\">优点：服务请求端可以定义传入参数的类型</span></li><li><span style=\"font-family:Microsoft YaHei;font-size:16px;\">缺点：需要对传入参数进行编码，增加了开销</span></li></ul><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\">（2）若使用literal方式，生成的SOAP消息的传入参数不包含类型定义</span></div></div><div><ul><li><span style=\"font-family:Microsoft YaHei;font-size:16px;\">优点：不需要对传入参数进行编码，减少了开销服务</span></li><li><span style=\"font-family:Microsoft YaHei;font-size:16px;\">缺点：请求端不可以定义传入参数的类型</span></li></ul><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><br /></span></div><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><strong>3. 常用的style和use组合方式</strong></span></div></div></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">（1）上面提到style有两种方式，use有两种方式，所以组合起来有四种。</span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">另外还有一种样式叫wrapped包装，wrapped包装是结合了document和rpc的优缺点，wrapped样式下，WSDL文档为接口的输入参数包装了一个符合类型element，这个element的名称与该接口操作名一致，那么SOAP消息中，就可以用与该element同名的标签包装输入参数值，这种情况下，SOAP消息的Body下所有标签都是在schema中定义过的，可以直接进行有效性验证，而由于element名称与操作名相同，接受者可以直接调用到对应的服务接口。</span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><br /></span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">（2）WSDL常用的样式组合方式有5种，以接口double add(double a, double b)为例：</span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><ul><li><span style=\"font-family:Microsoft YaHei;font-size:16px;\">rpc/encoded方式</span></li></ul><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\">WSDL文档：</span></div></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><pre class=\"brush: js;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">&lt;wsdl:message name=&quot;addRequest&quot;&gt;\n&lt;wsdl:part name=&quot;a&quot; type=&quot;xsd:double&quot;/&gt;\n&lt;wsdl:part name=&quot;b&quot; type=&quot;xsd:double&quot;/&gt;\n&lt;/wsdl:message&gt;\n......\n\n&lt;wsdl:portType name=&quot;ComputerServicePortType&quot;&gt;\n&lt;wsdl:operation name=&quot;add&quot;&gt;\n&lt;wsdl:input name=&quot;addRequest&quot; message=&quot;tns:addRequest&quot;/&gt;\n&lt;wsdl:output name=&quot;addResponse&quot; message=&quot;tns:addResponse&quot;/&gt;\n&lt;/wsdl:operation&gt;\n&lt;/wsdl:portType&gt;\n\n&lt;wsdl:binding name=&quot;ComputerServiceHttpBinding&quot; type=&quot;tns:ComputerServicePortType&quot;&gt;\n&lt;wsdlsoap:binding style=&quot;rpc&quot; transport=&quot;http://schemas.xmlsoap.org/soap/http&quot;/&gt;\n&lt;wsdl:operation name=&quot;add&quot;&gt;\n&lt;wsdlsoap:operation soapAction=&quot;&quot;/&gt;\n&lt;wsdl:input name=&quot;addRequest&quot;&gt;\n&lt;wsdlsoap:body use=&quot;encoded&quot;/&gt;\n&lt;/wsdl:input&gt;\n&lt;wsdl:output name=&quot;addResponse&quot;&gt;\n&lt;wsdlsoap:body use=&quot;encoded&quot;/&gt;\n&lt;/wsdl:output&gt;\n&lt;/wsdl:operation&gt;\n&lt;/wsdl:binding&gt;</span></pre><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><br /></span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><br /></span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">SOAP消息：</span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><pre class=\"brush: js;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">&lt;soap:envelope&gt;\n    &lt;soap:body&gt;\n        &lt;add&gt;\n            &lt;a xsi:type=&quot;xsd:int&quot;&gt;5&lt;/a&gt;\n            &lt;b xsi:type=&quot;xsd:float&quot;&gt;5.0&lt;/b&gt;\n        &lt;/add&gt;\n    &lt;/soap:body&gt;\n&lt;/soap:envelope&gt;</span></pre><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><br /></span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><br /></span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">优点：</span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">a） WSDL文档中不定义输入输出参数的类型schema，而是在message中直接指定。文档简洁，可读性好</span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">b） SOAP消息中，发送操作名add，接受者可以直接根据操作名调用相应接口</span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><br /></span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">缺点：</span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">a）SOAP消息中出现传入参数类型定义，需要对类型进行编码，加大了开销</span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">b）add标签的定义来自WSDL文档，所以不能直接对SOAP消息进行有效性的验证</span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><br /></span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><br /></span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><div><ul><li><span style=\"font-family:Microsoft YaHei;font-size:16px;\">rpc/literal方式</span></li></ul><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\">WSDL文档：</span></div></div><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\">同rpc/encoded方式，use改为literal</span></div><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><br /></span></div><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\">SOAP消息：</span></div><div><pre class=\"brush: js;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">&lt;soap:envelope&gt;\n    &lt;soap:body&gt;\n        &lt;add&gt;\n            &lt;a&gt;5&lt;/a&gt;\n            &lt;b&gt;5.0&lt;/b&gt;\n        &lt;/add&gt;\n    &lt;/soap:body&gt;\n&lt;/soap:envelope&gt;</span></pre></div><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><br /></span></div><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\">优点：</span></div><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\">a）&nbsp;同rpc/encoded方式，WSDL文档中不定义输入输出参数的类型schema，而是在message中直接指定。文档简洁，可读性好</span></div><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\">b）&nbsp;同rpc/encoded方式，SOAP消息中，发送操作名add，接受者可以直接根据操作名调用相应接口</span></div><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\">c）&nbsp;SOAP消息中不出现传入参数类型定义，减小了开销</span></div><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><br /></span></div><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\">缺点：</span></div><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\">a）同rpc/encoded方式,&nbsp;add标签的定义来自WSDL文档，所以不能直接对SOAP消息进行有效性的验证</span></div><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><br /></span></div><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><br /></span></div><div><div><ul><li><span style=\"font-family:Microsoft YaHei;font-size:16px;\">document/encoded方式</span></li></ul><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\">这种方式不被现有平台支持，所以几乎没有被使用</span></div><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><br /></span></div><div><ul><li><span style=\"font-family:Microsoft YaHei;font-size:16px;\">document/literal方式</span></li></ul></div><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\">WSDL文档：</span></div></div><div><pre class=\"brush: js;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">&lt;wsdl:types&gt;\n&lt;xsd:schema xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; attributeFormDefault=&quot;qualified&quot; elementFormDefault=&quot;qualified&quot; targetNamespace=&quot;http://service.charlestech.org&quot;&gt;\n     &lt;xsd:element name=&quot;a&quot; type=&quot;xsd:double&quot;/&gt;\n     &lt;xsd:element name=&quot;b&quot; type=&quot;xsd:double&quot;/&gt;\n&lt;/xsd:schema&gt;\n&lt;/wsdl:types&gt;\n\n&lt;wsdl:message name=&quot;addRequest&quot;&gt;\n&lt;wsdl:part name=&quot;a&quot; element=&quot;tns:a&quot;/&gt;\n&lt;wsdl:part name=&quot;b&quot; element=&quot;tns:b&quot;/&gt;\n&lt;/wsdl:message&gt;\n\n......\n\n&lt;wsdl:portType name=&quot;ComputerServicePortType&quot;&gt;\n&lt;wsdl:operation name=&quot;add&quot;&gt;\n&lt;wsdl:input name=&quot;addRequest&quot; message=&quot;tns:addRequest&quot;/&gt;\n&lt;wsdl:output name=&quot;addResponse&quot; message=&quot;tns:addResponse&quot;/&gt;\n&lt;/wsdl:operation&gt;\n&lt;/wsdl:portType&gt;\n\n&lt;wsdl:binding name=&quot;ComputerServiceHttpBinding&quot; type=&quot;tns:ComputerServicePortType&quot;&gt;\n&lt;wsdlsoap:binding style=&quot;document&quot; transport=&quot;http://schemas.xmlsoap.org/soap/http&quot;/&gt;\n&lt;wsdl:operation name=&quot;add&quot;&gt;\n&lt;wsdlsoap:operation soapAction=&quot;&quot;/&gt;\n&lt;wsdl:input name=&quot;addRequest&quot;&gt;\n&lt;wsdlsoap:body use=&quot;literal&quot;/&gt;\n&lt;/wsdl:input&gt;\n&lt;wsdl:output name=&quot;addResponse&quot;&gt;\n&lt;wsdlsoap:body use=&quot;literal&quot;/&gt;\n&lt;/wsdl:output&gt;\n&lt;/wsdl:operation&gt;\n&lt;/wsdl:binding&gt;</span></pre><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><br /></span></div><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><br /></span></div><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\">SOAP消息：</span></div><div><pre class=\"brush: js;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">&lt;soap:envelope&gt;\n    &lt;soap:body&gt;\n            &lt;a&gt;5&lt;/b&gt;\n            &lt;a&gt;5.0&lt;/b&gt;\n    &lt;/soap:body&gt;\n&lt;/soap:envelope&gt;</span></pre></div><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><br /></span></div><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\">优点：</span></div><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\">a） SOAP消息中所有标签都在schema中定义，可以直接验证SOAP消息的有效性</span></div><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\">b）&nbsp;SOAP消息中不出现传入参数类型定义，减小了开销</span></div><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><br /></span></div><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\">缺点：</span></div><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\">a）WSDL文档中有类型的定义，文档结构较为复杂</span></div><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\">a）SOAP消息中没有出现操作名，服务接受者很难将请求绑定到具体的接口调用上</span></div><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><br /></span></div><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><br /></span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><br /></span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><div><div><ul><li><span style=\"font-family:Microsoft YaHei;font-size:16px;\">document/literal wrapped方式</span></li></ul></div><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\">WSDL文档：</span></div><div><pre class=\"brush: js;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">&lt;wsdl:types&gt;\n&lt;xsd:schema xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; attributeFormDefault=&quot;qualified&quot; elementFormDefault=&quot;qualified&quot; targetNamespace=&quot;http://service.charlestech.org&quot;&gt;\n     &lt;xsd:element name=&quot;add&quot;&gt;\n     &lt;xsd:complexType&gt;\n     &lt;xsd:sequence&gt;\n     &lt;xsd:element name=&quot;a&quot; type=&quot;xsd:double&quot;/&gt;\n     &lt;xsd:element name=&quot;b&quot; type=&quot;xsd:double&quot;/&gt;\n     &lt;/xsd:sequence&gt;\n     &lt;/xsd:complexType&gt;\n     &lt;/xsd:element&gt;\n&lt;/xsd:schema&gt;\n&lt;/wsdl:types&gt;\n\n&lt;wsdl:message name=&quot;addRequest&quot;&gt;\n&lt;wsdl:part name=&quot;a&quot; element=&quot;tns:a&quot;/&gt;\n&lt;wsdl:part name=&quot;b&quot; element=&quot;tns:b&quot;/&gt;\n&lt;/wsdl:message&gt;\n\n......\n\n&lt;wsdl:portType name=&quot;ComputerServicePortType&quot;&gt;\n&lt;wsdl:operation name=&quot;add&quot;&gt;\n&lt;wsdl:input name=&quot;addRequest&quot; message=&quot;tns:addRequest&quot;/&gt;\n&lt;wsdl:output name=&quot;addResponse&quot; message=&quot;tns:addResponse&quot;/&gt;\n&lt;/wsdl:operation&gt;\n&lt;/wsdl:portType&gt;\n\n&lt;wsdl:binding name=&quot;ComputerServiceHttpBinding&quot; type=&quot;tns:ComputerServicePortType&quot;&gt;\n&lt;wsdlsoap:binding style=&quot;document&quot; transport=&quot;http://schemas.xmlsoap.org/soap/http&quot;/&gt;\n&lt;wsdl:operation name=&quot;add&quot;&gt;\n&lt;wsdlsoap:operation soapAction=&quot;&quot;/&gt;\n&lt;wsdl:input name=&quot;addRequest&quot;&gt;\n&lt;wsdlsoap:body use=&quot;literal&quot;/&gt;\n&lt;/wsdl:input&gt;\n&lt;wsdl:output name=&quot;addResponse&quot;&gt;\n&lt;wsdlsoap:body use=&quot;literal&quot;/&gt;\n&lt;/wsdl:output&gt;\n&lt;/wsdl:operation&gt;\n&lt;/wsdl:binding&gt;</span></pre><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><br /></span></div><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><br /></span></div><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\">SOAP消息：</span></div><div><pre class=\"brush: js;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\">&lt;soap:envelope&gt;\n    &lt;soap:body&gt;\n          &lt;add&gt;\n            &lt;a&gt;5&lt;/b&gt;\n            &lt;a&gt;5.0&lt;/b&gt;\n          &lt;/add&gt;\n    &lt;/soap:body&gt;\n&lt;/soap:envelope&gt;</span></pre><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><br /></span></div><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><br /></span></div><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\">这里的SOAP消息看起来很像rpc/literal，应该说是几乎一样。但是，在rpc/literal组合方式下，add标签代表的是操作，而document/literal wrapped方式下，add标签代表的是WSDL文档中types标签下定义的复合类型。document/literal wrapped方式对参数类型进行了包装，且规定包装后的组合类型element名称要与操作名相同。</span></div><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><br /></span></div><div><span style=\"font-family:Microsoft YaHei;font-size:16px;\">所以，document/literal wrapped方式综合了rpc和document的优点，既能够直接对SOAP消息进行有效性验证，又能让服务接受者轻松找到对应接口进行调用，这种方式也使用得最广泛。</span></div></div></div></div>', '11', '1', '2014-04-03 16:23:23', '2014-04-03 16:35:46', '605', '0', '1', '1', null, null, null);
INSERT INTO `tech_blog_article` VALUES ('22', 'Web应用程序完全测试指南', '<p><span style=\"font-size:12px;\">来源：博客园&nbsp;</span></p><p><span style=\"font-size:12px;\">作者：Ranran　</span></p><p><span style=\"font-size:12px;\">原文转自：<a rel=\"external nofollow\" target=\"_blank\">http://www.cnblogs.com/ranran/p/web_test_test.html</a></span><br /></p><p><a rel=\"external nofollow\" target=\"_blank\"><br /></a></p><p><span style=\"white-space:pre\">	</span><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">随着<a href=\"http://www.ltesting.net/ceshi/ceshijishu/webcs/\" target=\"_blank\">Web</a>技术和移动互联网的发展，越来越多的应用被迁移到了云端，这也使得用户可以随时随地使用它们。目前大量的优质应用，逐渐提升了用户的品味，也降低了用户的容忍度，如果你的<a href=\"http://www.ltesting.net/ceshi/ceshijishu/webcs/\" target=\"_blank\">Web</a>应用无法使用户满意，那么很快就会有其他的应用来代替。 <span style=\"color: rgb(255, 255, 255);\"></span></span></span></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　对于<a href=\"http://www.ltesting.net/ceshi/ruanjianceshikaifajishu/\" target=\"_blank\">开发</a>者来说，建立良好的客户口碑才是最有意义的事情。在完成了Web应用的设计和<a href=\"http://www.ltesting.net/ceshi/ruanjianceshikaifajishu/\" target=\"_blank\">开发</a>工作后，并不意味着你就可以直接发布了，你还需要从各方面来对其进行<a href=\"http://www.ltesting.net/\" target=\"_blank\">测试</a>，以便让用户在使用过程中，不会出现各种各样的问题，比如<a href=\"http://www.ltesting.net/ceshi/ceshijishu/xncs/\" target=\"_blank\">性能</a>、使用体验、<a href=\"http://www.ltesting.net/ceshi/ceshijishu/aqcs/\" target=\"_blank\">安全</a>问题等等。 <span style=\"color:#ffffff;\"></span></span></span></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　那么对于Web应用来说，该测试哪些方面，该如何测试呢?来看看作者 Abhimanyu Ghoshal给出的这些建议。 <span class=\"Bat421\"></span></span></span></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　一、首先应该测试什么? </span></span></p><p class=\"Bat421\"></p><p></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　当测试Web应用的时候，首先要明确你的应用要用来做什么，比如帮助用户编辑照片、发送票据、联系朋友或跟踪社交媒介等。你通常需要着眼于这四大领域： <span style=\"color:#ffffff;\"></span></span></span></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　1. 功能性测试 <span style=\"color:#ffffff;\"></span></span></span></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　几乎所有的用户都期望自己所使用的Web应用功能准确、迅速、一致。这就意味着开发者必须精益求精，帮助用户实现某种形式上的结果。下面是一些需要全面测试的常见的功能元素： <span class=\"Bat421\"></span></span></span></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　表单：无论是反馈调查、创建任务计划，还是订阅新闻，都需要用到表单。你需要检查提交操作是否正常，是否能够提交连接并提交到你的数据中，所有字段是否能够接收输入的内容。 </span></span></p><div class=\"Bat421\"></div><p></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　文件操作和计算：这其中涉及图像和文档的上传、编辑、计算功能和正确的输出值。首先，要确保你能想象得到会有多少用户会使用你的应用，并尽可能地针对他们进行调节。另外，要考虑一下如何使你的App更有效地计算并显示出结果，给用户提供一个更加流畅的用户体验。 </span></span></p><p class=\"Bat421\"></p><p></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　搜索：如果你的应用允许用户搜索内容、文档或文件，那么就要保证你的搜索引擎能够索引这些信息，并定期更新，以便能够让用户实现快速查找，并根据查找条件快速显示相关结果。 </span></span></p><p class=\"Bat421\"></p><p></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　媒体播放组件：测试音频、<a href=\"http://www.ltesting.net/ceshi/video\" target=\"_blank\">视频</a>、动画和互动媒体播放组件(如游戏和图形工具)的时候，这些组件应该像预期的功能效果一样，在加载和运行的时候不能影响(暂停或减缓)其他应用的运行。 <span class=\"Bat421\"></span></span></span></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　脚本和类库：确保你的脚本(比如图像显示或Ajax页面加载)在各种浏览器之间是相互兼容的，因为不同的用户可能会使用不同的浏览器访问你的应用，同时你可以测量不同浏览器的加载时间来进行性能优化。如果你的脚本只能和某些浏览器相互兼容，那么就要确保应用中的其他组件有更好的性能，这样所有的用户就能得到最好的应用体验。 </span></span></p><p class=\"Bat421\"></p><p></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　最后，就是要全面检查其他组件的功能，包括提示系统、用户配置文件和管理仪表板等。 </span></span></p><p class=\"Bat421\"></p><p></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　2. 用户界面和可用性测试 </span></span></p><div class=\"Bat421\"></div><p></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　你的Web应用不但要像加满油的机器一样运行，还要能够为所有的用户提供一个高质量的前端体验。为了达到这个目标，你还需要考虑你的用户可能会遇到的所有的视觉和文本元素方面的问题，在Web应用发布之前，尽可能地测试这些元素，以确保它们正确而有效地显示。 </span></span></p><div class=\"Bat421\"></div><p></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　导航：主页面上的导航链接以及返回主页面的链接都应该明显的突出出来，并指向正确的目标页面。 </span></span></p><div class=\"Bat421\"></div><p></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　可访问性：尽最大可能的确保你的Web应用易于操作、使用，哪怕是对那些有视力障碍或行为障碍的人来说，简易的使用步骤是最受欢迎的。W3C有一篇文章 《Web Content Accessibility Guidelines》能够帮助你很好的定义这一点，并指出了如何让你的Web应用在广大用户群里成为“用户友好型”的应用。 </span></span></p><p class=\"Bat421\"></p><p></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　跨浏览器测试：用户很有可能会从多种浏览器和操作系统中访问你的站点，不要让你的应用在不同的环境下无法显示同样的效果，所以你需要尽可能多地测试这些浏览器和操作系统组合，以确保你的Web应用能够按照计划运行，为更广泛的用户提供一致的体验。 </span></span></p><p class=\"Bat421\"></p><p></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　错误消息和警告信息：在很多情况下，你的Web应用在某种程度上一定会崩溃，但这不是你的错。你所要做的就是：当用户遇到例如404页或无法成功上传<a href=\"http://www.ltesting.net/ceshi/down\" target=\"_blank\">资料</a>的问题的时候，要确保应用程序中显示的消息是描述性的、对用户来说对解决问题是很有帮助的。 </span></span></p><p class=\"Bat421\"></p><p></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　帮助和文档：并不是所有的用户在使用你的Web应用时都能感觉很顺畅，有些用户在刚开始的几次可能需要帮助;而其他人即使是很熟悉这款产品，也可能在使用该过程中会遇到一些问题。这时候你需要做的事是运行你的应用，检查文档，确保在任何模块或页面中都有渠道让用户快速获得帮助信息。 </span></span></p><p class=\"Bat421\"></p><p></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　布局：测试你的Web应用以确保它能够在尽可能多的浏览器和不同分辨率的屏幕中正确、一致地显示。 </span></span></p><p class=\"Bat421\"></p><p></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　你还可以继续检查一下所有的动画和交互操作(例如拖放特性和模态窗口)、字体和字形(尤其是Web字体)。当然，还有前端性能(页面渲染速度、图片和脚本加载时间)等。 <span class=\"Bat421\"></span></span></span></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　3. 安全性测试 </span></span></p><div class=\"Bat421\"></div><p></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　大多数Web应用都会从用户那里获取并储存数据，包括用户的个人信息、计费信息和工作/个人文件——这些数据都是用户在信任你的应用安全性的基础上才会输入的，所以你的Web应用应该做到下面这几点： </span></span></p><div class=\"Bat421\"></div><p></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　对私人数据进行加密 <span style=\"color:#ffffff;\"></span></span></span></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　在授予访问权限之前坚持进行身份验证，并对数据访问进行限制 <span style=\"color:#ffffff;\"></span></span></span></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　确保数据完整性，尊重用户的要求 <span style=\"color:#ffffff;\"></span></span></span></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　黑客可以在任何时间任何地方攻击你的应用，但是，如果你能熟悉Web应用漏洞的种类以及黑客常用手段的话，那这也是一个很好的避免被攻击的好方法。攻击Web站点和应用的方法通常包括： <span class=\"Bat421\"></span></span></span></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　跨站脚本：当一个网站被以诱骗的方式接受了恶意代码，它就会向用户传播这个恶意代码。 </span></span></p><p class=\"Bat421\"></p><p></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　<a href=\"http://www.ltesting.net/ceshi/ruanjianceshikaifajishu/rjcskf\" target=\"_blank\">SQL</a>注入：如果黑客通过一个用户输入漏洞运行一段<a href=\"http://www.ltesting.net/ceshi/ruanjianceshikaifajishu/rjcskf\" target=\"_blank\">SQL</a>命令，就可能导致用户数据遭到损坏或被窃。这些情况通常发生的原因是：Web应用允许在SQL命令或系统命令中使用特殊元素。 </span></span></p><p class=\"Bat421\"></p><p></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　DDoS(分布式拒绝服务)攻击：当一个Web应用无法呈现给用户的时候，通常它会向<a href=\"http://www.ltesting.net/ceshi/ruanjianceshikaifajishu/rjcshj\" target=\"_blank\">服务器</a>发出大量请求，会逐渐拖慢<a href=\"http://www.ltesting.net/ceshi/ruanjianceshikaifajishu/rjcshj\" target=\"_blank\">服务器</a>并导致最终无法响应。 <span style=\"color:#ffffff;\"></span></span></span></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　另外就是一定要对常见的、容易引起安全漏洞的<a href=\"http://www.ltesting.net/ceshi/ruanjianceshikaifajishu/\" target=\"_blank\">编程</a>错误进行测试，它们可能会让你的Web应用存在潜在的危险。这些常见的<a href=\"http://www.ltesting.net/ceshi/ruanjianceshikaifajishu/\" target=\"_blank\">编程</a>错误包括：缺少认证检查、使用硬编码凭证、没有加密敏感数据、没有锁定Web服务器目录访问。&nbsp;<br /></span></span></p><p></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\"><span style=\"white-space:pre\">	</span>除了对上面所述的内容进行测试以外，你还可以寻求正义的安全专家的帮助，或者是寻找一些专门针对安全测试的<a href=\"http://www.ltesting.net/ceshi/ceshijishu/zdcs/\" target=\"_blank\">自动化</a>工具。 <span style=\"color:#ffffff;\"></span></span></span></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　4. 加载测试 <span class=\"Qdq564\"></span></span></span></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　当你的Web应用的用户人数从10个增加到100个的时候，速度肯定是会慢下来的。另外，你还可能会发现，在某一天、某一月或者是某一个时刻，流量会剧增，这有可能是因为你的优惠政策吸引了病毒，或者是你的App出现在了某著名刊物上了，引来了众多的用户。 <span class=\"Qdq564\"></span></span></span></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　在加载测试环节，需要测试你的应用和服务器环境，以确保在不管有多少用户登录的情况下产品都能够顺利运行。大多数高质量的Web主机都提供了实时的、大范围的问题解决方案，所以在购买主机的时候一定要货比三家。 </span></span></p><div class=\"Qdq564\"></div><p></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　二、如何测试你的应用 <span style=\"color:#ffffff;\"></span></span></span></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　测试是构建Web项目不可分割的一部分，你需要通过一个系统化的方法来最大化有限时间和资源的使用。下面所列举的就是测试一个典型的Web应用所涉及到的步骤。 <span class=\"Qdq564\"></span></span></span></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　1. 设定目标 <span class=\"Qdq564\"></span></span></span></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　在大多数情况下，测试是一个有时限的检验过程，尤其是当Web应用准备发行的时候，这也就是为什么要考虑哪些功能需要优先测试。例如，如果你正在构建一个允许用户创建在线商店的App，你可能会优先测试支付网关连接这一功能，之后才会测试文本对齐问题。 </span></span></p><div class=\"Qdq564\"></div><p></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　目标优先不仅可以帮助你确保你的应用的主要功能完备，还可以让你在正确的方向上为整个开发团队制定清晰的计划流程表。 <span class=\"Qdq564\"></span></span></span></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　2. 定义流程和使用案例 </span></span></p><p class=\"Qdq564\"></p><p></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　在开始测试Web应用之前，为你和你的团队制定一个合理的流程非常重要。先收集所有可用的文档，和你的<a href=\"http://www.ltesting.net/ceshi/ceshijishu/rjcsgcsrm/\" target=\"_blank\">测试人员</a>分享一下观点。接下来，设想多个用户在使用你的应用时可能会遇到的场景，比如应用在使用过程中崩溃了该怎么办。 <span style=\"color:#ffffff;\"></span></span></span></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　一定要设置一个<a href=\"http://www.ltesting.net/ceshi/ceshijishu/qxgl/\" target=\"_blank\">bug</a>跟踪工具，测试人员可以用它来报告问题，开发人员和设计人员可以用它来识别和修复<a href=\"http://www.ltesting.net/ceshi/ceshijishu/qxgl/\" target=\"_blank\">bug</a>。 <span class=\"Qdq564\"></span></span></span></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　3. 设定一个测试环境 </span></span></p><div class=\"Qdq564\"></div><p></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　在测试你的Web应用之前，要将它部署在跟上线后的环境一致的服务器上，这样才能测试出各种真实使用情况下的问题。 <span style=\"color:#ffffff;\"></span></span></span></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　有些问题在本地服务器上是测试不出来的。例如，在一个地图Web应用上，地图中大量的SVG图像可能需要很长时间的加载过程，如果移动用户使用你的应用，会导致他陷入困境，无法获知前进的路线。 </span></span></p><div class=\"Qdq564\"></div><p></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　4. 真实的<a href=\"http://www.ltesting.net/ceshi/ceshijishu/dycs/\" target=\"_blank\">单元测试</a> <span class=\"Qdq564\"></span></span></span></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　Flow项目(一个致力于在线任务管理和协作的应用)的QA专家Jeremy Petter表示： <span style=\"color:#ffffff;\"></span></span></span></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　在大多数的Web应用测试过程中，困难是难以想象的，有可能要花一个星期的时间进行测试。不过也有捷径，那就是将整个App分解成可管理的几个块进行测试。 </span></span></p><div class=\"Qdq564\"></div><p></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　在Flow项目中我使用一个列表来标记每个用户在应用中进行交互的位置，以及它的一般形式和功能。因为这是一个模块化列表，你可以添加或删除一些项目，或者对在开发过程中发生变化的项目进行标注。 <span style=\"color:#ffffff;\"></span></span></span></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　5. 验证你的代码 </span></span></p><div class=\"Qdq564\"></div><p></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　为了提供一个清洁、无错的用户体验，你应该对代码进行验证，并确保它是建立在Web标准基础之上的。这样做不仅能增加跨浏览器<a href=\"http://www.ltesting.net/ceshi/ceshijishu/gncs/jrxcs/\" target=\"_blank\">兼容性</a>，而且还能提升Web应用的性能。 <span style=\"color:#ffffff;\"></span></span></span></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　6. 加载测试和性能调优 <span style=\"color:#ffffff;\"></span></span></span></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　测试你的Web应用和它的运行环境是否能经得起巨大的流量和激增的带宽<a href=\"http://www.ltesting.net/ceshi/ruanjianzhiliangbaozheng/xqgl/\" target=\"_blank\">需求</a>，并寻找可能会导致App性能问题的瓶颈。同时，你也可以考虑使用一些网上服务来监控用户流量、服务器利用率和因代码引起的问题，对App进行一些相应的微调，以提高App的速度和效率。 <span style=\"color:#ffffff;\"></span></span></span></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　7. 安全性测试 <span class=\"Qdq564\"></span></span></span></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　最后，测试你的Web应用以确保它能够对抗得了黑客的恶意攻击。从基本的应用可用性和正常运行时间开始进行测试，直到用户数据的完整性测试结束为止。 </span></span></p><div class=\"Qdq564\"></div><p></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　三、对于测试的两个小建议 <span style=\"color:#ffffff;\"></span></span></span></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　测试过程中，首先要考虑把用户放在第一位，在测试之前要彻底想清楚用户会怎么使用这个Web应用。设身处境的把自己放在用户的角度上思考一下，这会对制定切合实际的开发设计场景很有帮助。 </span></span></p><p class=\"Qdq564\"></p><p></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　Jeremy Petter对测试人员的建议是： <span class=\"Qdq564\"></span></span></span></p><p><span style=\"font-family: \'Microsoft YaHei\';\"><span style=\"font-size:16px;\">　　测试是注重细节的工作，需要高度集中注意力。而且最富有成效的测试过程发生在第一个小时或者是刚开始的时候，所以，在测试的时候最好是按照规定的时间开始/关闭项目，以便测试人员的注意力和效率达到最大化。 &nbsp;</span></span></p><br />', '8', '1', '2014-04-08 13:04:17', '2014-04-08 13:05:24', '606', '0', '1', '1', null, null, null);
INSERT INTO `tech_blog_article` VALUES ('23', 'Servlet的线程安全问题', '<h3>Servlet是线程安全的吗？</h3><p><span style=\"font-size:16px;\">&nbsp; 答案是否定的。这是由于Servlet在tomcat中是以单例模式存在的，也就是说，当客户端第一次请求servlet，tomcat容器会根据web.xml生成对应的servlet实例，当客户端第二次请求同一个servlet，tomcat容器不会再生成新的。因此，不同请求共享同一个servlet实例的资源，从而导致线程不安全的问题。</span></p><p><span style=\"font-size:16px;\">&nbsp;</span></p><h3>Servlet容器如何处理多个请求？</h3><p><span style=\"font-size:16px;\">&nbsp; Servlet容器通过维护一个线程池来处理多个请求，线程池中维护的是一组工作者线程（Worker Thread）。Servlet容器通过一个调度线程（Dispatcher Thread）来调度线程池中的线程，如图所示。</span></p><p><span style=\"font-size:16px;\">&nbsp;<img alt=\"\" src=\"/xheditor_img/20140413/fe0fcb56-5ef5-417a-9904-0a27d43a4c23.PNG\" /></span></p><p><span style=\"font-size:16px;\">&nbsp; 当客户端的servlet请求到来时，调度线程会从线程池中选出一个工作者线程并将请求传递给该线程，该线程就会执行对应servlet实例的service方法。同样，当客户端发起另一个servlet请求时，调度线程会从线程池中选出另一个线程去执行servlet实例的service方法。Servlet容器并不关心这些线程访问的是同一个servlet还是不同的servlet，当多个线程访问同一个servlet时，该servlet实例的service方法将在多个线性中并发执行。</span></p><p><span style=\"font-size:16px;\">&nbsp;</span></p><h3>Servlet的线程安全问题</h3><p><span style=\"font-size:16px;\">&nbsp; Servlet是线程不安全的，当多个线程访问同一个servlet实例，就会由于共享资源而导致线程不安全问题，例如一个线程修改覆盖了另一个线程的资源。</span></p><p><span style=\"font-size:16px;\">&nbsp; 我们可以模拟一个servlet线程不安全的示例，编写以下servlet程序，</span></p><pre class=\"brush: js;\"><span style=\"font-size:16px;\">package org.cc.servlet;\r\n\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\n\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\npublic class ThreadServlet extends HttpServlet {\r\n	private String user;\r\n\r\n	/**\r\n	 * The doGet method of the servlet.\r\n	 */\r\n	public void doGet(HttpServletRequest request, HttpServletResponse response)\r\n			throws ServletException, IOException {\r\n\r\n		response.setContentType(&quot;text/html&quot;);\r\n		PrintWriter out = response.getWriter();\r\n		user = request.getParameter(&quot;user&quot;);\r\n		try {\r\n			Thread.sleep(5000);\r\n		} catch (InterruptedException e) {\r\n			// TODO Auto-generated catch block\r\n			e.printStackTrace();\r\n		}\r\n		out.println(&quot;I am &quot; + user);\r\n	}\r\n\r\n	/**\r\n	 * The doPost method of the servlet.\r\n	 */\r\n	public void doPost(HttpServletRequest request, HttpServletResponse response)\r\n			throws ServletException, IOException {\r\n	}\r\n\r\n}\r\n</span></pre><p><span style=\"font-size:16px;\">&nbsp; 该servlet定义了一个全局变量user，用来接收来自url的参数user，并将其输出到页面上。使用sleep休眠的目的是提高当线程执行时变量被另一个线程修改的几率。</span></p><p><span style=\"font-size:16px;\">&nbsp; 打开两个浏览器，如果浏览器A先访问</span><a href=\"http://localhost:8080/MultiThread/ThreadServlet?user=charles\"><span style=\"font-size:16px;\">http://localhost:8080/MultiThread/ThreadServlet?user=charles</span></a><span style=\"font-size:16px;\">， 浏览器B同时访问</span><a href=\"http://localhost:8080/MultiThread/ThreadServlet?user=echo\"><span style=\"font-size:16px;\">http://localhost:8080/MultiThread/ThreadServlet?user=echo</span></a><span style=\"font-size:16px;\">, 我们很容易会发现，浏览器A输出的是&quot;I am echo&quot;，即A显示了B的访问结果。</span></p><p><span style=\"font-size:16px;\">&nbsp;</span></p><h3>编写线程安全的servlet</h3><p><span style=\"font-size:16px;\">1. 保证变量的线程安全</span></p><p><span style=\"font-size:16px;\">（1）尽量使用局部变量</span></p><p><span style=\"font-size:16px;\">我们知道局部变量是在堆栈中分配内存空间的，而每个线程都有维护一个自己的堆栈，不同线程不能访问彼此的堆栈数据，所以不同线程之间不共享局部变量。</span></p><p><span style=\"font-size:16px;\">（2）使用synchronized同步块</span></p><p><span style=\"font-size:16px;\">如果一定要使用全局变量，可以将对其的读写操作置于synchronized同步块中，这样不同线程排队依次执行该代码块，从而避免线程不安全情况发生。</span></p><p><span style=\"font-size:16px;\">&nbsp;</span></p><p><span style=\"font-size:16px;\">2. 保证web对象的属性的线程安全</span></p><p><span style=\"font-size:16px;\">（1）HttpContext对象是线程不安全的，多个线程可以同步对其属性进行读写，可以将读写操作置于同步块中</span></p><p><span style=\"font-size:16px;\">（2）HttpSession对象是线程不安全的，session对象在同一个会话过程中是以单例模式存在，所以也是线程不安全的，同样也可以将对其属性的读写置于同步块中</span></p><p><span style=\"font-size:16px;\">（3）HttpRequest对象是线程安全的，每次客户端的请求都会生成一个新的request对象，不同线程使用不同的request实例</span></p><p><span style=\"font-size:16px;\">&nbsp;</span></p><p><span style=\"font-size:16px;\">3. 使用同步的集合类</span></p><p><span style=\"font-size:16px;\">用Vector代替ArrayList，用HashTable代替HashMap</span></p><p><span style=\"font-size:16px;\">&nbsp;</span></p><p><span style=\"font-size:16px;\">4. 保证外部资源的线程安全</span></p><p><span style=\"font-size:16px;\">若servlet执行过程中有对外部资源（例如文件）的访问，需要将访问操作置于同步代码块中</span></p><p><span style=\"font-size:16px;\">&nbsp;</span></p><p><span style=\"font-size:16px;\">5. 实现ThreadMode接口</span></p><p><span style=\"font-size:16px;\">若servlet实现了ThreadMode接口，servlet容器可以保证在同一时刻仅有一个线程执行servlet的service方法。相当于将整个service方法置于同步块中，效率比较低下，所以在servlet规范中已经被抛弃</span></p>', '1', '1', '2014-04-13 14:59:03', '2014-04-13 15:21:49', '615', '0', '1', '1', null, null, null);
INSERT INTO `tech_blog_article` VALUES ('24', 'Java会话跟踪技术', '<h3>什么是会话跟踪？</h3><p><span style=\"font-size:16px;\">&nbsp;&nbsp;客户端向服务器发起请求并获得响应的全过程称为一次会话。客户端与服务器的通信是基于HTTP协议的，HTTP协议具有无状态的特点，即不能保存会话的信息，也就是说，服务器不能根据HTTP请求判断不同请求来自同一用户还是不同用户。因此需要通过会话跟踪，保存客户端与服务器的通信上下文。</span></p><p><span style=\"font-size:16px;\">&nbsp; 当客户端第一次向服务器发送请求时，服务器会实例化一个HttpSession对象并分配唯一的session id，此后客户端向服务器发送的请求都会附带当前的session id，服务器根据session id区别不同的客户端用户。</span></p><p><span style=\"font-size:16px;\"></span>&nbsp;</p><h3>会话跟踪的常用方法</h3><p><span style=\"font-size:16px;\">（1） 会话Cookies</span></p><p><span style=\"font-size:16px;\">HttpSession机制会首先手动Cookie来保存session id。当客户端第一次发送请求时，服务器会实例化一个HttpSession，并将session id存放在客户端浏览器中一个名为JSESSIONID的cookies。</span></p><p><span style=\"font-size:16px;\">Cookies的保存方式有两种：</span></p><p><span style=\"font-size:16px;\">&nbsp; 第一种是保存在内存中，那么重启浏览器后会失效，并且只有当前浏览器进程的不同窗口可以共享；</span></p><p><span style=\"font-size:16px;\">&nbsp; 第二种保存在磁盘中，在有效期内不同浏览器都可以访问。</span></p><p><span style=\"font-size:16px;\">HttpSession默认将其保存在内存中。</span></p><p><span style=\"font-size:16px;\"></span>&nbsp;</p><p><span style=\"font-size:16px;\">（2）URL重写</span></p><p><span style=\"font-size:16px;\">如果客户端浏览器禁用了Cookies，也可以使用URL重写的方式保存session id。</span></p><p><span style=\"font-size:16px;\">这里的URL重写是指将session id作为url参数添加到所请求的url中，例如请求的url为</span><a href=\"http://www.charlestech.org/blog.shtml\"><span style=\"font-size:16px;\">http://www.charlestech.org/blog.shtml</span></a><span style=\"font-size:16px;\">，重写后可能为</span><a href=\"http://www.charlestech.org/blog.shtml?page=2\"><span style=\"font-size:16px;\">http://www.charlestech.org/blog.shtml;jessionid=be8d697876787876befdbde898789098980</span></a><span style=\"font-size:16px;\">。</span></p><p><span style=\"font-size:16px;\">Servlet程序中使用response对象的encodeURL(String url)和encodeRedirectURL(String url)方法来实现URL的重写，这两个方法都会先判断客户端Cookies是否禁用，如果禁用就添加jsessionid参数，否则返回原url。两者的区别在于：encodeURL可作用于所有的URLs，而encodeRedirectURL只作用于需要传递给sendRedirect方法的URL。</span></p><p><span style=\"font-size:16px;\">一般情况下，所有请求都应该发送到动态的页面（JSP或Servlet），然后在动态页面中使用encodeURL()和encodeRedirectURL()来添加session id作为url参数，并执行跳转。</span></p><p><span style=\"font-size:16px;\"></span>&nbsp;</p><p><span style=\"font-size:16px;\">（3）隐藏表单域</span></p><p><span style=\"font-size:16px;\">使用&lt;input type=&quot;hidden&quot;/&gt;隐藏表单域保存所需要的会话信息。</span></p><p><span style=\"font-size:16px;\"></span>&nbsp;</p><p><span style=\"font-size:16px;\">（4）HttpSession</span></p><p><span style=\"font-size:16px;\">HttpSession对象提供setAttribute和getAttribute方法，允许在会话中添加或获取属性值</span></p><p><span style=\"font-size:16px;\"></span>&nbsp;</p><p><span style=\"font-size:16px;\"></span>&nbsp;</p>', '1', '1', '2014-04-13 18:24:51', '2014-04-13 18:24:51', '4', '0', '0', '1', null, null, null);
INSERT INTO `tech_blog_article` VALUES ('25', '如何用JGit管理Git子模块', '<p><strong>原文链接：</strong><a class=\"external\" href=\"http://www.javacodegeeks.com/2014/04/how-to-manage-git-submodules-with-jgit.html\" rel=\"nofollow\" target=\"_blank\"><span style=\"color:#089bc3;\"><strong>javacodegeeks</strong></span></a><strong>&nbsp;&nbsp; 翻译：</strong><a href=\"http://www.importnew.com/\"><span style=\"color:#089bc3;\"><strong>ImportNew.com </strong></span></a><strong>- </strong><a href=\"http://www.importnew.com/author/chenchenchao\"><span style=\"color:#089bc3;\"><strong>chenchenchao</strong></span></a><br /><strong>译文链接：</strong><a href=\"http://www.importnew.com/11095.html\"><span style=\"color:#089bc3;\"><strong>http://www.importnew.com/11095.html</strong></span></a></p><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\">对于一个较大的Git工程，你可能会想在多个仓库之间共享代码,不管这些代码是在多个不同产品间使用的项目共享库或是一些模板。Git通过子模块来实现这样的需求。子模块允许将其他代码仓库的克隆作为子目录放到一个父仓库（有时候也称为父项目）中。一个子模块也是一个独立的仓库，你可以像其他仓库一样执行commit，branch，rebase等等操作。</span></p><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\">JGit提供了实现大部分Git子模块命令的API。我将在这儿给大家介绍这些API。</span></p><h3><span style=\"font-family:Microsoft YaHei;font-size:16px;\">设置</span></h3><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\">本文中用到的代码片段将作为学习测试程序。简单的测试程序有助于理解第三方库是如何工作，以及如何使用新的API。你可以将这些测试程序看做是可控制的试验，帮助你更加直观地发现第三方代码是如何执行的。</span></p><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\">除此之外，如果你保持编写测试程序，可以帮助你检验第三方代码的新版本。如果你的测试程序涵盖了如何调用这些库，那么第三方代码中不兼容的修改将会尽早展现出来。</span></p><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\">回到之前的话题，所有的测试程序共享同一个设置，详细信息请查看</span><a class=\"external\" href=\"https://gist.github.com/rherrmann/10130951\" rel=\"nofollow\" target=\"_blank\"><span style=\"font-family:Microsoft YaHei;font-size:16px;color:#089bc3;\">源代码</span></a><span style=\"font-family:Microsoft YaHei;font-size:16px;\">。现在有一个空的仓库，叫parent，以及另一个仓库叫library。测试程序中，library将会作为子模块添加到parent仓库中。library仓库初始化提交了一个readme.txt文件。测试程序中有一个setUp方法，用来创建这两个仓库，如下所示：</span></p><pre class=\"brush: js;\">Git git = Git.init().setDirectory( &quot;/tmp/path/to/repo&quot; ).call();</pre><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\">这两个仓库用类型为Git的parent和library变量表示。该类封装了一个仓库并允许访问JGit的所有可用指令。就如较早之前我在</span><a class=\"external\" href=\"http://www.javacodegeeks.com/2013/11/an-introduction-to-the-jgit-sources.html\" rel=\"nofollow\" target=\"_blank\"><span style=\"font-family:Microsoft YaHei;font-size:16px;color:#089bc3;\">这里</span></a><span style=\"font-family:Microsoft YaHei;font-size:16px;\">中提到，每个Commnad类对应于一条原生的Git pocelain指令。调用一个指令需要用到生成器模式。举个例子，执行Git.commit()的结果实际上相当于一个CommitCommand。你可以提供一些必要的参数去调用它的call()方法，从而执行相应的指令。</span></p><h3><span style=\"font-family:Microsoft YaHei;font-size:16px;\">添加一个子模块</span></h3><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\">第一步当然是在一个已有的仓库添加子模块。通过上面提到的setUp步骤，library仓库应当作为子模块添加到parent仓库的modules/library目录下。</span></p><pre class=\"brush: js;\">@Test\npublic void testAddSubmodule() throws Exception {\n  String uri \n    = library.getRepository().getDirectory().getCanonicalPath();\n  SubmoduleAddCommand addCommand = parent.submoduleAdd();\n  addCommand.setURI( uri );\n  addCommand.setPath( &quot;modules/library&quot; );\n  Repository repository = addCommand.call();\n  repository.close();\n \n  F‌ile workDir = parent.getRepository().getWorkTree();\n  F‌ile readme = new F‌ile( workDir, &quot;modules/library/readme.txt&quot; );\n  F‌ile gitmodules = new F‌ile( workDir, &quot;.gitmodules&quot; );\n  assertTrue( readme.isF‌ile() );\n  assertTrue( gitmodules.isF‌ile() );\n}\n</pre><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\">SubmoduleAddCommand对象需要知道两件事，第一是子模块从哪里克隆而来，第二是它应该存放在哪里。URI属性表示仓库库的克隆地址，这个克隆地址将会传递给clone命令。path属性则指定了相对于parent仓库根工作目录的路径，子模块将被存放在这个路径。这个指令执行之后，parent仓库的工作目录将会变成这样：</span></p><p><strong></strong><span style=\"font-family:Microsoft YaHei;font-size:16px;\">&nbsp;<img alt=\"\" src=\"http://a3ab771892fd198a96736e50.javacodegeeks.netdna-cdn.com/wp-content/uploads/2014/04/submodule-tree.png\" /></span></p><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\">library仓库存放在modules/library目录下，而且它的工作目录树被检出。call()方法返回一个Repository对象，你可以把它当做一个常规的仓库来使用。这也意味着，你必须在程序中明确显式地关闭返回的仓库，以避免文件句柄泄露。</span></p><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\">从上图我们可以看到，SubmoduleAddCommand做了一件事，它在parent仓库的根工作目录下创建了一个.git模块文件，并把它添加到索引中。</span></p><pre class=\"brush: js;\">[submodule &quot;modules/library&quot;]\npath = modules/library\nurl = git@example.com:path/to/lib.git\n</pre><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\">如果你打开过Git的配置文件，你会发现以上句法。这个文件列出了当前仓库的所有子模块。对于每个模块，文件中列出了它仓库URL地址以及本地路径。一旦commit并push了这个文件，克隆这个仓库的一方就知道哪里可以获取相应的子模块（稍后会详细讲解）。</span></p><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\"></span>&nbsp;</p><h3><span style=\"font-family:Microsoft YaHei;font-size:16px;\">列出子模块</span></h3><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\">当我们添加了一个子模块之后，我们可以会想知道，它是否对于父仓库来说是可知的。第一项测试中我们做了一个基础的检测，验证了某些文件和目录的存在。我们也可以使用一个API来列出一个仓库的子模块，如下所示：</span></p><pre class=\"brush: js;\">@Test\npublic void testListSubmodules() throws Exception {\n  addLibrarySubmodule();\n \n  Map&lt;String,SubmoduleStatus&gt; submodules \n    = parent.submoduleStatus().call();\n \n  assertEquals( 1, submodules.size() );\n  SubmoduleStatus status = submodules.get( &quot;modules/library&quot; );\n  assertEquals( INITIALIZED, status.getType() );\n}\n</pre><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\">SubmoduleStatus命令返回了一个子模块的Map集合，其中键是子模块的路径，值是这个模块的状态值。通过以上代码我们能够验证子模块确实已经添加进去，而且它的状态是INITIALIZED的。这个命令还允许添加一个或多个路径来限制子模块状态。</span></p><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\">说到状态，JGit的StatusCommand并非原生的Git指令。如果在执行指令时添加选项</span><a class=\"external\" href=\"https://www.kernel.org/pub/software/scm/git/docs/git-status.html\" rel=\"nofollow\" target=\"_blank\"><span style=\"font-family:Microsoft YaHei;font-size:16px;color:#089bc3;\">‐‐ignore-submodules=dirty</span></a><span style=\"font-family:Microsoft YaHei;font-size:16px;\">，那么所有对子模块工作目录的修改都会被忽略。</span></p><h3><span style=\"font-family:Microsoft YaHei;font-size:16px;\">更新子模块</span></h3><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\">子模块通常指向他们所在的仓库的一次特殊的提交。如果之后有人克隆了父仓库，他们也会获得与之完全相同的子模块状态，即便子模块的上游有新的提交。</span></p><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\">为了修改子模块，你像一下代码一样明确地对其进行更新：</span></p><pre class=\"brush: js;\">@Test\npublic void testUpdateSubmodule() throws Exception {\n  addLibrarySubmodule();\n  ObjectId newHead = library.commit().setMessage( &quot;msg&quot; ).call();\n \n  File workDir = parent.getRepository().getWorkTree();\n  Git libModule = Git.open( new F‌ile( workDir, &quot;modules/library&quot; ) );\n  libModule.pull().call();\n  libModule.close();\n  parent.add().addF‌ilepattern( &quot;modules/library&quot; ).call();\n  parent.commit().setMessage( &quot;Update submodule&quot; ).call();\n \n  assertEquals( newHead, getSubmoduleHead( &quot;modules/library&quot; ) );\n}\n</pre><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\">这个较长的代码片段中，首先第一件事就是提交一些东西到library仓库中（第四行），接着将子模块更新到最近的一次提交。</span></p><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\">为了让这种更新持久化保存下来，子模块必须被提交（第10,11行）。这次提交在子模块的名下（例子中是modules/library）保存了此次更新的commit-id。最后，通常需要将修改push上去，使得他们对其他仓库可用。</span></p><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\"></span>&nbsp;</p><h3><span style=\"font-family:Microsoft YaHei;font-size:16px;\">在父仓库中更新对子模块的修改</span></h3><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\">将上游的提交拉取到父仓库中也会修改子模块的配置。然而子模块本身并不会自动得到更新。</span></p><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\">SubmoduleUpdateCommand就是用来解决这个问题。使用这个命令并不需要指定其他参数，它会更新所有已注册的子模块。该命令会克隆缺失的子模块并检出其配置中指定的提交。就如其他子模块命令一样，这里也有一个addPath()方法，以保证只更新给定路径下的子模块。</span></p><h3><span style=\"font-family:Microsoft YaHei;font-size:16px;\">克隆一个包含子模块的仓库</span></h3><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\">此时你可能已经掌握一个规律，所有对子模块的操作都是手动的。克隆一个包含子模块配置的仓库并不会默认克隆它的子模块。但是，CloneCommand命令有一个cloneSubmodules的属性，如果设置为true，那么将会克隆所有配置的子模块。从内部看，在对父仓库进行克隆之后，SubmoduleInitCommand和SubmoduleUpdateCommand命令会被递归地执行，并且父仓库的工作目录会被检出。</span></p><h3><span style=\"font-family:Microsoft YaHei;font-size:16px;\">移除一个子模块</span></h3><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\">如果要移除一个子模块，你会希望可以这样写：</span></p><pre class=\"brush: js;\">git.submoduleRm().setPath( ... ).call();\n</pre><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\">但是很不幸，不管是原生的Git或者JGit都没有提供内置的移除子模块的指令，希望将来会添加这样的指令，在这之前，我们必须手动去移除子模块。如果你滚动到</span><a class=\"external\" href=\"https://gist.github.com/rherrmann/10130951\" rel=\"nofollow\" target=\"_blank\"><span style=\"font-family:Microsoft YaHei;font-size:16px;color:#089bc3;\">removeSubmodule()</span></a><span style=\"font-family:Microsoft YaHei;font-size:16px;\">方法你会发现这并不是一件复杂的事。</span></p><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\">首先，各个子模块会从.gitsubmodules和.git/config配置文件中移除。其次，子模块的入口会从索引中被移除。最后，.gitsubmodules文件以及索引的修改会被提交，并且子模块的内容会从工作目录中删除。</span></p><h3><span style=\"font-family:Microsoft YaHei;font-size:16px;\">遍历子模块</span></h3><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\">原生的Git提供了git submodule foreach命令为每个子模块执行一个shell指令。JGit并没有直接支持这样的指令，而是提供了SubmoduleWalk。该类可以用来迭代仓库中子模块。以下示例程序实现了为所有子模块拉取上游的提交。</span></p><pre class=\"brush: js;\">@Test\npublic void testSubmoduleWalk() throws Exception {\n  addLibrarySubmodule();\n \n  int submoduleCount = 0;\n  Repository parentRepository = parent.getRepository();\n  SubmoduleWalk walk = SubmoduleWalk.forIndex( parentRepository );\n  while( walk.next() ) {\n    Repository submoduleRepository = walk.getRepository();\n    Git.wrap( submoduleRepository ).fetch().call();\n    submoduleRepository.close();\n    submoduleCount++;\n  }\n  walk.release();\n \n  assertEquals( 1, submoduleCount );\n}\n</pre><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\">通过next()方法walk对象可以指向下一个子模块，如果没有更多的子模块，该方法会返回false。使用SubmoduleWalk时，通过调用release()方法可以释放子模块相关的资源。再次强调，如果你获得一个子模块的仓库实例可别忘了关闭它。</span></p><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\">SubmoduleWalk也可以用来获取子模块的详细信息。通过它的大部分getter方法可以访问到当前子模块的属性，诸如path，head，remote URL等等。</span></p><h3><span style=\"font-family:Microsoft YaHei;font-size:16px;\">同步远程URL</span></h3><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\">从上面我们知道子模块的配置保存在父仓库根工作目录下的.gitsubmodules文件中。而至少，在.git/config文件中，我们可以重写覆盖子模块的远程URL。对于每个子模块，它们本身都有一个配置文件。那么反过来，每个子模块可以有另一个远程URL。SubmoduleSyncCommand命令可以用来将所有远程URL重置为.gitmodules中的配置。</span></p><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\">综上所述，JGit对子模块的支持几乎与原生的Git一致。大部分Git指令都在JGit中实现了，或可以通过一些途径进行仿真。如果你发现一些操作缺失或实现不了，可以去友好且帮得上忙的</span><a class=\"external\" href=\"http://www.eclipse.org/jgit/support/\" rel=\"nofollow\" target=\"_blank\"><span style=\"font-family:Microsoft YaHei;font-size:16px;color:#089bc3;\">JGit社区</span></a><span style=\"font-family:Microsoft YaHei;font-size:16px;\">去寻求帮助。</span></p><p>&nbsp;</p><p>&nbsp;</p>', '1', '1', '2014-05-07 11:03:35', '2014-05-24 15:56:51', '274', '0', '1', '1', null, null, null);
INSERT INTO `tech_blog_article` VALUES ('26', '并发编程之任务协作', '<p><strong><span style=\"font-family:Microsoft YaHei;font-size:16px;\">前言</span></strong></p><p><span style=\"font-family:Microsoft YaHei;\">&nbsp; 当多个线程共享资源时，我们通常利用加锁的方式来避免一个线程对资源的操作影响另一线程对该资源的操作，例如使用synchronized关键字或Lock对象。而如果多个线程之间的关系不是互斥，而是协作完成某种任务，例如煮面，需要先把水烧开，再加面，然后加调料，又例如典型的生产者消费者问题。对于这种协作关系的多个线程，关键在于线程之间的握手或者说是通信，确保一个任务执行完之后能将信号传递给另一个任务。Java提供一些同步机制来解决线程之间的协作</span></p><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><strong>wait()与notify()</strong></span></p><p><span style=\"font-family:Microsoft YaHei;\">&nbsp; wait(), notify()以及notifyAll()是典型的解决线程间协作的方法。这三个方法并不是Thread对象的方法，而是所有Object类的方法。&nbsp;线程可以通过调用某个对象的wait方法，将自己阻塞等待在该对象上，并释放对象锁。也可以调用对象的notify或notifyAll方法将阻塞在该对象上的线程唤醒，从而实现线程与线程之间的通信。</span></p><p><span style=\"font-family:Microsoft YaHei;\">&nbsp; 值得注意的是，这三个方法都必须放在synchronized块中执行，因为在调用这三个方法之前，必须确保线程已经获得对象锁。</span></p><p><span style=\"font-family:Microsoft YaHei;\">&nbsp; 下面来看一下如何用这种方式来解决生产者消费者问题：</span></p><p><span style=\"font-family:Microsoft YaHei;\">定义生产的产品类：</span></p><pre class=\"brush: js;\">public class Product {\n	private int id;\n\n	public Product(int id) {\n		this.id = id;\n	}\n\n	public int getId() {\n		return id;\n	}\n\n	public void setId(int id) {\n		this.id = id;\n	}\n\n}</pre><p><span style=\"font-family:Microsoft YaHei;\">定义工厂类，用于存放产品，并作为生产者线程和消费者线程的共享对象：&nbsp;</span></p><pre class=\"brush: js;\">public class Factory {\n	public Product product = null;\n}</pre><p><span style=\"font-family:Microsoft YaHei;\">定义生产者线程类：</span></p><pre class=\"brush: js;\">public class Producer implements Runnable {\n	private int count = 0;\n	private Factory factory;\n\n	public Producer(Factory factory) {\n		this.factory = factory;\n	}\n\n	@Override\n	public void run() {\n		// TODO Auto-generated method stub\n		try {\n			while (!Thread.interrupted()) {\n				if (factory.product != null) {\n					synchronized (factory) {\n						factory.wait();\n					}\n				}\n				System.out.println(&quot;Producing product &quot; + count);\n				factory.product = new Product(count++);\n				synchronized (factory) {\n					factory.notify();\n				}\n			}\n		} catch (InterruptedException e) {\n			e.printStackTrace();\n		}\n	}\n\n}\n</pre><p><span style=\"font-family:Microsoft YaHei;\"></span>&nbsp;</p><p><span style=\"font-family:Microsoft YaHei;\">消费者线程类：</span></p><pre class=\"brush: js;\">public class Consumer implements Runnable {\n	private Factory factory;\n\n	public Consumer(Factory factory) {\n		this.factory = factory;\n	}\n	@Override\n	public void run() {\n		// TODO Auto-generated method stub\n		try {\n			while (!Thread.interrupted()) {\n				if (factory.product == null) {\n					synchronized (factory) {\n						factory.wait();\n					}\n				}\n\n				System.out.println(&quot;Consuming product &quot;\n						+ factory.product.getId());\n				factory.product = null;\n				synchronized (factory) {\n					factory.notify();\n				}\n			}\n		} catch (InterruptedException e) {\n			// TODO: handle exception\n			e.printStackTrace();\n		}\n	}\n\n}</pre><p><span style=\"font-family:Microsoft YaHei;\">测试程序：</span></p><pre class=\"brush: js;\">Factory factory = new Factory();\nexec.execute(new Producer1(factory));\nexec.execute(new Consumer1(factory));\nTimeUnit.MICROSECONDS.sleep(5000);\nexec.shutdownNow();</pre><p><span style=\"font-family:Microsoft YaHei;\">&nbsp;</span></p><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><strong>BlockingQueue同步队列</strong></span></p><p><span style=\"font-family:Microsoft YaHei;\">&nbsp; 使用java.util.concurrent.BlockingQueue是解决多线程协作的一种更高效安全的方案，它提供了一些同步的线程安全的存取元素的接口。我们可以使用BlockingQueue来保存多个线程之间的共享资源，并利用BlockingQueue提供的存取元素的接口来访问资源，同步机制与线程间的通信由BlockingQueue保证和实现，从而简化对多线程协作的控制。</span></p><p><span style=\"font-family:Microsoft YaHei;\">&nbsp; 还是拿生产者消费者的问题来说，我们可以将产品存放在一个BlockingQueue中。对于生产者端的线程，当它们向队列添加产品时，若队列已满，生产者线程将阻塞，直到队列中有空闲位置时被唤醒。而对于消费者端的线程，当它们从队列中获取产品时，若队列中没有可用资源，消费者线程将被阻塞，直到队列中有可用的资源时被唤醒。</span></p><p><span style=\"font-family:Microsoft YaHei;\">&nbsp; BlockingQueue中提供同步机制的插入元素的方法为put(Object object)，获取元素的方法为take()。</span></p><p><span style=\"font-family:Microsoft YaHei;\">&nbsp; 现在我们使用BlockingQueue重写生产者消费者问题。</span></p><p><span style=\"font-family:Microsoft YaHei;\">定义生产者线程类：</span></p><pre class=\"brush: js;\">public class Producer implements Runnable {\n	private int count = 0;\n	private BlockingQueue&lt;Product&gt; queue;\n\n	public Producer(BlockingQueue&lt;Product&gt; queue) {\n		this.queue = queue;\n	}\n\n	@Override\n	public void run() {\n		// TODO Auto-generated method stub\n		while (!Thread.interrupted()) {\n			System.out.println(&quot;Produced product &quot; + count);\n			Product product = new Product(count++);\n			try {\n				queue.put(product);\n			} catch (InterruptedException e) {\n				// TODO Auto-generated catch block\n				e.printStackTrace();\n			}\n		}\n	}\n}\n</pre><p><span style=\"font-family:Microsoft YaHei;\"></span>&nbsp;</p><p><span style=\"font-family:Microsoft YaHei;\">定义消费者线程类：</span></p><pre class=\"brush: js;\">public class Consumer implements Runnable {\n	private BlockingQueue&lt;Product&gt; queue;\n\n	public Consumer(BlockingQueue&lt;Product&gt; queue) {\n		this.queue = queue;\n	}\n\n	@Override\n	public void run() {\n		// TODO Auto-generated method stub\n		while (!Thread.interrupted()) {\n			try {\n				Product product = queue.take();\n				System.out.println(&quot;Consuming product &quot; + product.getId());\n			} catch (InterruptedException e) {\n				// TODO Auto-generated catch block\n				e.printStackTrace();\n			}\n		}\n	}\n\n}\n</pre><p><span style=\"font-family:Microsoft YaHei;\">测试程序：</span></p><pre class=\"brush: js;\">ExecutorService exec = Executors.newCachedThreadPool();\nBlockingQueue&lt;Product&gt; queue = new LinkedBlockingQueue&lt;Product&gt;();\nexec.execute(new Producer(queue));\nexec.execute(new Consumer(queue));\nTimeUnit.MICROSECONDS.sleep(5000);\nexec.shutdownNow();</pre><p><span style=\"font-family:Microsoft YaHei;\">&nbsp; 常用的BlockingQueue实现类有LinkedBlocingQueue和ArrayBlockingQueue。LinkedBlocingQueue底层用链表方式组织元素，是一种无界的队列，ArrayBlockingQueue底层用顺序表方式组织元素，初始化时接受一个整型参数限制队列大小。</span></p><p><span style=\"font-family:微软雅黑;\">&nbsp; 使用BlockingQueue来实现线程之间的协作大大简化了程序，它自动管理了线程间的同步以及等待唤醒操作，从而使得程序员可以忽略在哪些地方阻塞或唤醒线程等细节，而关注其他更高级的功能。</span></p>', '1', '1', '2014-05-11 19:07:29', '2014-05-24 15:55:26', '362', '0', '1', '1', null, null, null);
INSERT INTO `tech_blog_article` VALUES ('27', '同步辅助类CountdownLatch与CyclicBarrier', '<p><span style=\"font-family:Microsoft YaHei;font-size:12px;\">&nbsp;JDK5以后java.util.concurrent包下引入了大量解决并发问题的新类，其中比较常用的两个并发辅助类就是CountDownLatch和CyclicBarrier</span></p><p></p><div><span style=\"font-family:Microsoft YaHei;font-size:12px;\"><strong><br /></strong></span></div><div><span style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><strong>CountdownLatch</strong></span></span></div><div><div style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\"><br /></span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">当一个或多个线程需要等待其他线程完成后才执行，这时候可以用CountdownLatch来实现。</span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">CountdownLatch初始化时可以指定一个计数，代表执行的线程个数。</span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\"><br /></span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">CountdownLatch提供两个常用方法：</span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">（1） countdown()方法，减少计数</span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">（3） await()方法，如果当前计数不为0，将阻塞当前线程，直至计数为0被唤醒</span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\"><br /></span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">值得注意的是：CountdownLatch的计数达到0之后不能再复位，因此CountdownLatch只能被触发一次</span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\"><br /></span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">举个实际的应用例子：例如一个产品由7个零部件构成，那么可以设计7个相互独立的线程，每个线程完成一个零部件的生产。当零部件都生产完毕后，需要有一个线程负责组装。此时我们可以使用CountdownLatch来实现，初始化计数为7，生产线程中执行完生产任务就调用countdown()减少计数，而组装线程中调用await()，直到计数减少为0，即所有零件生产完毕后，开始组装任务。</span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\"><br /></span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">生产者线程：</span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><pre class=\"brush: js;\">import java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.TimeUnit;\n\npublic class Worker implements Runnable {\n       private CountDownLatch latch ;\n       private int partId ;\n\n       public Worker(CountDownLatch latch, int partId) {\n             this.latch = latch;\n             this.partId = partId;\n      }\n\n       @Override\n       public void run() {\n             // TODO Auto-generated method stub\n             if (!Thread.interrupted()) {\n                  System. out.println( &quot;Manufacturing part &quot; + partId );\n                   latch.countDown();\n            }\n      }\n\n}\n</pre><span style=\"font-family:Microsoft YaHei;font-size:12px;\"><br /></span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">加工者线程：</span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><div align=\"left\"><pre class=\"brush: js;\">import java.util.concurrent.CountDownLatch;\n\npublic class Processor implements Runnable {\n       private CountDownLatch latch ;\n\n       public Processor(CountDownLatch latch) {\n             this.latch = latch;\n      }\n\n       @Override\n       public void run() {\n             // TODO Auto-generated method stub\n             try {\n                   if (!Thread.interrupted()) {\n                         latch.await();\n                        System. out.println(&quot;Manufacturing done!&quot; );\n                        System. out.println(&quot;Processing the product.&quot; );\n                  }\n            } catch (InterruptedException e) {\n                   // TODO Auto-generated catch block\n                  e.printStackTrace();\n            }\n\n      }\n\n}</pre><span style=\"font-family:Microsoft YaHei;font-size:12px;\"><br /></span></div><div align=\"left\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">测试程序：</span></div><div align=\"left\"><div align=\"left\"><pre class=\"brush: js;\">public static void main(String[] args) {\n	 // TODO Auto-generated method stub\n	ExecutorService exec = Executors. newCachedThreadPool();\n	 int partCount = 7;\n	CountDownLatch latch = new CountDownLatch(partCount);\n	 for (int i = 1; i &lt;= partCount; i++) {\n		  exec.execute( new Worker(latch, i));\n	}\n	exec.execute( new Processor(latch));\n}</pre></div></div></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\"><br /></span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">该程序初始化了一个计数为7的CountDownLatch，并创建了7个工人线程，每个线程负责生产零部件，然后调用latch.countDown()减少计数。而加工者线程Processor中，由于调用了latch.await()而处于等待状态，直到CountDownLatch的计数减为0才被唤醒，执行包装任务。程序输出如下：</span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\"><br /></span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Manufacturing part 1</span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Manufacturing part 7</span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Manufacturing part 6</span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Manufacturing part 2</span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Manufacturing part 4</span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Manufacturing part 5</span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Manufacturing part 3</span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Manufacturing done!</span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Processing the product.</span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\"><br /></span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\"><br /></span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><strong>CyclicBarrier</strong></span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\"><br /></span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">当一组线程在执行过程中需要不时地相互等待，这时候可以用CyclicBarrier来实现。它允许多个线程相互等待，直到等待的线程数达到一个公共屏障点(common barrier point)时被唤醒。</span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">CyclicBarrier初始化时可以指定一个计数以及一个Runnable，当在CyclicBarrier对象上调用await()方法的线程数达到指定的计数，将会触发指定的Runnable线程，并唤醒所有等待的线程继续执行。</span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\"><br /></span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">举一个实际的应用例子。有一支5人自行车队要完成一次50公里的骑行，车队决定每骑行10公里，就停下来等待其他成员到齐后，休息一会儿再出发，直到到达目的地。此时我们可以使用CyclicBarrier来实现，初始化计数为5，如果等待的线程数达到5，就判断当前距离是否达到50公里，如果还没达到，就休眠一段时间表示休息，如果达到，就终止所有线程，表示已经到达目的地。</span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\"><br /></span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">值得注意的是：CyclicBarrier的计数达到指定数目后，可以复位，继续循环重用。</span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\"><br /></span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">骑行者线程：</span></div><div style=\"orphans: 2; text-align: -webkit-auto; widows: 2;\"><pre class=\"brush: js;\">import java.util.concurrent.BrokenBarrierException;\nimport java.util.concurrent.CyclicBarrier;\n\npublic class Rider implements Runnable {\n       private CyclicBarrier barrier ;\n       private int riderId ;\n       private int distance = 0;\n\n       public Rider(CyclicBarrier barrier, int riderId) {\n             this.barrier = barrier;\n             this.riderId = riderId;\n      }\n\n       @Override\n       public void run() {\n             // TODO Auto-generated method stub\n             try {\n                   while (!Thread.interrupted()) {\n                         distance += 10;\n                        System. out.println(&quot;Rider &quot; + riderId + &quot; distance: &quot;\n                                    + distance);\n                         barrier.await();\n                  }\n            } catch (InterruptedException e) {\n                   // TODO Auto-generated catch block\n                  e.printStackTrace();\n            } catch (BrokenBarrierException e) {\n                   // TODO Auto-generated catch block\n                  e.printStackTrace();\n            }\n      }\n\n       public int getDistance () {\n             return distance ;\n      }\n}</pre></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">测试程序：</span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><pre class=\"brush: js;\">public static void main(String[] args) {\n	 // TODO Auto-generated method stub\n	 final ExecutorService exec = Executors.newCachedThreadPool();\n	 final List&lt;Rider&gt; riders = new ArrayList&lt;Rider&gt;();\n	 final int TOTAL_DIST = 50;\n	 int riderCount = 5;\n	CyclicBarrier barrier = new CyclicBarrier(riderCount, new Runnable() {\n		   @Override\n		   public void run() {\n				 // TODO Auto-generated method stub\n				 int distance = riders.get(0).getDistance();\n				 if (distance &gt;= TOTAL_DIST) {\n					  System. out.println(&quot;Reach the end!&quot; );\n					  exec.shutdownNow();\n					   return;\n				}\n				System. out.println(TOTAL_DIST - distance\n							+ &quot;km left. Take a break...&quot;);\n				 try {\n					  TimeUnit. MILLISECONDS .sleep(1000);\n				} catch (InterruptedException e) {\n					   // TODO Auto-generated catch block\n					  e.printStackTrace();\n				}\n		  }\n	});\n	 for (int i = 1; i &lt;= riderCount; i++) {\n		  Rider rider = new Rider(barrier, i);\n		  riders.add(rider);\n		  exec.execute(rider);\n	}\n}</pre><span style=\"font-family:Microsoft YaHei;font-size:12px;\"><br /></span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><div align=\"left\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\"><br /></span></div><div align=\"left\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">程序中，Rider线程表示一个骑行者，骑行者先是骑行了10km，然后调用barrier.await()进入等待状态。CyclicBarrier的初始化计数为5，也就是说当5个骑行者都骑行了10km进入等待状态之后，CyclicBarrier中的Runnable任务将被执行，Runnable任务中先是判断某一个骑行者的骑行距离是否达到总距离，如果达到表示到达了终点，否则，休眠1s后唤醒5个处于等待状态的Rider线程，继续骑行。程序输出如下：</span></div><div align=\"left\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\"><br /></span></div></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Rider 1 distance: 10</span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Rider 3 distance: 10</span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Rider 2 distance: 10</span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Rider 5 distance: 10</span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Rider 4 distance: 10</span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">40km left. Take a break...</span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Rider 4 distance: 20</span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Rider 5 distance: 20</span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Rider 2 distance: 20</span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Rider 3 distance: 20</span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Rider 1 distance: 20</span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">30km left. Take a break...</span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Rider 1 distance: 30</span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Rider 5 distance: 30</span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Rider 3 distance: 30</span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Rider 2 distance: 30</span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Rider 4 distance: 30</span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">20km left. Take a break...</span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Rider 4 distance: 40</span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Rider 2 distance: 40</span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Rider 5 distance: 40</span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Rider 3 distance: 40</span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Rider 1 distance: 40</span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">10km left. Take a break...</span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Rider 4 distance: 50</span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Rider 1 distance: 50</span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Rider 5 distance: 50</span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Rider 2 distance: 50</span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Rider 3 distance: 50</span></div><div align=\"left\" style=\"orphans: 2; widows: 2;\"><span style=\"font-family:Microsoft YaHei;font-size:12px;\">Reach the end!</span></div></div><span style=\"font-family:Microsoft YaHei;font-size:12px;\"><br /></span><p></p><p><span style=\"font-family:Microsoft YaHei;font-size:12px;\">善于应用这些同步辅助类可以减少编程的工作量，使得我们可以将更多精力放在其他功能的实现上。</span></p>', '1', '1', '2014-05-15 22:58:53', '2014-05-24 15:54:17', '401', '1', '1', '1', null, null, null);
INSERT INTO `tech_blog_article` VALUES ('28', 'Java编程题——在一个字符串中查找第一个非重复的字符', '<p><span style=\"background-color: rgb(255, 255, 255);\"><span style=\"font-size:12px;\"><span style=\"font-family: 微软雅黑, Verdana, sans-serif, 宋体; line-height: 22px;\">原文链接：&nbsp;</span><a target=\"_blank\" href=\"http://javarevisited.blogspot.com/2014/03/3-ways-to-find-first-non-repeated-character-String-programming-problem.html\" class=\"external\" rel=\"nofollow\" style=\"margin: 0px; padding: 0px; vertical-align: baseline; outline: none; text-decoration: none; border-color: rgb(8, 155, 195); font-family: 微软雅黑, Verdana, sans-serif, 宋体; line-height: 22px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\">javarevisited</a><span style=\"font-family: 微软雅黑, Verdana, sans-serif, 宋体; line-height: 22px;\">&nbsp;翻译：&nbsp;</span><a href=\"http://www.importnew.com/\" style=\"margin: 0px; padding: 0px; vertical-align: baseline; outline: none; text-decoration: none; border-color: rgb(8, 155, 195); font-family: 微软雅黑, Verdana, sans-serif, 宋体; line-height: 22px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\">ImportNew.com&nbsp;</a><span style=\"font-family: 微软雅黑, Verdana, sans-serif, 宋体; line-height: 22px;\">-&nbsp;</span><a href=\"http://www.importnew.com/author/chenchenchao\" style=\"margin: 0px; padding: 0px; vertical-align: baseline; outline: none; text-decoration: none; border-color: rgb(8, 155, 195); font-family: 微软雅黑, Verdana, sans-serif, 宋体; line-height: 22px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\">chenchenchao</a><br style=\"font-family: 微软雅黑, Verdana, sans-serif, 宋体; line-height: 22px;\" /><span style=\"font-family: 微软雅黑, Verdana, sans-serif, 宋体; line-height: 22px;\">译文链接：&nbsp;</span><a href=\"http://www.importnew.com/11493.html\" style=\"margin: 0px; padding: 0px; vertical-align: baseline; outline: none; text-decoration: none; border-color: rgb(8, 155, 195); font-family: 微软雅黑, Verdana, sans-serif, 宋体; line-height: 22px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\" target=\"_blank\">http://www.importnew.com/11493.html</a></span></span></p><p>&nbsp;&nbsp;</p><p><span style=\"font-size:16px;\">编写一个Java程序来查找一个字符串中第一个非重复的字符，这是在编程测试中很常见的一个问题，因为字符串处理在程序员面试中是一个普遍的话题。面试前最好是准备好一些熟知的编程问题，例如使用递归反转字符串，或者检查一个字符串是否是回文（即正反读顺序一致）。查找第一个非重复字符的问题也是在同一个范畴。在给出解决方案之前，我们先来弄懂这个问题。我们需要编写一个函数，这个函数接受一个字符串作为参数，并返回第一个不重复的字符。例如字符串“hello”，除了“l”之外所有字符都是不重复的，但是“h”是第一个不重复的字符。同样，字符串“swiss”中“w”是第一个不重复的字符。一种解决该问题的方法就是创建一张表来记录每个字符的出现次数，然后选出第一个不重复的元素。关键在于字符的次序，你的代码必须返回第一个非重复的字符。另外，在这篇文章中，我们可以看到3个解决该问题的示例。我们的第一个方案是使用LinkedHashMap来记录字符个数，因为LinkedHashMap维持的元素顺序与插入顺序一致，而我们正是按照字符串中字符出现的顺序来将字符插入Map中的。当我们扫描字符串时，只需要迭代LinkedHashMap并找出值为1的元素。是的，这种方案只需要一个LinkedHashMap以及两个循环。我们的第二种解决方案是时间和空间的折衷，在一次遍历中找出不重复的字符。这次，我们使用一个Set和一个List去分开保存重复和不重复的字符。当我们完成一次时间复杂度为O(n)的字符串扫描后，我们可以通过访问List来获得这个神奇的不重复字符，该时间为复杂度为O(1)，因为List是有序的，我们可以通过get(0)获得第一个元素。我们的第三种解决方案也是类似的，不过这次我们使用HashMap而不是LinkedHashMap，我们会在第一扫描计算各个字符的出现次数之后，再次扫描字符串去找到第一个不重复的字符。接下来我们将为这个问题编写示例代码和单元测试程序。你也可以去我的</span><a href=\"http://javarevisited.blogspot.sg/2012/10/10-java-string-interview-question-answers-top.html\" target=\"_blank\" style=\"font-size:16px;\">字符串面试问题</a><span style=\"font-size:16px;\">列表中看看更多类似的Java编程题。&nbsp;</span></p><h2><span style=\"font-size:16px;\">如何在字符串中找到第一个不重复的字符</span></h2><span style=\"font-size:16px;\">这里有在给定字符串中找到第一个非重复字符的完整示例代码，该程序给出了三个找到第一个非重复字符的方法，每个方法都有自己的解决问题的算法。第一个算法实现在getFirstNonRepeatedChar(String str)方法中。它首先获得字符串的字符数组，然后遍历数组并建立一个哈希表，哈希表的键为字符，值为该字符出现的次数。下一步它会遍历LinkedHashMap去找到第一个值为1的元素，那便是第一个非重复的字符，因为LinkedHashMap维护的元素顺序与插入顺序一致，而我们遍历字符数组是从头遍历到尾。这种算法的缺点在于它需要两个循环，第一个循环的次数与字符串的字符个数成正比，而第二个循环的次数与字符串中重复的字符个数成正比。最差的情况是非重复的字符出现在字符串的最尾部，那么这个算法需要2*N的时间去解决这个问题。第二个算法实现在firstNonRepeatingChar(String word)方法中。这种解决方案可以在一次字符串扫描中找到第一个不重复的字符，它应用了典型的空间时间权衡技术。它使用了两个存储空间来减少一次循环，是标准的空间-时间折衷。由于我们将重复和不重复的字符分开存放，在循环结束后，存放不重复字符的列表中的第一个元素就是我们所要找的第一个非重复字符。这种解决方案稍微优于上一种。如果在字符串中没有不重复的字符，你可以选择返回null或者空字符串。第三个算法实现在firstNonRepeatedCharacter(String word)方法中，它与第一种方案非常类似，唯一不同在于它使用了HashMap。由于HashMap并不保证一种特定的顺序，我们必须依赖源字符串去找到第一个不重复的字符。第三种解决方案的算法如下：</span><ol><li><span style=\"font-size:16px;\">扫描字符串并将每个字符的出现次数保存在HashMap中</span></li><li><span style=\"font-size:16px;\">遍历字符串并从Map中获取每个字符的个数</span></li></ol><p><span style=\"font-size:16px;\">由于我们从左往右扫描字符，当找到某个字符的计数为1时，我们就可以跳出循环，它就是第一个非重复的字符。在这里，字符次序是靠再次遍历源字符串来实现。</span></p><p><span style=\"font-size:16px;\"></span></p><pre class=\"brush: js;\">import java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Set;\n\npublic class Programming {\n    /**\n     * Java Program to find first duplicate, non-repeated character in a String.\n     * It demonstrate three simple example to do this programming problem.\n     * \n     * @author Javarevisited\n     */\n    public static char getFirstNonRepeatedChar(String str) {\n        Map&lt;Character, Integer&gt; counts = new LinkedHashMap&lt;Character, Integer&gt;(\n                str.length());\n        for (char c : str.toCharArray()) {\n            counts.put(c, counts.containsKey(c) ? counts.get(c) + 1 : 1);\n        }\n        for (Entry&lt;Character, Integer&gt; entry : counts.entrySet()) {\n            if (entry.getValue() == 1) {\n                return entry.getKey();\n            }\n        }\n        throw new RuntimeException(&quot;didn\'t find any non repeated Character&quot;);\n    }\n\n    /**\n     * Using HashMap to find first non-repeated character from String in Java.\n     * Algorithm :\n     * \n     * Step 1 : Scan String and store count of each character in HashMap\n     * \n     * Step 2 : traverse String and get count for each character from Map. Since\n     * we are going through String from first to last character, * when count\n     * for any character is 1, we break, it\'s the first * non repeated\n     * character. Here order is achieved by going * through String again.\n     */\n    public static char firstNonRepeatingChar(String word) {\n        Set&lt;Character&gt; repeating = new HashSet&lt;Character&gt;();\n        List&lt;Character&gt; nonRepeating = new ArrayList&lt;Character&gt;();\n        for (int i = 0; i &lt; word.length(); i++) {\n            char letter = word.charAt(i);\n            if (repeating.contains(letter)) {\n                continue;\n            }\n            if (nonRepeating.contains(letter)) {\n                nonRepeating.remove((Character) letter);\n                repeating.add(letter);\n            } else {\n                nonRepeating.add(letter);\n            }\n        }\n        return nonRepeating.get(0);\n    }\n\n    /**\n     * Using HashMap to find first non-repeated character from String in Java.\n     * Algorithm :\n     * \n     * Step 1 : Scan String and store count of each character in HashMap\n     * \n     * Step 2 : traverse String and get count for each character from Map. Since\n     * we are going through String from first to last character, when count for\n     * any character is 1, we break, it\'s the first non repeated character. Here\n     * order is achieved by going through String again.\n     * \n     * @return\n     */\n    public static char firstNonRepeatedCharacter(String word) {\n        HashMap&lt;Character, Integer&gt; scoreboard = new HashMap&lt;Character, Integer&gt;();\n        // build table [char -&gt; count]\n        for (int i = 0; i &lt; word.length(); i++) {\n            char c = word.charAt(i);\n            if (scoreboard.containsKey(c)) {\n                scoreboard.put(c, scoreboard.get(c) + 1);\n            } else {\n                scoreboard.put(c, 1);\n            }\n        }\n        // since HashMap doesn\'t maintain order, going through string again\n        for (int i = 0; i &lt; word.length(); i++) {\n            char c = word.charAt(i);\n            if (scoreboard.get(c) == 1) {\n                return c;\n            }\n        }\n        throw new RuntimeException(&quot;Undefined behaviour&quot;);\n    }\n}</pre><br /><p></p><br /><p></p><p><span style=\"font-size:16px;\"><br /></span></p><span style=\"font-size:16px;\">&nbsp;</span><h2><span style=\"font-size:16px;\">找到第一个唯一字符的JUnit单元测试</span></h2><p><span style=\"font-size:16px;\">这里有一些JUnit测试用例来测试程序的每个方法。我们测试不同类型的输入，一种包含重复字符而另一种不包含。由于程序并没有定义当输入空字符串，null或者只包含重复字符的字符串该如何处理，你可以自己定义一些有效的处理。</span></p><p><span style=\"font-size:16px;\"><br /></span></p><p><span style=\"font-size:16px;\"></span></p><pre class=\"brush: js;\">import static org.junit.Assert.*;\nimport org.cc.source.Programming;\nimport org.junit.Test;\n\npublic class ProgrammingTest {\n    @Test\n    public void testFirstNonRepeatedCharacter() {\n        assertEquals(\'b\', Programming.firstNonRepeatedCharacter(&quot;abcdefghija&quot;));\n        assertEquals(\'h\', Programming.firstNonRepeatedCharacter(&quot;hello&quot;));\n        assertEquals(\'J\', Programming.firstNonRepeatedCharacter(&quot;Java&quot;));\n        assertEquals(\'i\', Programming.firstNonRepeatedCharacter(&quot;simplest&quot;));\n    }\n\n    @Test\n    public void testFirstNonRepeatingChar() {\n        assertEquals(\'b\', Programming.firstNonRepeatingChar(&quot;abcdefghija&quot;));\n        assertEquals(\'h\', Programming.firstNonRepeatingChar(&quot;hello&quot;));\n        assertEquals(\'J\', Programming.firstNonRepeatingChar(&quot;Java&quot;));\n        assertEquals(\'i\', Programming.firstNonRepeatingChar(&quot;simplest&quot;));\n    }\n\n    @Test\n    public void testGetFirstNonRepeatedChar() {\n        assertEquals(\'b\', Programming.getFirstNonRepeatedChar(&quot;abcdefghija&quot;));\n        assertEquals(\'h\', Programming.getFirstNonRepeatedChar(&quot;hello&quot;));\n        assertEquals(\'J\', Programming.getFirstNonRepeatedChar(&quot;Java&quot;));\n        assertEquals(\'i\', Programming.getFirstNonRepeatedChar(&quot;simplest&quot;));\n    }\n}</pre><br /><p></p><span style=\"font-size:16px;\">你可以改进一下测试用例以便测试更多的场景。没有什么比编写详细且有创造性的测试用例更能打动面试官的了，很多程序员都想不到或者没有努力去思考这些。这就是这篇文章所有要阐述的内容。我们看到了三种解决这个问题的方法，尽管他们的逻辑很类似，但不尽相同，示例程序对于初学者学习Java容器框架也是非常不错的。它让你有机会去了解不同Map的实现，并明白<a href=\"http://java67.blogspot.sg/2012/08/difference-between-hashmap-and-LinkedHashMap-Java.html\" target=\"_blank\">HashMap与LinkedHashMap的区别</a>,以便决定什么时候使用他们。另外，如果你知道解决该问题的其他方法，请分享一下。如果你在面试过程中也遇到过类似问题，你也可以分享一下你的面试经历。</span>', '6', '1', '2014-05-25 12:41:54', '2014-05-26 11:12:37', '215', '0', '1', '1', null, null, null);
INSERT INTO `tech_blog_article` VALUES ('29', '基于JQuery的返回顶部快捷工具', '<p><span style=\"font-family:Microsoft YaHei;font-size:12px;\">如果当前页面过长，当滚动到底部时，通过返回顶部按钮可以快速滚回顶部，省去向上滚动页面的人工操作。</span></p><p><span style=\"font-family:Microsoft YaHei;font-size:12px;\">backTop.js脚本实现了在页面上快捷地创建返回顶部按钮，实现效果可以滚动一下本页面看看，<a href=\"https://github.com/charleschaochen/BackTop\" target=\"_blank\">github地址 &gt;&gt;</a></span></p><p><span style=\"font-family:Microsoft YaHei;font-size:12px;\"><br /></span></p><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><strong>如何使用</strong></span></p><p><span style=\"font-family:Microsoft YaHei;font-size:12px;\">backTop.js的使用十分简单</span></p><p><span style=\"font-family:\'Microsoft YaHei\';font-size:12px;\">1. &nbsp;将images目录下的图片拷贝到与页面同级的images目录下，图片是作为返回顶部按钮的图标使用</span></p><p><span style=\"font-family:Microsoft YaHei;font-size:12px;\">2. &nbsp;在页面中引入jquery和backTop脚本</span></p><p><span style=\"font-family:Microsoft YaHei;font-size:12px;\"></span></p><pre class=\"brush: js;\">&lt;script type=&quot;text/javascript&quot; src=&quot;scripts/jquery-1.9.1.js&quot;&gt;&lt;/script&gt;\n&lt;script type=&quot;text/javascript&quot; src=&quot;scripts/backTop.min.js&quot;&gt;&lt;/script&gt;</pre>3. 调用backTop对象的createBackTop方法创建返回顶部按钮<p></p><p></p><p></p><p><span style=\"font-family:Microsoft YaHei;font-size:12px;\"></span></p><pre class=\"brush: js;\">      $(function () {\n          // Create back to top icon\n          backTop.createBackTop();\n      });</pre>方法参数有：<p></p><p></p><p></p><p><span style=\"font-family:Microsoft YaHei;font-size:12px;\"></span></p><pre class=\"brush: js;\">backTop.createBackTop({\n  bottom: &quot;50px&quot;, // The bottom of the icon, default 50px\n  right: &quot;200px&quot;, // The right of the icon, default 40px\n  style: 0  // The icon style, values: 0, 1, 2, default 0 \n});\n</pre><p></p><p></p><p><span style=\"font-family:Microsoft YaHei;font-size:12px;\">bottom： 按钮离页面底部的像素值</span></p><p><span style=\"font-family:Microsoft YaHei;font-size:12px;\">right： 按钮离页面右侧的像素值</span></p><p><span style=\"font-family:Microsoft YaHei;font-size:12px;\">sytle： 按钮样式，可选值有0, 1， 2。&nbsp;</span></p><p><span style=\"font-family:Microsoft YaHei;font-size:12px;\">&nbsp; 0： 普通的三角形标志样式&nbsp; <img alt=\"\" src=\"/xheditor_img/20140526/5c2b8011-5abe-4ce7-bb76-47f1ba631052.png\" width=\"41\" height=\"38\" />，不需要图片</span></p><p><span style=\"font-family:Microsoft YaHei;font-size:12px;\">&nbsp; 1： 样式 <img alt=\"\" src=\"/xheditor_img/20140526/2064dff1-caee-4f40-bfee-8d1a322d9924.png\" /> ， 需要图片backtop.gif</span></p><p><span style=\"font-family:Microsoft YaHei;font-size:12px;\">&nbsp; 2： 火箭图标样式 <img alt=\"\" src=\"/xheditor_img/20140526/e8f64dad-7698-4f96-a55d-e341f944e24e.png\" width=\"26\" height=\"60\" />&nbsp;， 需要图片rocket.png</span></p><p><span style=\"font-family:Microsoft YaHei;font-size:12px;\"><br /></span></p><p><span style=\"font-family:Microsoft YaHei;font-size:12px;\">就是简单的3个步骤就可以在页面上创建一个返回顶部的图标，实现快速返回顶部操作</span></p><p><span style=\"font-family:Microsoft YaHei;font-size:12px;\"><br /></span></p><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><strong>实现原理</strong></span></p><p><span style=\"font-family:Microsoft YaHei;font-size:12px;\">1. &nbsp;在页面上创建返回顶部图标，默认隐藏。backTop.createBackTop()实现图标的创建</span></p><p><span style=\"font-family:Microsoft YaHei;font-size:12px;\">2. &nbsp;捕捉页面scroll事件， 在事件中判断当前滚动的高度，若超过一定高度，显示返回顶部图标。backTop.onScroll()实现了对滚动高度的检查</span></p><p><span style=\"font-family:Microsoft YaHei;font-size:12px;\"></span></p><pre class=\"brush: js;\">/**\n     * Show or hide back to top icon while scrolling\n     * @param id\n     * @param maxHeight\n     */\n    onScroll: function (id, maxHeight) {\n        // Get height after scrolling\n        var scroll_height = document.documentElement.scrollTop + document.body.scrollTop;\n\n        if (isNaN(maxHeight)) {\n            maxHeight = 200;    // Default 200\n        }\n\n        if (scroll_height &gt; maxHeight) {\n            // If scroll height is larger than maxHeight, show the back to top icon\n            $(&quot;#&quot; + id).fadeIn(); // Fade in\n        } else {\n            // If scroll height is smaller than maxHeight, hide the back to top icon\n            $(&quot;#&quot; + id).fadeOut(); // Fade out\n        }\n    },</pre><p></p><p></p><p></p><p><span style=\"font-family:Microsoft YaHei;font-size:12px;\">将该事件绑定到当前页面</span></p><p><span style=\"font-family:Microsoft YaHei;font-size:12px;\"></span></p><pre class=\"brush: js;\">$(window).scroll(function () {\n         t.onScroll(this.backTopid, 200);\n});</pre><br /><p></p><p></p><p></p>3. &nbsp; 绑定返回顶部图标点击事件，点击后返回设置当前页面scrollTop属性<p><span style=\"font-family:Microsoft YaHei;font-size:12px;\"></span></p><pre class=\"brush: js;\">/**\n * Scroll to the top of the page\n */\nscrollToTop: function () {\n	$(&quot;html,body&quot;).animate({scrollTop: &quot;0px&quot;}, 200);\n}\n</pre><br /><p></p><p></p><p></p><p><span style=\"font-family:Microsoft YaHei;font-size:16px;\"><strong><br /></strong></span></p>', '1', '1', '2014-05-26 11:40:54', '2014-05-26 11:54:40', '294', '1', '1', '1', null, null, null);
INSERT INTO `tech_blog_article` VALUES ('30', '创建型设计模式 — 工厂模式', '<h4><span style=\"font-family:Microsoft YaHei;\">什么是工厂模式</span></h4><p><span style=\"font-family:微软雅黑;FONT-SIZE: 14px\">由工厂来统一负责对象的实例化工作，用工厂方法代替new操作符，就是所谓的工厂模式。工厂模式广泛应用于各个流行的框架中，例如Spring的核心IoC容器，就是一个管理和实例化所有bean的工厂。</span></p><p><span style=\"font-family:微软雅黑;\"></span>&nbsp;</p><h4><span style=\"font-family:Microsoft YaHei;\">为什么要使用工厂模式</span></h4><span style=\"font-family:微软雅黑;\"></span><p><span style=\"font-family:Microsoft YaHei;FONT-SIZE: 14px\">首先，使用工厂来统一负责对象的实例化，可以简化客户端调用代码的初始化工作。其次，工厂模式可以将对象的客户端调用从具体实现中分离出来，客户端代码只需要关注对象必须满足的接口，而不需要关注对象的具体实例化过程，实现程序的解耦。</span></p><p>&nbsp;</p><h4><span style=\"font-family:Microsoft YaHei;\">工厂模式的实现</span></h4><h5><span style=\"font-family:Microsoft YaHei;\">普通工厂模式</span></h5><div><span style=\"font-family:Microsoft YaHei;FONT-SIZE: 14px\">创建一个工厂类负责实现同一接口的类的实例化工作。在该工厂类中，需要声明一个方法用来返回产品实例，该方法通常接受一个参数，通过该参数决定返回的具体实例。</span></div><div><span style=\"font-family:微软雅黑;\"></span><span style=\"FONT-SIZE: 14px\">&nbsp;</span></div><div><span style=\"font-family:微软雅黑;FONT-SIZE: 14px\">代码示例：</span></div><div><span style=\"font-family:微软雅黑;\"></span><pre class=\"brush: js;\">import patterns.factory.beans.*;\r\n\r\n/**\r\n * 简单工厂模式，声明produce方法，根据传入的type参数返回对应的产品\r\n *\r\n * 缺点：produce方法需要对传入的参数进行判断以决定生产哪种具体的产品，增加了编程难度，并且如果传入的参数不合法，会导致对象无法正常创建\r\n *\r\n * @author Charles Chen\r\n *\r\n */\r\npublic class SimpleFruitFactory {\r\n       /**\r\n       * Produce fruit with the specific type\r\n       *\r\n       * @param type\r\n       * @return Fruit\r\n       */\r\n       public Fruit produce(String type) {\r\n             if (&quot;apple&quot; .equals(type)) {\r\n                   return new Apple();\r\n            }\r\n             if (&quot;banana&quot; .equals(type)) {\r\n                   return new Banana();\r\n            }\r\n            System. out.println(&quot;Please input correct type.&quot; );\r\n             return null ;\r\n      }\r\n\r\n       /**\r\n       * @param args\r\n       */\r\n       public static void main(String[] args) {\r\n             // TODO Auto-generated method stub\r\n            SimpleFruitFactory factory = new SimpleFruitFactory();\r\n            Fruit fruit = factory.produce( &quot;apple&quot;);\r\n             if (fruit != null) {\r\n                  fruit.introduce();\r\n            }\r\n      }\r\n\r\n}\r\n</pre></div><p><strong><span style=\"FONT-SIZE: 14px\">缺点：<span style=\"font-family:微软雅黑;\">普通工厂模式通常需要定义一个返回类实例的方法，该方法通常需要接收一个参数，通过该参数的值来决定实例化哪个具体的类。</span>这种方式会增加编程的复杂性，而且如果传入的参数不正确会导致无法正确地实例化。</span></strong></p><p><span style=\"FONT-SIZE: 14px\"><span style=\"font-family:Microsoft YaHei;\"></span>&nbsp;</span></p><h5><span style=\"font-family:Microsoft YaHei;\">工厂方法模式</span></h5><p><span style=\"font-family:Microsoft YaHei;\">工厂方法模式是对普通工厂模式的改良，工厂类中不使用一个统一的方法来实例化所有的对象，而是针对每一类产品对象都声明一个独立的方法负责实例化。</span><span style=\"font-family:微软雅黑;\">静态工厂方法模式就是在工厂方法模式的基础上，将所有实例化的方法声明为static，这样一来客户端代码不需要实例化工厂，就可以调用其工厂方法。Java并发包中的Executors类就是实现了静态工厂方法模式，来实例化多种线程池。</span></p><p><span style=\"font-family:微软雅黑;\">示例代码：</span></p><span style=\"font-family:微软雅黑;\"></span><pre class=\"brush: js;\">import patterns.factory.beans.*;\r\n\r\n/**\r\n * 工厂方法模式，声明不同的方法负责生产不同的产品\r\n *\r\n * 缺点：不符合开闭原则，当需要添加新的产品时需要修改工厂类\r\n *\r\n * @author Charles Chen\r\n *\r\n */\r\npublic class MethodFruitFactory {\r\n      /**\r\n      * Produce apple\r\n      *\r\n      * @return Apple\r\n      */\r\n      public static Fruit produceApple() {\r\n             return new Apple();\r\n      }\r\n\r\n      /**\r\n       * Produce banana\r\n       *\r\n       * @return Banana\r\n       */\r\n       public Fruit produceBanana() {\r\n             return new Banana();\r\n       }\r\n\r\n       /**\r\n       * @param args\r\n       */\r\n       public static void main(String[] args) {\r\n             // TODO Auto-generated method stub\r\n            MethodFruitFactory factory = new MethodFruitFactory();\r\n            Fruit fruit = factory.produceBanana();\r\n            fruit.introduce();\r\n      }\r\n}\r\n</pre><p><strong><span style=\"FONT-SIZE: 14px\">缺点：<span style=\"font-family:微软雅黑;\">工厂方法模式的缺点是不符合开闭原则，即对扩展开放，对修改关闭。当程序需要扩展时，例如需要添加新的产品，我们不得不去修改工厂类</span></span></strong></p><p>&nbsp;</p><h5><span style=\"font-family:Microsoft YaHei;\">抽象工厂模式</span></h5><p><span style=\"font-family:微软雅黑;\">抽象工厂模式将工厂抽象为接口，该接口可以有多个具体的工厂实现类，每个具体的工厂类负责实例化一个具体的产品。<span style=\"font-family:微软雅黑;\">这样设计方式符合了开闭原则，</span>当需要添加新的产品时，只需要多实现一个工厂类去负责其实例化，而不需要修改工厂接口。</span></p><p><span style=\"font-family:微软雅黑;\">实例代码：</span></p><pre class=\"brush: js;\">import patterns.factory.beans.Fruit;\r\n\r\n/**\r\n * 抽象工厂模式，将工厂抽象为一个接口，每个实现该接口的工程类负责生产一种产品\r\n * 当需要添加新的产品时，只需要实现新的工程类即可\r\n * @author chaoch\r\n *\r\n */\r\npublic interface AbstractFruitFactory {\r\n       public Fruit produce();\r\n}\r\n\r\n\r\nimport patterns.factory.beans.Apple;\r\nimport patterns.factory.beans.Fruit;\r\n\r\n/**\r\n * Apple factory, produce apples\r\n *\r\n * @author Charles Chen\r\n *\r\n */\r\npublic class AppleFactory implements AbstractFruitFactory {\r\n\r\n       @Override\r\n       public Fruit produce() {\r\n             // TODO Auto-generated method stub\r\n             return new Apple();\r\n      }\r\n\r\n       /**\r\n       * @param args\r\n       */\r\n       public static void main(String[] args) {\r\n             // TODO Auto-generated method stub\r\n            AppleFactory factory = new AppleFactory();\r\n            Fruit fruit = factory. produce();\r\n            fruit.introduce();\r\n      }\r\n}\r\n\r\n\r\nimport patterns.factory.beans.Banana;\r\nimport patterns.factory.beans.Fruit;\r\n\r\n/**\r\n * Banana factory, produce bananas\r\n *\r\n * @author Charles Chen\r\n *\r\n */\r\npublic class BananaFactory implements AbstractFruitFactory {\r\n\r\n       @Override\r\n       public Fruit produce() {\r\n             // TODO Auto-generated method stub\r\n             return new Banana();\r\n      }\r\n\r\n       /**\r\n       * @param args\r\n       */\r\n       public static void main(String[] args) {\r\n             // TODO Auto-generated method stub\r\n            BananaFactory factory = new BananaFactory();\r\n            Fruit fruit = factory.produce();\r\n            fruit.introduce();\r\n      }\r\n}\r\n</pre><p>&nbsp;</p><p><span style=\"font-family:微软雅黑;\"></span>&nbsp;</p><p>&nbsp;</p>', '12', '1', '2014-05-27 10:55:06', '2014-06-12 11:36:30', '233', '0', '1', '1', null, null, null);
INSERT INTO `tech_blog_article` VALUES ('31', '创建型设计模式 — 单例模式', '<h4>什么是单例模式</h4><p>单例模式顾名思义就是对类只实例化一次，在程序中复用同一个实例。单例模式能保证对象在一个JVM中只存在一个实例。</p><h4>&nbsp;</h4><h4>为什么要使用单例模式</h4><p>首先，使用单例模式可以减少new关键字的使用，降低开销，减轻垃圾回收器的压力其次，某些业务需求要求对象在整个系统中只存在一个实例，如果存在多个会对业务造成影响。例如一个交易系统的核心交易引擎实例，该实例管理和控制着所有核心交易，如果该实例存在多个，必定会对系统造成致命的影响。</p><h4>&nbsp;</h4><h4>单例模式的实现</h4><p>1、普通方式（也称懒汉方式）</p><p>一般是声明一个私有的对象属性，然后声明一个静态的获取实例的方法，在方法中判断对象是否已经创建，若已经创建则返回实例，否则new一个实例返回。另外，需要将构造方法声明为私有，防止外部程序通过new方式创建实例。这种方式的缺点是不保证线程安全，多线程下不能保证实例化操作的同步。</p><p>代码示例：</p><pre class=\"brush: js;\">/**\r\n * 普通单例模式，也称懒汉方式，不保证线程安全\r\n *\r\n * @author Charles Chen\r\n *\r\n */\r\npublic class LazySingleton {\r\n   private LazySingleton() {\r\n  }\r\n\r\n   private static LazySingleton singleton;\r\n\r\n   /**\r\n   * Get instance\r\n   *\r\n   * @return\r\n   */\r\n   public static LazySingleton getInstance() {\r\n if (singleton == null) {\r\n   singleton = new LazySingleton();\r\n}\r\n return singleton ;\r\n  }\r\n}\r\n</pre><p>2、饿汉方式</p><p>在声明对象属性时便进行实例化，然后声明一个静态方法直接返回这个实例。由于类加载的过程是线程互斥的，加载过程中的实例化操作具有原子性，因此这种方式可以保证线程安全，但并没有实现延迟加载，如果对象的实例化过程需要很大的消耗，而且实例不一定会被使用，那么这种方式会对性能造成一定影响。</p><p>代码示例：</p><pre class=\"brush: js;\">/**\r\n * 饿汉方式，声明对象属性时进行实例化，保证线程安全，不实现延迟加载\r\n *\r\n * @author Charles Chen\r\n *\r\n */\r\npublic class HungrySingleton {\r\n   private HungrySingleton() {\r\n  }\r\n\r\n   private static HungrySingleton singleton = new HungrySingleton ();\r\n\r\n   /**\r\n   * Get instance\r\n   *\r\n   * @return\r\n   */\r\n   public static HungrySingleton getInstance() {\r\n return singleton ;\r\n  }\r\n\r\n}\r\n</pre><p>3、同步方式</p><p>为了保证延迟加载，并保证线程安全，一种实现方式就是加同步锁。</p><p>（1）同步锁可以加在获取实例的方法上，代码如下：</p><pre class=\"brush: js;\">/**\r\n* Get instance\r\n* @return\r\n*/\r\npublic static synchronized SyncSingleton getInstance(){\r\n if(singleton == null){\r\n   singleton = new SyncSingleton();\r\n}\r\n return singleton ;\r\n}\r\n</pre><p>（2）将同步锁加在整个方法上会导致每次调用该方法都要对对象加锁，会严重影响性能。事实上，懒汉方式导致线程不安全的根本原因在于判断singleton是否为null与实例化singleton的操作时分开的，于是只需要将锁加在判断与实例化的代码上，代码如下：</p><pre class=\"brush: js;\">/**\r\n* Get instance\r\n*\r\n* @return\r\n*/\r\npublic static SyncSingleton getInstance() {\r\n synchronized (SyncSingleton.class) {\r\n   if (singleton == null) {\r\n singleton = new SyncSingleton();\r\n  }\r\n}\r\n return singleton ;\r\n}\r\n</pre><p>（3）上面这种方式事实上已经将getInstance方法90%的代码加了锁，在性能上几乎没有提升。于是我们可以考虑先检查对象是否为空，当对象真的为空时，才进入同步块，同步块需要进行再一次的检查避免其他线程实例化了对象，这就是所谓的双重校验锁（double-checked locking）方法。代码如下：</p><pre class=\"brush: js;\">/**\r\n* Get instance\r\n*\r\n* @return\r\n*/\r\npublic static SyncSingleton getInstance() {\r\n if (singleton == null) {\r\n   synchronized (SyncSingleton.class) {\r\n if (singleton == null) {\r\n   singleton = new SyncSingleton();\r\n}\r\n  }\r\n}\r\n return singleton ;\r\n}\r\n</pre><p>双重校验锁的方式是不是就可以保证程序完全没有问题了呢？不一定。首先，从JVM层面上看，实例化一个对象的步骤包括：申请一块内存，调用构造方法初始化内存，将引用指向该内存块。而JVM并没有确定这三个步骤的先后顺序，那么就存在这么一个情况，JVM先申请了一块内存并将引用指向该内存，然后再进行初始化。这种情况下，如果A，B线程同时调用了getInstance方法，A线程中singleton对象已经指向了一块内存，但还未进行初始化，而B此时判断singleton应该不为null，那么B调用getInstacne方法返回的是一个为初始化的对象，使用该实例就会导致程序错误。</p><p>4、内部类方式（个人推荐）</p><p>在类内部声明一个私有的静态内部类，内部类中声明对象属性并对其进行实例化，获取实例的方法直接返回内部类中的对象。由于静态内部类只有当调用获取实例的方法时才被加载，加载的过程中完成对对象的实例化，因此这种方式既实现了延迟加载，又能保证线程安全。</p><p>代码示例：</p><pre class=\"brush: js;\">/**\r\n * 内部类方式，声明一个私有的静态内部类，内部类中声明对象属性并进行实例化\r\n *\r\n * @author Charles Chen\r\n *\r\n */\r\npublic class InnerClassSingleton {\r\n   private InnerClassSingleton() {\r\n  }\r\n\r\n   private static class InnerClassSingletonInstance {\r\n private static final InnerClassSingleton singleton = new InnerClassSingleton();\r\n  }\r\n\r\n   /**\r\n   * Get instance\r\n   * @return\r\n   */\r\n   public static InnerClassSingleton getInstance() {\r\n return InnerClassSingletonInstance.singleton;\r\n  }\r\n}\r\n</pre><p>以上4种方式需要将构造器声明为私有，以防止外部通过new方式创建对象，但是，Java的反射机制允许在类外部通过反射设置构造器的访问权限。代码如下：</p><pre class=\"brush: js;\">Class singletonClass = Class. forName(&quot;patterns.singleton.LazySingleton&quot;);\r\nConstructor[] constructors = singletonClass.getDeclaredConstructors();\r\nconstructors[0].setAccessible( true);\r\nsingleton = (LazySingleton) constructors[0].newInstance(null);\r\n</pre><p>解决这种方法我们唯有在构造器中抛出异常。</p><p>5、枚举方式</p><p>还有另外一种实现单例的方式就是定义单枚举值的枚举类型。枚举事实上也是一个类，继承自java.lang.Enum，每个枚举值都是该类的一个实例。使用枚举方式创建实例的优势有：</p><p>（1） 枚举值在枚举类型加载过程中完成实例化，所以能保证线程安全</p><p>（2） 枚举实例不能通过new关键字创建，因为枚举类型的构造器是私有的，也不能通过反射机制来创建，会报”java.lang.IllegalArgumentException: Cannot reflectively create enum objects“异常。所以无法在程序外部创建新的实例</p><p>（3） 枚举类型可以保证反序列化后返回的是同一个实例。JVM对枚举类型的序列化有特殊的规定，序列化的结果只保存了枚举值的名称，即枚举值的toString方法的返回值，反序列化时会调用该枚举类型的valueOf方法，以枚举值的名称作为参数，返回同一个枚举实例。</p><p>唯一的缺点就是没有实现延迟加载。</p><p>代码示例：</p><pre class=\"brush: js;\">/**\r\n * 枚举方式，保证线程安全，防止反射或反序列化产生新的实例，不实现延迟加载\r\n * @author Charles Chen\r\n *\r\n */\r\npublic enum EnumSingleton {\r\n   INSTANCE;\r\n   public void otherMehod() {\r\n  }\r\n}\r\n</pre><p>枚举方式应该是最简洁并且相对安全的单例实现模式，只不过枚举是在JDK5以后才有的类型，写法难免有相对生疏。</p>', '12', '1', '2014-05-27 11:32:27', '2014-06-12 11:34:22', '306', '0', '1', '1', null, null, null);
INSERT INTO `tech_blog_article` VALUES ('32', '创建型设计模式 — 原型模式', '<h4>什么是原型模式</h4><p>原型模式就是以一个对象实例为原型，复制克隆产生其他实例。实现原型模式的类需要实现Cloneable接口，该接口是一个空接口，作用是告诉JVM可以安全地调用clone方法，如果不实现Clonable接口而调用clone方法，运行时会抛出CloneNotSupportedException。</p><h4>&nbsp;</h4><h4>为什么要使用原型模式</h4><p>使用原型模式的有点有：</p><ol><li>简化对象的创建，创建一个新的实例只需要调用原有对象的clone方法，就好比文档的复制粘贴一样简单</li><li>当所要创建的对象是一个大对象时，调用clone方法比直接new一个对象在性能上要好很多，因为clone方法是一个本地方法。</li></ol><h4>&nbsp;</h4><h4>原型模式的实现</h4><p>实现原型模式的类需要实现Cloneable接口，并将重写clone方法，将其访问权限设置为public。</p><p>Java语言中，对象的复制有浅复制和深复制之分。</p><p><strong>浅复制</strong>： 将一个对象复制后，只有基本数据类型被复制，对于引用数据类型，只复制了引用，引用所指向的对象并没有被复制，指向的还是原对象。java.lang.Object的clone方法实现了浅复制。</p><p><strong>深复制</strong>： 将一个对象复制后，基本数据类型和引用数据类型都会被复制。实现深复制需要通过对象的序列化与反序列化来实现。实现深复制的类必须实现Serializable接口，Serializable接口的作用同样只是告诉JVM可以安全地对该类的实例进行序列化，如果不实现该接口而直接进行序列化会抛出NotSerializableException异常</p><p>以下示例代理实现了原型模式的浅复制和深复制：</p><pre class=\"brush: js;\">import java.io.ByteArrayInputStream;\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.ObjectInputStream;\r\nimport java.io.ObjectOutputStream;\r\nimport java.io.Serializable;\r\n\r\npublic class Prototype implements Cloneable, Serializable {\r\n       private static final long serialVersionUID = 1L;\r\n       public int id = 0;\r\n       public ReferenceType rt = new ReferenceType();\r\n\r\n       /**\r\n       * Shallow clone\r\n       *\r\n       * @return\r\n       */\r\n       public Prototype clone() throws CloneNotSupportedException {\r\n            Prototype proto = (Prototype) super.clone();\r\n             return proto;\r\n      }\r\n\r\n       /**\r\n       * Deep clone\r\n       *\r\n       * @return\r\n       * @throws IOException\r\n       * @throws ClassNotFoundException\r\n       */\r\n       public Prototype deepClone() throws IOException, ClassNotFoundException {\r\n             // Serialize object\r\n            ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n            ObjectOutputStream oos = new ObjectOutputStream(bos);\r\n            oos.writeObject( this);\r\n\r\n             // Deserialize object\r\n            ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());\r\n            ObjectInputStream ois = new ObjectInputStream(bis);\r\n             return (Prototype) ois.readObject();\r\n\r\n      }\r\n\r\n       public static void main(String[] args) {\r\n            Prototype proto = new Prototype();\r\n            System. out.println(proto);\r\n            System. out.println(proto.rt );\r\n\r\n             try {\r\n                  Prototype clone1 = proto.clone();\r\n                  System. out.println(clone1);\r\n                  System. out.println(clone1.rt );\r\n\r\n                  Prototype clone2 = proto.deepClone();\r\n                  System. out.println(clone2);\r\n                  System. out.println(clone2.rt );\r\n\r\n            } catch (Exception e) {\r\n                   // TODO Auto-generated catch block\r\n                  e.printStackTrace();\r\n            }\r\n\r\n      }\r\n}\r\n</pre><p>&nbsp;</p>', '12', '1', '2014-06-12 11:26:19', '2014-06-12 11:35:15', '94', '0', '1', '1', null, null, null);
INSERT INTO `tech_blog_article` VALUES ('33', '创建型设计模式 — 建造者模式', '<h4>什么是建造者模式</h4><p>建造者模式和工厂模式都是由一个类来负责对象的实例化工作，不同在于，建造者模式是针对那些较为复杂的、创建过程需要多个步骤的对象。</p><p>建造者模式下一般有三个角色：产品、建造者（Builder）以及指导者（Director）。建造者中通常声明了多个方法，每个方法表示一个独立的创建产品的步骤，而指导者负责将建造者的步骤组合起来，从而完成对象的构建。</p><p>其中，建造者通常抽象为一个接口，可以有多个具体的建造者实现类，不同的构造类具有不同的构造对象的步骤。而指导者中，通常提供一个方法接受建造者实例，组合建造者中的创建步骤，最终返回一个完整的对象，指导者不需要关心创建对象的具体逻辑，只需要负责组合这些步骤。</p><p>&nbsp;</p><h4>为什么要使用建造者模式</h4><p>使用建造者模式的优点有：</p><ol><li>简化创建对象的客户端代码。客户端不需要关注创建对象的复杂步骤，只需要调用指导者接口就可以完成对象的创建</li><li>实现对象的创建与具体步骤的分离解耦。指导者可以接受不同的构建者实例，创建出不同的对象，当创建对象的具体步骤需要变化时，我们只需要实现多一个建造者，而不需要修改指导者的构建代码，符合“多扩展开放，对修改关闭的原则”</li></ol><h4>&nbsp;</h4><h4>建造者模式的实现</h4><p>举一个实际的示例，</p><p>Product产品有三个属性：partA, partB, partC，构造Product对象需要三个步骤来设置这三个属性</p><p>Builder是构造者接口，声明了三个方法分别设置Product的三个属性，还有一个build方法用于获取设置完的对象</p><p>Director是指导者类，声明了construct方法，接收一个Builder对象参数，并调用Builder对象的三个步骤，最后返回build方法的返回的对象</p><p>UML类图如下：</p><p><img alt=\"\" src=\"/xheditor_img/20140612/216d67e7-b170-47d0-888c-261c12a3a8f4.png\" /></p><p>示例代码：</p><p>Product产品类</p><p>&nbsp;</p><pre class=\"brush: js;\">/**\r\n * 产品角色\r\n *\r\n * @author Charles Chen\r\n *\r\n */\r\npublic class Product {\r\n       private String partA ;\r\n       private String partB ;\r\n       private String partC ;\r\n\r\n       public String getPartA() {\r\n             return partA ;\r\n      }\r\n\r\n       public void setPartA(String partA) {\r\n             this.partA = partA;\r\n      }\r\n\r\n       public String getPartB() {\r\n             return partB ;\r\n      }\r\n\r\n       public void setPartB(String partB) {\r\n             this.partB = partB;\r\n      }\r\n\r\n       public String getPartC() {\r\n             return partC ;\r\n      }\r\n\r\n       public void setPartC(String partC) {\r\n             this.partC = partC;\r\n      }\r\n\r\n       public String toString() {\r\n             return &quot;PartA: &quot; + getPartA() + &quot;\\nPartB: &quot; + getPartB() + &quot;\\nPartC: &quot;\r\n                        + getPartC();\r\n      }\r\n}\r\n</pre><p></p><p>Builder建造者接口</p><pre class=\"brush: js;\">/**\r\n * 建造者接口\r\n * @author Charles Chen\r\n *\r\n */\r\npublic interface Builder {\r\n       void buildPartA();\r\n\r\n       void buildPartB();\r\n\r\n       void buildPartC();\r\n\r\n      Product build();\r\n}</pre><p>&nbsp;</p><p>具体的建造者类Builder1, Builder2</p><pre class=\"brush: js;\">/**\r\n * 建造者1\r\n *\r\n * @author Charles Chen\r\n *\r\n */\r\npublic class Builder1 implements Builder {\r\n       private Product product ;\r\n\r\n       public Builder1() {\r\n             product = new Product();\r\n      }\r\n\r\n       @Override\r\n       public Product build() {\r\n             // TODO Auto-generated method stub\r\n             return product ;\r\n      }\r\n\r\n       @Override\r\n       public void buildPartA() {\r\n             // TODO Auto-generated method stub\r\n             product.setPartA(&quot;Build part A from Builder 1&quot; );\r\n      }\r\n\r\n       @Override\r\n       public void buildPartB() {\r\n             // TODO Auto-generated method stub\r\n             product.setPartB(&quot;Build part B from Builder 1&quot; );\r\n      }\r\n\r\n       @Override\r\n       public void buildPartC() {\r\n             // TODO Auto-generated method stub\r\n             product.setPartC(&quot;Build part C from Builder 1&quot; );\r\n      }\r\n\r\n}\r\n\r\n/**\r\n * 建造者2\r\n *\r\n * @author Charles Chen\r\n *\r\n */\r\npublic class Builder2 implements Builder {\r\n       private Product product ;\r\n\r\n       public Builder2() {\r\n             product = new Product();\r\n      }\r\n\r\n       @Override\r\n       public Product build() {\r\n             // TODO Auto-generated method stub\r\n             return product ;\r\n      }\r\n\r\n       @Override\r\n       public void buildPartA() {\r\n             // TODO Auto-generated method stub\r\n             product.setPartA(&quot;Build part A from Builder 2&quot; );\r\n      }\r\n\r\n       @Override\r\n       public void buildPartB() {\r\n             // TODO Auto-generated method stub\r\n             product.setPartB(&quot;Build part B from Builder 2&quot; );\r\n      }\r\n\r\n       @Override\r\n       public void buildPartC() {\r\n             // TODO Auto-generated method stub\r\n             product.setPartC(&quot;Build part C from Builder 2&quot; );\r\n      }\r\n\r\n}\r\n</pre><p>&nbsp;</p><p>Director指导者类</p><pre class=\"brush: js;\">/**\r\n * 指导者类\r\n *\r\n * @author Charles Chen\r\n *\r\n */\r\npublic class Director {\r\n       /**\r\n       * 组合传入的建造者的构造步骤，返回对象实例\r\n       *\r\n       * @param builder\r\n       * @return\r\n       */\r\n       public Product construct(Builder builder) {\r\n            builder.buildPartA();\r\n            builder.buildPartB();\r\n            builder.buildPartC();\r\n             return builder.build();\r\n      }\r\n}\r\n</pre><p>客户端测试程序</p><pre class=\"brush: js;\">/**\r\n       * @param args\r\n       */\r\n       public static void main(String[] args) {\r\n             // TODO Auto-generated method stub\r\n            Director director = new Director();\r\n\r\n            Builder builder = new Builder1(); // 创建建造者1\r\n            Product product = director.construct(builder); // 利用建造者1构建对象\r\n            System.out.println(product); // 打印对象\r\n            System.out.println();\r\n\r\n            builder = new Builder2(); // 创建建造者2\r\n            product = new Director().construct(builder); // 利用建造者2构建对象\r\n            System.out.println(product); // 打印对象\r\n      }\r\n</pre><p>&nbsp;</p><h5>建造者模式应用于多属性对象的创建</h5><p>《Effective Java》中提到一个建造者模式在构建多属性对象中的应用案例，这种设计方式也是非常值得借鉴。</p><p style=\"PADDING-BOTTOM: 0px; BORDER-RIGHT-WIDTH: 0px; MARGIN: 15px 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; BORDER-TOP-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; BORDER-LEFT-WIDTH: 0px; PADDING-TOP: 0px\">假如一个类有很多个属性，其中有些属性是在初始化时必须赋值的，而有些是可选的。</p><p style=\"PADDING-BOTTOM: 0px; BORDER-RIGHT-WIDTH: 0px; MARGIN: 15px 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; BORDER-TOP-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; BORDER-LEFT-WIDTH: 0px; PADDING-TOP: 0px\">例如类User：</p><pre class=\"brush: js;\">public class User {\r\n       private long userId ;\r\n       private String name ;\r\n       private int age ;\r\n       private String email ;\r\n       private String country ;\r\n       private String address ;\r\n       private String phone ;\r\n}\r\n</pre><p style=\"PADDING-BOTTOM: 0px; BORDER-RIGHT-WIDTH: 0px; MARGIN: 15px 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; BORDER-TOP-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; BORDER-LEFT-WIDTH: 0px; PADDING-TOP: 0px\">其中useId和name是必须的，其他事可选的。</p><p style=\"PADDING-BOTTOM: 0px; BORDER-RIGHT-WIDTH: 0px; MARGIN: 15px 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; BORDER-TOP-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; BORDER-LEFT-WIDTH: 0px; PADDING-TOP: 0px\">那么在设计这样的类时，一般来说有两种方案：</p><ol style=\"PADDING-BOTTOM: 0px; BORDER-RIGHT-WIDTH: 0px; MARGIN: 15px 0px; PADDING-LEFT: 30px; PADDING-RIGHT: 0px; BORDER-TOP-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; BORDER-LEFT-WIDTH: 0px; PADDING-TOP: 0px\"><li style=\"PADDING-BOTTOM: 0px; BORDER-RIGHT-WIDTH: 0px; MARGIN: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; BORDER-TOP-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; BORDER-LEFT-WIDTH: 0px; PADDING-TOP: 0px\">声明一个接收必须属性作为参数的构造器，再声明多个接受不同可选属性的构造器。这种方案需要很多个构造器，会导致类比较臃肿，不容易维护</li><li style=\"PADDING-BOTTOM: 0px; BORDER-RIGHT-WIDTH: 0px; MARGIN: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; BORDER-TOP-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; BORDER-LEFT-WIDTH: 0px; PADDING-TOP: 0px\">为每个属性提供getter和setter，客户端显式调用setter去设置可选的属性。这种方案会增加客户端初始化的代码复杂性</li></ol><p style=\"PADDING-BOTTOM: 0px; BORDER-RIGHT-WIDTH: 0px; MARGIN: 15px 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; BORDER-TOP-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; BORDER-LEFT-WIDTH: 0px; PADDING-TOP: 0px\">此时我们可以考虑使用建造者模式。</p><p style=\"PADDING-BOTTOM: 0px; BORDER-RIGHT-WIDTH: 0px; MARGIN: 15px 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; BORDER-TOP-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; BORDER-LEFT-WIDTH: 0px; PADDING-TOP: 0px\">在该类的内部定义一个静态内部类作为该类的建造者，负责该类属性的初始化工作，而外围类的构造器作为指导者的角色，接受建造者实例，根据建造者实例为属性赋值，完成初始化。</p><p style=\"PADDING-BOTTOM: 0px; BORDER-RIGHT-WIDTH: 0px; MARGIN: 15px 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; BORDER-TOP-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; BORDER-LEFT-WIDTH: 0px; PADDING-TOP: 0px\">在建造者内部类中，需要声明与外围类同样的属性列表，并提供一个接受必须属性作为参数的构造器，然后提供一系列流式接口风格的方法为属性设值（所谓流式接口风格，即声明一系列方法，每个方法负责对一个属性进行设值，设值之后返回当前实例，那么外部程序就可以通过连续调用方法的方式初始化对象）。</p><p style=\"PADDING-BOTTOM: 0px; BORDER-RIGHT-WIDTH: 0px; MARGIN: 15px 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; BORDER-TOP-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; BORDER-LEFT-WIDTH: 0px; PADDING-TOP: 0px\">另外，外围类的构造器需要声明为私有的，防止外部程序通过new方法方式创建实例。</p><p style=\"PADDING-BOTTOM: 0px; BORDER-RIGHT-WIDTH: 0px; MARGIN: 15px 0px 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; BORDER-TOP-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; BORDER-LEFT-WIDTH: 0px; PADDING-TOP: 0px\">代码示例：</p><pre class=\"brush: js;\">public class User {\r\n       private long userId ;\r\n       private String name ;\r\n       private int age ;\r\n       private String email ;\r\n\r\n       /**\r\n       * 私有构造器，接受建造者对象，根据建造者初始化属性值\r\n       *\r\n       * @param builder\r\n       */\r\n       private User(UserBuilder builder) {\r\n             this.userId = builder.userId;\r\n             this.name = builder.name;\r\n             this.age = builder.age;\r\n             this.email = builder.email;\r\n      }\r\n\r\n       public static class UserBuilder {\r\n             private long userId ;\r\n             private String name ;\r\n             private int age ;\r\n             private String email ;\r\n\r\n             /**\r\n             * 构造器，对必须属性赋值\r\n             *\r\n             * @param userId\r\n             * @param name\r\n             */\r\n             public UserBuilder(long userId, String name) {\r\n                   this.userId = userId;\r\n                   this.name = name;\r\n            }\r\n\r\n             /* 流式接口风格方法 */\r\n             public UserBuilder age(int age) {\r\n                   this.age = age;\r\n                   return this ;\r\n            }\r\n\r\n             public UserBuilder email(String email) {\r\n                   this.email = email;\r\n                   return this ;\r\n            }\r\n\r\n             public User build() {\r\n                   return new User(this);\r\n            }\r\n             /* 流式接口风格方法 */\r\n      }\r\n\r\n       public long getUserId() {\r\n             return userId ;\r\n      }\r\n\r\n       public void setUserId(long userId) {\r\n             this.userId = userId;\r\n      }\r\n\r\n       public String getName() {\r\n             return name ;\r\n      }\r\n\r\n       public void setName(String name) {\r\n             this.name = name;\r\n      }\r\n\r\n       public int getAge() {\r\n             return age ;\r\n      }\r\n\r\n       public void setAge(int age) {\r\n             this.age = age;\r\n      }\r\n\r\n       public String getEmail() {\r\n             return email ;\r\n      }\r\n\r\n       public void setEmail(String email) {\r\n             this.email = email;\r\n      }\r\n\r\n       public String toString() {\r\n             return &quot;User ID: &quot; + userId + &quot;\\nUser Name: &quot; + name + &quot;\\nUser Age: &quot;\r\n                        + age + &quot;\\nUser Email: &quot; + email;\r\n      }\r\n\r\n       /**\r\n       * 测试程序\r\n       *\r\n       * @param args\r\n       */\r\n       public static void main(String[] args) {\r\n            User user = new User.UserBuilder(1, &quot;chenchao&quot;).age(23).email(\r\n                         &quot;399931011@qq.com&quot;).build();\r\n            System. out.println(user);\r\n      }\r\n}\r\n</pre><p>&nbsp;</p>', '12', '1', '2014-06-12 11:56:53', '2014-06-12 11:56:53', '99', '0', '1', '1', null, null, null);
INSERT INTO `tech_blog_article` VALUES ('34', '程序员必须知道的10大基础实用算法及其讲解', '<h2 style=\"border: 0px; margin: -9px 0px 20px; padding: 0px; font-size: 24px; font-weight: normal; line-height: 36px; font-family: \'Microsoft YaHei\', \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif;\"><span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 24px;\"><span style=\"font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 21px;\">原文出处：&nbsp;</span><a ref=\"nofollow\" target=\"_blank\" href=\"http://cricode.com/2001.html\" style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px; text-decoration: none; color: rgb(0, 153, 204); font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">cricode</a><span style=\"font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 21px;\">&nbsp;</span><br /></span></h2><h2 style=\"border: 0px; margin: -9px 0px 20px; padding: 0px; font-size: 24px; font-weight: normal; line-height: 36px; font-family: \'Microsoft YaHei\', \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif;\"><span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 24px;\">算法一：快速排序算法</span></h2><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\"><span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">快速排序</span>是由东尼·霍尔所发展的一种排序算法。在平均状况下，排序&nbsp;<span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">n</span>&nbsp;个项目要<span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">Ο</span>(<span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">n</span>&nbsp;log&nbsp;<span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">n</span>)次比较。在最坏状况下则需要<span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">Ο</span>(<span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">n</span>2)次比较，但这种状况并不常见。事实上，快速排序通常明显比其他<span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">Ο</span>(<span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">n</span>&nbsp;log&nbsp;<span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">n</span>)&nbsp;算法更快，因为它的内部循环（inner&nbsp;loop）可以在大部分的架构上很有效率地被实现出来。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">快速排序使用分治法（Divide&nbsp;and&nbsp;conquer）策略来把一个串行（list）分为两个子串行（sub-lists）。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\"><span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">算法步骤：</span></p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">1&nbsp;从数列中挑出一个元素，称为&nbsp;“基准”（pivot），</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">2&nbsp;重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为<span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">分区（partition）</span>操作。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">3&nbsp;递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">递归的最底部情形，是数列的大小是零或一，也就是永远都已经被排序好了。虽然一直递归下去，但是这个算法总会退出，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\"><img id=\"bigImg\" alt=\"\" src=\"http://ww1.sinaimg.cn/mw690/63918611gw1ehkcn4h2tqg207s05ytay.gif\" style=\"border: 0px; margin: 0px; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto;\" /></p><h2 style=\"border: 0px; margin: -9px 0px 20px; padding: 0px; font-size: 24px; font-weight: normal; line-height: 36px; font-family: \'Microsoft YaHei\', \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif;\"><span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 24px;\">算法二：堆排序算法</span></h2><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\"><span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">堆排序</span>（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足<span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">堆积的性质</span>：即子结点的键值或索引总是小于（或者大于）它的父节点。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">堆排序的平均时间复杂度为<span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">Ο</span>(<span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">n</span>log<span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">n</span>) 。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\"><span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">算法步骤：</span></p><ol style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; list-style-position: inside; list-style-image: initial; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\"><li style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">创建一个堆H[0..n-1]</li><li style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">把堆首（最大值）和堆尾互换</li></ol><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">3.&nbsp;把堆的尺寸缩小1，并调用shift_down(0),目的是把新的数组顶端数据调整到相应位置</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">4.&nbsp;重复步骤2，直到堆的尺寸为1</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\"><img id=\"bigImg\" alt=\"\" src=\"http://ww1.sinaimg.cn/mw690/63918611gw1ehkcn5jefog207s05ydn6.gif\" style=\"border: 0px; margin: 0px; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto;\" /></p><h2 style=\"border: 0px; margin: -9px 0px 20px; padding: 0px; font-size: 24px; font-weight: normal; line-height: 36px; font-family: \'Microsoft YaHei\', \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif;\"><span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 24px;\">算法三：归并排序</span></h2><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\"><span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">归并排序（Merge&nbsp;sort，台湾译作：合并排序）</span>是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide&nbsp;and&nbsp;Conquer）的一个非常典型的应用。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\"><span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">算法步骤：</span></p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">1.&nbsp;申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">2.&nbsp;设定两个指针，最初位置分别为两个已经排序序列的起始位置</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">3.&nbsp;比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">4.&nbsp;重复步骤3直到某一指针达到序列尾</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">5.&nbsp;将另一序列剩下的所有元素直接复制到合并序列尾</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\"><img id=\"bigImg\" alt=\"\" src=\"http://ww1.sinaimg.cn/mw690/63918611gw1ehkcn6810gg207s06l0st.gif\" style=\"border: 0px; margin: 0px; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto;\" /></p><h2 style=\"border: 0px; margin: -9px 0px 20px; padding: 0px; font-size: 24px; font-weight: normal; line-height: 36px; font-family: \'Microsoft YaHei\', \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif;\"><span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 24px;\">算法四：二分查找算法</span></h2><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\"><span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">二分查找算法</span>是一种在有序数组中查找某一特定元素的搜索算法。搜素过程从数组的中间元素开始，如果中间元素正好是要查找的元素，则搜 素过程结束；如果某一特定元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半中查找，而且跟开始一样从中间元素开始比较。如果在某一步骤数组 为空，则代表找不到。这种搜索算法每一次比较都使搜索范围缩小一半。折半搜索每次把搜索区域减少一半，时间复杂度为<span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">Ο</span>(log<span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">n</span>) 。</p><h2 style=\"border: 0px; margin: -9px 0px 20px; padding: 0px; font-size: 24px; font-weight: normal; line-height: 36px; font-family: \'Microsoft YaHei\', \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif;\"><span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 24px;\">算法五：BFPRT(线性查找算法)</span></h2><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\"><span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">BFPRT算法</span>解决的问题十分经典，即从某n个元素的序列中选出第k大（第k小）的元素，通过巧妙的分 析，BFPRT可以保证在最坏情况下仍为线性时间复杂度。该算法的思想与快速排序思想相似，当然，为使得算法在最坏情况下，依然能达到o(n)的时间复杂 度，五位算法作者做了精妙的处理。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\"><span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">算法步骤：</span></p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">1.&nbsp;将n个元素每5个一组，分成n/5(上界)组。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">2.&nbsp;取出每一组的中位数，任意排序方法，比如插入排序。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">3.&nbsp;递归的调用selection算法查找上一步中所有中位数的中位数，设为x，偶数个中位数的情况下设定为选取中间小的一个。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">4.&nbsp;用x来分割数组，设小于等于x的个数为k，大于x的个数即为n-k。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">5.&nbsp;若i==k，返回x；若i&lt;k，在小于x的元素中递归查找第i小的元素；若i&gt;k，在大于x的元素中递归查找第i-k小的元素。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">终止条件：n=1时，返回的即是i小元素。</p><h2 style=\"border: 0px; margin: -9px 0px 20px; padding: 0px; font-size: 24px; font-weight: normal; line-height: 36px; font-family: \'Microsoft YaHei\', \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif;\"><span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 24px;\">算法六：DFS（深度优先搜索）</span></h2><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\"><span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">深度优先搜索算法</span>（Depth-First-Search），是搜索算法的一种。它沿着树的深度遍历树的节点，尽可能深的搜索树的分 支。当节点v的所有边都己被探寻过，搜索将回溯到发现节点v的那条边的起始节点。这一过程一直进行到已发现从源节点可达的所有节点为止。如果还存在未被发 现的节点，则选择其中一个作为源节点并重复以上过程，整个进程反复进行直到所有节点都被访问为止。DFS属于盲目搜索。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">深度优先搜索是图论中的经典算法，利用深度优先搜索算法可以产生目标图的相应拓扑排序表，利用拓扑排序表可以方便的解决很多相关的图论问题，如最大路径问题等等。一般用堆数据结构来辅助实现DFS算法。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\"><span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">深度优先遍历图算法步骤：</span></p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">1.&nbsp;访问顶点v；</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">2.&nbsp;依次从v的未被访问的邻接点出发，对图进行深度优先遍历；直至图中和v有路径相通的顶点都被访问；</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">3.&nbsp;若此时图中尚有顶点未被访问，则从一个未被访问的顶点出发，重新进行深度优先遍历，直到图中所有顶点均被访问过为止。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">上述描述可能比较抽象，举个实例：</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">DFS&nbsp;在访问图中某一起始顶点&nbsp;v&nbsp;后，由&nbsp;v&nbsp;出发，访问它的任一邻接顶点&nbsp;w1；再从&nbsp;w1&nbsp;出发，访问与&nbsp;w1邻&nbsp;接但还没有访问过的顶点&nbsp;w2；然后再从&nbsp;w2&nbsp;出发，进行类似的访问，…&nbsp;如此进行下去，直至到达所有的邻接顶点都被访问过的顶点&nbsp;u&nbsp;为止。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">接着，退回一步，退到前一次刚访问过的顶点，看是否还有其它没有被访问的邻接顶点。如果有，则访问此顶点，之后再从此顶点出发，进行与前述类似的访问；如果没有，就再退回一步进行搜索。重复上述过程，直到连通图中所有顶点都被访问过为止。</p><h2 style=\"border: 0px; margin: -9px 0px 20px; padding: 0px; font-size: 24px; font-weight: normal; line-height: 36px; font-family: \'Microsoft YaHei\', \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif;\"><span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 24px;\">算法七：BFS(广度优先搜索)</span></h2><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\"><span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">广度优先搜索算法</span>（Breadth-First-Search），是一种图形搜索算法。简单的说，BFS是从根节点开始，沿着树(图)的宽度遍历树(图)的节点。如果所有节点均被访问，则算法中止。BFS同样属于盲目搜索。一般用队列数据结构来辅助实现BFS算法。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">算法步骤：</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">1.&nbsp;首先将根节点放入队列中。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">2.&nbsp;从队列中取出第一个节点，并检验它是否为目标。</p><ul style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; list-style-position: inside; list-style-image: initial; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\"><li style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">如果找到目标，则结束搜寻并回传结果。</li><li style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">否则将它所有尚未检验过的直接子节点加入队列中。</li></ul><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">3.&nbsp;若队列为空，表示整张图都检查过了——亦即图中没有欲搜寻的目标。结束搜寻并回传“找不到目标”。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">4.&nbsp;重复步骤2。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\"><img id=\"bigImg\" alt=\"\" src=\"http://ww1.sinaimg.cn/mw690/63918611gw1ehkcn6q8lmg205704vgm8.gif\" style=\"border: 0px; margin: 0px; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto;\" /></p><h2 style=\"border: 0px; margin: -9px 0px 20px; padding: 0px; font-size: 24px; font-weight: normal; line-height: 36px; font-family: \'Microsoft YaHei\', \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif;\"><span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 24px;\">算法八：Dijkstra算法</span></h2><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\"><span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">戴克斯特拉算法</span>（Dijkstra’s&nbsp;algorithm）是由荷兰计算机科学家艾兹赫尔·戴克斯特拉提出。迪科斯彻算法使用了广度优先搜索解决非负权有向图的单源最短路径问题，算法最终得到一个最短路径树。该算法常用于路由算法或者作为其他图算法的一个子模块。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">该算法的输入包含了一个有权重的有向图&nbsp;<span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">G</span>，以及G中的一个来源顶点&nbsp;<span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">S</span>。我们以&nbsp;<span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">V</span>&nbsp;表示&nbsp;<span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">G</span>&nbsp;中所有顶点的集合。每一个图中的边，都是两个顶点所形成的有序元素对。(<span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">u</span>,&nbsp;<span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">v</span>)&nbsp;表示从顶点&nbsp;<span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">u</span>&nbsp;到&nbsp;<span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">v</span>&nbsp;有路径相连。我们以&nbsp;<span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">E</span>&nbsp;表示<span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">G</span>中所有边的集合，而边的权重则由权重函数&nbsp;<span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">w</span>:&nbsp;<span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">E</span>&nbsp;→&nbsp;[0,&nbsp;∞]&nbsp;定义。因此，<span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">w</span>(<span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">u</span>,&nbsp;<span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">v</span>)&nbsp;就是从顶点&nbsp;<span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">u</span>&nbsp;到顶点&nbsp;<span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">v</span>&nbsp;的非负权重（weight）。边的权重可以想像成两个顶点之间的距离。任两点间路径的权重，就是该路径上所有边的权重总和。已知有&nbsp;<span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">V</span>&nbsp;中有顶点&nbsp;<span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">s</span>&nbsp;及&nbsp;<span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">t</span>，Dijkstra&nbsp;算法可以找到&nbsp;<span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">s</span>&nbsp;到&nbsp;<span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">t</span>的最低权重路径(例如，最短路径)。这个算法也可以在一个图中，找到从一个顶点&nbsp;<span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">s</span>&nbsp;到任何其他顶点的最短路径。对于不含负权的有向图，Dijkstra算法是目前已知的最快的单源最短路径算法。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\"><span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">算法步骤：</span></p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">1.&nbsp;初始时令&nbsp;S={V0},T={其余顶点}，T中顶点对应的距离值</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">若存在&lt;V0,Vi&gt;，d(V0,Vi)为&lt;V0,Vi&gt;弧上的权值</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">若不存在&lt;V0,Vi&gt;，d(V0,Vi)为∞</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">2.&nbsp;从T中选取一个其距离值为最小的顶点W且不在S中，加入S</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">3.&nbsp;对其余T中顶点的距离值进行修改：若加进W作中间顶点，从V0到Vi的距离值缩短，则修改此距离值</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">重复上述步骤2、3，直到S中包含所有顶点，即W=Vi为止</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\"><img id=\"bigImg\" alt=\"\" src=\"http://ww3.sinaimg.cn/mw690/63918611gw1ehkcn7g9f3g207v066jrc.gif\" style=\"border: 0px; margin: 0px; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto;\" /></p><h2 style=\"border: 0px; margin: -9px 0px 20px; padding: 0px; font-size: 24px; font-weight: normal; line-height: 36px; font-family: \'Microsoft YaHei\', \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif;\"><span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 24px;\">算法九：动态规划算法</span></h2><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\"><span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">动态规划</span>（Dynamic&nbsp;programming）是一种在数学、计算机科学和经济学中使用的，通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。&nbsp;动态规划常常适用于有重叠子问题和最优子结构性质的问题，动态规划方法所耗时间往往远少于朴素解法。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">动态规划背后的基本思想非常简单。大致上，若要解一个给定问题，我们需要解其不同部分（即子问题），再合并子问题的解以得出原问题的解。&nbsp;通常许多 子问题非常相似，为此动态规划法试图仅仅解决每个子问题一次，从而减少计算量：&nbsp;一旦某个给定子问题的解已经算出，则将其记忆化存储，以便下次需要同一个 子问题解之时直接查表。&nbsp;这种做法在重复子问题的数目关于输入的规模呈指数增长时特别有用。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">关于动态规划最经典的问题当属背包问题。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\"><span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 14px;\">算法步骤：</span></p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">1.&nbsp;最优子结构性质。如果问题的最优解所包含的子问题的解也是最优的，我们就称该问题具有最优子结构性质（即满足最优化原理）。最优子结构性质为动态规划算法解决问题提供了重要线索。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">2.&nbsp;子问题重叠性质。子问题重叠性质是指在用递归算法自顶向下对问题进行求解时，每次产生的子问题并不总是新问题，有些子问题会被重复计算多次。 动态规划算法正是利用了这种子问题的重叠性质，对每一个子问题只计算一次，然后将其计算结果保存在一个表格中，当再次需要计算已经计算过的子问题时，只是 在表格中简单地查看一下结果，从而获得较高的效率。</p><h2 style=\"border: 0px; margin: -9px 0px 20px; padding: 0px; font-size: 24px; font-weight: normal; line-height: 36px; font-family: \'Microsoft YaHei\', \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif;\"><span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 24px;\">算法十：朴素贝叶斯分类算法</span></h2><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">朴素贝叶斯分类算法是一种基于贝叶斯定理的简单概率分类算法。贝叶斯分类的基础是概率推理，就是在各种条件的存在不确定，仅知其出现概率的情况下， 如何完成推理和决策任务。概率推理是与确定性推理相对应的。而朴素贝叶斯分类器是基于独立假设的，即假设样本每个特征与其他特征都不相关。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">朴素贝叶斯分类器依靠精确的自然概率模型，在有监督学习的样本集中能获取得非常好的分类效果。在许多实际应用中，朴素贝叶斯模型参数估计使用最大似然估计方法，换言之朴素贝叶斯模型能工作并没有用到贝叶斯概率或者任何贝叶斯模型。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 14px; font-family: \'Microsoft YaHei\', 宋体, \'Myriad Pro\', Lato, \'Helvetica Neue\', Helvetica, Arial, sans-serif; line-height: 21px;\">尽管是带着这些朴素思想和过于简单化的假设，但朴素贝叶斯分类器在很多复杂的现实情形中仍能够取得相当好的效果。</p>', '6', '1', '2014-06-20 14:18:15', '2014-06-20 14:18:15', '2', '0', '1', '1', null, null, null);

-- ----------------------------
-- Table structure for tech_blog_article_admin_reply
-- ----------------------------
DROP TABLE IF EXISTS `tech_blog_article_admin_reply`;
CREATE TABLE `tech_blog_article_admin_reply` (
  `admin_reply_id` smallint(6) NOT NULL AUTO_INCREMENT COMMENT 'Administrator reply ID',
  `admin_reply_content` varchar(500) NOT NULL COMMENT 'Administrator reply content',
  `admin_id` smallint(6) NOT NULL COMMENT 'Administrator ID, Foreign key',
  `article_reply_id` smallint(6) NOT NULL COMMENT 'Article reply ID, Foreign key',
  `admin_reply_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'Reply time',
  `admin_reply_state` tinyint(4) NOT NULL DEFAULT '1' COMMENT 'Reply state, 1 for available, 0 for deleted',
  `bk_field_1` varchar(255) DEFAULT NULL,
  `bk_field_2` varchar(255) DEFAULT NULL,
  `bk_field_3` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`admin_reply_id`),
  KEY `reply_admin` (`admin_id`) USING BTREE,
  KEY `admin_reply_article_reply` (`article_reply_id`) USING BTREE,
  CONSTRAINT `tech_blog_article_admin_reply_ibfk_1` FOREIGN KEY (`article_reply_id`) REFERENCES `tech_blog_article_reply` (`reply_id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `tech_blog_article_admin_reply_ibfk_2` FOREIGN KEY (`admin_id`) REFERENCES `tech_blog_admin` (`admin_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8 COMMENT='InnoDB free: 0 kB; (`article_reply_id`) REFER `tech_blog/tec';

-- ----------------------------
-- Records of tech_blog_article_admin_reply
-- ----------------------------
INSERT INTO `tech_blog_article_admin_reply` VALUES ('1', '<img width=\"24\" height=\"24\" _xhe_src=\"js/xheditor/xheditor_emot/default/laugh.gif\" src=\"js/xheditor/xheditor_emot/default/laugh.gif\" alt=\"大笑\" _moz_resizing=\"true\">', '1', '1', '2013-12-19 15:26:36', '1', null, null, null);
INSERT INTO `tech_blog_article_admin_reply` VALUES ('2', '是的', '1', '3', '2013-12-19 15:26:53', '1', null, null, null);

-- ----------------------------
-- Table structure for tech_blog_article_category
-- ----------------------------
DROP TABLE IF EXISTS `tech_blog_article_category`;
CREATE TABLE `tech_blog_article_category` (
  `category_id` smallint(6) NOT NULL AUTO_INCREMENT COMMENT 'Primary key ID',
  `category_name` varchar(20) NOT NULL COMMENT 'Category name',
  `category_create_time` datetime DEFAULT NULL,
  `category_article_count` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Article count in this category',
  `category_set_top` tinyint(4) NOT NULL DEFAULT '0' COMMENT 'Top-allocated or not',
  `category_state` tinyint(4) NOT NULL DEFAULT '1' COMMENT 'Category state, 1 for available, 0 for deleted',
  `bk_field_1` varchar(255) DEFAULT NULL,
  `bk_field_2` varchar(255) DEFAULT NULL,
  `bk_field_3` varchar(255) DEFAULT NULL,
  `category_order` smallint(6) DEFAULT NULL,
  PRIMARY KEY (`category_id`)
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of tech_blog_article_category
-- ----------------------------
INSERT INTO `tech_blog_article_category` VALUES ('1', '技术研发', '2014-11-30 10:00:00', '11', '1', '1', null, null, null, '1');
INSERT INTO `tech_blog_article_category` VALUES ('2', 'WEB前端', '2014-11-30 10:01:00', '5', '1', '1', null, null, null, '3');
INSERT INTO `tech_blog_article_category` VALUES ('3', '数据库技术', '2014-11-30 10:02:00', '1', '0', '1', null, null, null, '4');
INSERT INTO `tech_blog_article_category` VALUES ('6', '算法/数据结构', '2014-11-30 10:03:00', '3', '1', '1', null, null, null, '6');
INSERT INTO `tech_blog_article_category` VALUES ('7', '视觉/交互设计', '2014-11-30 10:05:00', '1', '1', '1', null, null, null, '8');
INSERT INTO `tech_blog_article_category` VALUES ('8', '软件测试', '2014-11-30 10:04:00', '2', '1', '1', null, null, null, '7');
INSERT INTO `tech_blog_article_category` VALUES ('9', '交流分享', '2014-11-30 10:06:00', '3', '0', '1', null, null, null, '9');
INSERT INTO `tech_blog_article_category` VALUES ('10', '其他', '2014-11-30 10:07:00', '0', '0', '1', null, null, null, '10');
INSERT INTO `tech_blog_article_category` VALUES ('11', 'Webservice', '2014-01-30 22:17:26', '3', '1', '1', null, null, null, '2');
INSERT INTO `tech_blog_article_category` VALUES ('12', '设计模式', '2014-05-27 10:22:34', '4', '0', '1', null, null, null, '5');

-- ----------------------------
-- Table structure for tech_blog_article_reply
-- ----------------------------
DROP TABLE IF EXISTS `tech_blog_article_reply`;
CREATE TABLE `tech_blog_article_reply` (
  `reply_id` smallint(6) NOT NULL AUTO_INCREMENT COMMENT 'Reply ID',
  `article_id` smallint(6) NOT NULL COMMENT 'Article ID',
  `reply_visitor_name` varchar(20) DEFAULT NULL COMMENT 'Replier name',
  `reply_visitor_email` varchar(30) DEFAULT NULL COMMENT 'Replier email',
  `reply_visitor_website` varchar(50) DEFAULT NULL COMMENT 'Replier website',
  `reply_content` varchar(500) NOT NULL COMMENT 'Reply content',
  `reply_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'Reply time',
  `reply_state` tinyint(4) NOT NULL DEFAULT '1' COMMENT 'Reply state',
  `bk_field_1` varchar(255) DEFAULT NULL,
  `bk_field_2` varchar(255) DEFAULT NULL,
  `bk_field_3` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`reply_id`),
  KEY `reply_article` (`article_id`) USING BTREE,
  CONSTRAINT `tech_blog_article_reply_ibfk_1` FOREIGN KEY (`article_id`) REFERENCES `tech_blog_article` (`article_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8 COMMENT='InnoDB free: 0 kB; (`article_id`) REFER `tech_blog/tech_blog';

-- ----------------------------
-- Records of tech_blog_article_reply
-- ----------------------------
INSERT INTO `tech_blog_article_reply` VALUES ('1', '3', 'Echo', '399931011@qq.com', '', '正好用到，谢谢博主~', '2013-12-19 12:32:09', '1', null, null, null);
INSERT INTO `tech_blog_article_reply` VALUES ('2', '4', '匿名', '', '', '其实就是部署项目然后设置访问路径为空', '2013-12-07 16:17:18', '1', null, null, null);
INSERT INTO `tech_blog_article_reply` VALUES ('3', '4', '匿名', '', '', '其实就是部署项目然后设置访问路径为空', '2013-12-07 16:17:51', '1', null, null, null);
INSERT INTO `tech_blog_article_reply` VALUES ('4', '4', '匿名', '', '', '原来还可以这样部署...', '2013-12-07 16:18:03', '1', null, null, null);
INSERT INTO `tech_blog_article_reply` VALUES ('5', '1', '匿名', '', '', 'NBA确实是一个巨大的数据市场', '2013-12-07 17:10:25', '1', null, null, null);
INSERT INTO `tech_blog_article_reply` VALUES ('6', '2', '匿名', '', '', 'Lzå¥½è»å®³ï¼', '2014-01-14 17:30:18', '0', null, null, null);
INSERT INTO `tech_blog_article_reply` VALUES ('7', '2', '匿名', '', '', 'ä¸é', '2014-01-14 17:30:18', '0', null, null, null);
INSERT INTO `tech_blog_article_reply` VALUES ('8', '5', '匿名', '', '', '挺详细的~', '2013-12-23 10:54:57', '1', null, null, null);
INSERT INTO `tech_blog_article_reply` VALUES ('9', '8', '匿名', '', '', '恩 挺轻量级的一个单元测试框架 mark', '2014-01-14 17:57:17', '1', null, null, null);
INSERT INTO `tech_blog_article_reply` VALUES ('10', '8', '匿名', '', '', '<p>很久之前就关注过该框架，现在渐渐在团队中普及</p>', '2014-01-14 17:57:17', '1', null, null, null);
INSERT INTO `tech_blog_article_reply` VALUES ('11', '10', 'yy_页面仔', '', '', '很好用，做分页少了很多功夫！', '2014-01-17 13:54:09', '1', null, null, null);
INSERT INTO `tech_blog_article_reply` VALUES ('12', '16', '匿名', '', '', '现在用的较多是restful的webservice吧，wsdl太复杂', '2014-04-08 13:07:22', '1', null, null, null);
INSERT INTO `tech_blog_article_reply` VALUES ('13', '27', '匿名', '', '', '学习了，thx', '2014-05-17 22:54:59', '1', null, null, null);
INSERT INTO `tech_blog_article_reply` VALUES ('14', '29', '匿名', '', '', '很方便啊 不错', '2014-06-19 15:45:10', '1', null, null, null);

-- ----------------------------
-- Table structure for tech_blog_article_tag
-- ----------------------------
DROP TABLE IF EXISTS `tech_blog_article_tag`;
CREATE TABLE `tech_blog_article_tag` (
  `tag_id` smallint(6) NOT NULL AUTO_INCREMENT COMMENT 'Tag ID',
  `tag_name` varchar(20) NOT NULL COMMENT 'Tag name',
  `tag_create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'Create time',
  `article_id` smallint(6) NOT NULL COMMENT 'Article ID',
  `tag_state` tinyint(4) NOT NULL DEFAULT '1' COMMENT 'Tag state. 1 for available, 0 for deleted',
  `bk_field_1` varchar(255) DEFAULT NULL,
  `bk_field_2` varchar(255) DEFAULT NULL,
  `bk_field_3` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`tag_id`),
  KEY `tag_artilce` (`article_id`) USING BTREE,
  CONSTRAINT `tech_blog_article_tag_ibfk_1` FOREIGN KEY (`article_id`) REFERENCES `tech_blog_article` (`article_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=161 DEFAULT CHARSET=utf8 COMMENT='InnoDB free: 0 kB; (`article_id`) REFER `tech_blog/tech_blog';

-- ----------------------------
-- Records of tech_blog_article_tag
-- ----------------------------
INSERT INTO `tech_blog_article_tag` VALUES ('1', 'SAP', '2013-11-26 18:09:33', '1', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('2', 'NBA', '2013-11-26 18:09:34', '1', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('3', 'Uber', '2013-11-26 18:11:39', '2', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('4', '打车应用', '2013-11-26 18:11:39', '2', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('5', 'Javascript', '2013-11-27 15:50:37', '3', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('6', '强制关闭页面', '2013-11-27 15:50:37', '3', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('7', 'J2EE', '2013-11-27 16:33:25', '4', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('8', 'Tomcat', '2013-11-27 16:33:25', '4', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('14', 'Google', '2014-01-01 14:35:55', '7', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('15', '2014', '2014-01-01 14:35:55', '7', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('16', 'Javascript', '2014-01-01 15:15:28', '5', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('17', '跨域', '2014-01-01 15:15:28', '5', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('33', 'Oracle', '2014-01-14 17:27:47', '9', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('34', 'XSS', '2014-01-14 18:03:40', '6', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('35', 'CSRF', '2014-01-14 18:03:40', '6', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('36', 'web安全', '2014-01-14 18:03:40', '6', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('40', 'Git', '2014-01-15 14:21:52', '11', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('41', '版本控制', '2014-01-15 14:21:52', '11', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('42', '单元测试', '2014-01-15 15:13:28', '8', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('43', 'jasmine', '2014-01-15 15:13:28', '8', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('49', '分页', '2014-01-17 13:58:07', '10', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('53', 'IntelliJ Idea', '2014-01-20 19:19:50', '12', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('54', '创建J2EE工程', '2014-01-20 19:19:50', '12', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('55', 'IntelliJ Idea', '2014-01-20 19:21:35', '13', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('59', '爸爸去哪儿', '2014-01-22 10:21:36', '14', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('69', 'Webservice', '2014-02-02 20:09:15', '16', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('70', 'WSDL', '2014-02-02 20:09:15', '16', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('71', 'Webservice', '2014-02-02 20:09:25', '15', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('74', 'Jquery', '2014-03-03 18:05:14', '17', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('75', '中位数', '2014-03-04 14:15:04', '18', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('76', '大数据处理', '2014-03-05 00:51:52', '19', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('77', '面试题', '2014-03-05 00:51:52', '19', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('87', 'CSS3', '2014-03-20 15:44:54', '20', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('88', 'HTML5', '2014-03-20 15:44:54', '20', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('89', '浏览器支持', '2014-03-20 15:44:54', '20', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('92', 'WSDL', '2014-04-03 16:35:47', '21', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('93', 'webservice', '2014-04-03 16:35:47', '21', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('95', 'web应用测试', '2014-04-08 13:05:24', '22', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('99', 'Servlet线程安全', '2014-04-13 15:21:49', '23', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('100', '会话跟踪', '2014-04-13 18:24:51', '24', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('101', 'session', '2014-04-13 18:24:51', '24', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('110', '同步', '2014-05-24 15:54:17', '27', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('111', '并发编程', '2014-05-24 15:54:17', '27', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('112', '并发编程', '2014-05-24 15:55:26', '26', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('113', '线程协作', '2014-05-24 15:55:26', '26', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('114', 'JGit', '2014-05-24 15:56:51', '25', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('115', 'Git', '2014-05-24 15:56:51', '25', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('122', '编程题', '2014-05-26 11:12:37', '28', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('123', '字符串', '2014-05-26 11:12:37', '28', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('134', '返回顶部', '2014-05-26 11:54:40', '29', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('135', 'JQuery', '2014-05-26 11:54:40', '29', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('152', '设计模式', '2014-06-12 11:34:22', '31', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('153', '单例模式', '2014-06-12 11:34:22', '31', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('154', '设计模式', '2014-06-12 11:35:15', '32', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('155', '原型模式', '2014-06-12 11:35:15', '32', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('156', '设计模式', '2014-06-12 11:36:30', '30', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('157', '工厂模式', '2014-06-12 11:36:30', '30', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('158', '设计模式', '2014-06-12 11:56:54', '33', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('159', '建造者模式', '2014-06-12 11:56:54', '33', '1', null, null, null);
INSERT INTO `tech_blog_article_tag` VALUES ('160', '基础算法', '2014-06-20 14:18:15', '34', '1', null, null, null);

-- ----------------------------
-- Table structure for tech_blog_resource
-- ----------------------------
DROP TABLE IF EXISTS `tech_blog_resource`;
CREATE TABLE `tech_blog_resource` (
  `resource_id` smallint(6) NOT NULL AUTO_INCREMENT COMMENT 'Resource identity',
  `resource_title` varchar(100) NOT NULL COMMENT 'Resource title',
  `resource_size` int(11) NOT NULL DEFAULT '0' COMMENT 'Resource file size',
  `resource_desc` varchar(1000) NOT NULL COMMENT 'Resource description',
  `resource_upload_time` datetime NOT NULL COMMENT 'Upload date time',
  `resource_update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'Update date time',
  `resource_category_id` smallint(6) NOT NULL COMMENT 'Foreign key, reference to tech_blog_resource_category(category_id)',
  `upload_admin_id` smallint(6) NOT NULL COMMENT 'Foreight key, update administrator identity',
  `resource_donwload_count` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Resource download times',
  `resource_set_top` tinyint(4) NOT NULL DEFAULT '0' COMMENT 'Set top flag, 1 for set top, 0 for ordinary',
  `bk_field_1` varchar(255) CHARACTER SET latin1 DEFAULT NULL,
  `bk_field_2` varchar(255) CHARACTER SET latin1 DEFAULT NULL,
  `bk_field_3` varchar(255) CHARACTER SET latin1 DEFAULT NULL,
  PRIMARY KEY (`resource_id`),
  KEY `resource_admin` (`upload_admin_id`) USING HASH,
  KEY `resource_title_index` (`resource_title`) USING BTREE,
  KEY `resource_desc_index` (`resource_desc`(255)) USING BTREE,
  KEY `fg_resouce_category` (`resource_category_id`),
  CONSTRAINT `fg_resouce_category` FOREIGN KEY (`resource_category_id`) REFERENCES `tech_blog_resource_category` (`category_id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fg_resource_admin` FOREIGN KEY (`upload_admin_id`) REFERENCES `tech_blog_admin` (`admin_id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of tech_blog_resource
-- ----------------------------

-- ----------------------------
-- Table structure for tech_blog_resource_category
-- ----------------------------
DROP TABLE IF EXISTS `tech_blog_resource_category`;
CREATE TABLE `tech_blog_resource_category` (
  `category_id` smallint(6) NOT NULL AUTO_INCREMENT COMMENT 'Category identity',
  `category_name` varchar(50) NOT NULL COMMENT 'Category name',
  `category_create_time` datetime NOT NULL COMMENT 'Create time',
  `category_update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'Update time',
  `resource_count` smallint(6) NOT NULL DEFAULT '0' COMMENT 'The resource count which is under the category',
  `category_state` tinyint(4) NOT NULL DEFAULT '1' COMMENT 'Category state. 1 for active, 0 for deleted',
  `category_order` smallint(6) NOT NULL,
  `bk_field_1` varchar(255) CHARACTER SET latin1 DEFAULT NULL,
  `bk_field_2` varchar(255) CHARACTER SET latin1 DEFAULT NULL,
  `bk_field_3` varchar(255) CHARACTER SET latin1 DEFAULT NULL,
  PRIMARY KEY (`category_id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of tech_blog_resource_category
-- ----------------------------
INSERT INTO `tech_blog_resource_category` VALUES ('1', '代码文件', '2014-06-21 23:00:48', '2014-06-21 23:03:28', '0', '1', '1', null, null, null);
INSERT INTO `tech_blog_resource_category` VALUES ('2', '技术文档', '2014-06-21 23:01:16', '2014-06-21 23:03:39', '0', '1', '2', null, null, null);
DROP TRIGGER IF EXISTS `increase_article_category_count`;
DELIMITER ;;
CREATE TRIGGER `increase_article_category_count` AFTER INSERT ON `tech_blog_article` FOR EACH ROW BEGIN
	UPDATE tech_blog_article_category
SET category_article_count = category_article_count + 1
WHERE
	category_id = new.category_id ;
END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `update_article_category_count`;
DELIMITER ;;
CREATE TRIGGER `update_article_category_count` AFTER UPDATE ON `tech_blog_article` FOR EACH ROW BEGIN
	UPDATE tech_blog_article_category t1
SET t1.category_article_count = (
	SELECT
		count(*)
	FROM
		tech_blog_article t2
	WHERE
		t2.category_id = t1.category_id
	AND t2.article_state = 1
) ;
END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `decrease_article_category_count`;
DELIMITER ;;
CREATE TRIGGER `decrease_article_category_count` AFTER DELETE ON `tech_blog_article` FOR EACH ROW BEGIN
	UPDATE tech_blog_article_category
SET category_article_count = category_article_count - 1
WHERE
	category_id = old.category_id ;
END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `increase_article_admin_reply_count`;
DELIMITER ;;
CREATE TRIGGER `increase_article_admin_reply_count` AFTER INSERT ON `tech_blog_article_admin_reply` FOR EACH ROW BEGIN
	UPDATE tech_blog_article
SET article_reply_times = article_reply_times + 1
WHERE
	article_id = (
		SELECT
			article_id
		FROM
			tech_blog_article_reply
		WHERE
			reply_id = new.article_reply_id
	) ;
END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `decrease_article_admin_reply_count`;
DELIMITER ;;
CREATE TRIGGER `decrease_article_admin_reply_count` AFTER UPDATE ON `tech_blog_article_admin_reply` FOR EACH ROW BEGIN

IF old.admin_reply_state <> new.admin_reply_state
AND new.admin_reply_state = 0 THEN
	UPDATE tech_blog_article
SET article_reply_times = article_reply_times - 1
WHERE
	article_id = (
		SELECT
			article_id
		FROM
			tech_blog_article_reply
		WHERE
			reply_id = old.article_reply_id
	) ;
ELSEIF old.admin_reply_state <> new.admin_reply_state
AND new.admin_reply_state = 1 THEN
	UPDATE tech_blog_article
SET article_reply_times = article_reply_times + 1
WHERE
	article_id = (
		SELECT
			article_id
		FROM
			tech_blog_article_reply
		WHERE
			reply_id = old.article_reply_id
	) ;
END
IF ;
END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `increase_article_reply_count`;
DELIMITER ;;
CREATE TRIGGER `increase_article_reply_count` AFTER INSERT ON `tech_blog_article_reply` FOR EACH ROW BEGIN
	UPDATE tech_blog_article
SET article_reply_times = article_reply_times + 1
WHERE
	article_id = new.article_id ;
END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `update_article_reply_count`;
DELIMITER ;;
CREATE TRIGGER `update_article_reply_count` AFTER UPDATE ON `tech_blog_article_reply` FOR EACH ROW BEGIN

IF new.reply_state <> old.reply_state
AND new.reply_state = 1 THEN
	UPDATE tech_blog_article
SET article_reply_times = article_reply_times + 1
WHERE
	article_id = new.article_id ;
ELSEIF new.reply_state <> old.reply_state
AND new.reply_state = 0 THEN
	UPDATE tech_blog_article
SET article_reply_times = article_reply_times - 1
WHERE
	article_id = new.article_id ;
END
IF ;
END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `decrease_article_reply_count`;
DELIMITER ;;
CREATE TRIGGER `decrease_article_reply_count` AFTER DELETE ON `tech_blog_article_reply` FOR EACH ROW BEGIN
	UPDATE tech_blog_article
SET article_reply_times = article_reply_times - 1
WHERE
	article_id = old.article_id ;
END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `add_resource_increase_count`;
DELIMITER ;;
CREATE TRIGGER `add_resource_increase_count` AFTER INSERT ON `tech_blog_resource` FOR EACH ROW BEGIN
	update tech_blog_resource_category as cate
	set cate.resource_count = cate.resource_count + 1
	where cate.category_id = new.resource_category_id;
end
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `update_resource_update_count`;
DELIMITER ;;
CREATE TRIGGER `update_resource_update_count` AFTER UPDATE ON `tech_blog_resource` FOR EACH ROW BEGIN
	update tech_blog_resource_category as cate
	set cate.resource_count = (
		select count(*)
		from tech_blog_resource as res
		where res.resource_category_id = cate.category_id
	);
end
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `delete_resource_decrease_count`;
DELIMITER ;;
CREATE TRIGGER `delete_resource_decrease_count` AFTER DELETE ON `tech_blog_resource` FOR EACH ROW BEGIN
	update tech_blog_resource_category as cate
	set cate.resource_count = cate.resource_count - 1
	where cate.category_id = old.resource_category_id;
end
;;
DELIMITER ;
